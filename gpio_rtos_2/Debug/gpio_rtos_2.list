
gpio_rtos_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006428  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  080065b8  080065b8  000075b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800668c  0800668c  00008060  2**0
                  CONTENTS
  4 .ARM          00000008  0800668c  0800668c  0000768c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006694  08006694  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006694  08006694  00007694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006698  08006698  00007698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800669c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c24  20000060  080066fc  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c84  080066fc  00008c84  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000182c7  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003080  00000000  00000000  00020357  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001318  00000000  00000000  000233d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000eeb  00000000  00000000  000246f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000033ca  00000000  00000000  000255db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017027  00000000  00000000  000289a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000afcb9  00000000  00000000  0003f9cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ef685  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005554  00000000  00000000  000ef6c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  000f4c1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080065a0 	.word	0x080065a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	080065a0 	.word	0x080065a0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000274:	f000 faaa 	bl	80007cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000278:	f000 f818 	bl	80002ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800027c:	f000 f87e 	bl	800037c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000280:	f000 f850 	bl	8000324 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000284:	f002 fe90 	bl	8002fa8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ledTask */
  ledTaskHandle = osThreadNew(StartLedTask, NULL, &ledTask_attributes);
 8000288:	4a05      	ldr	r2, [pc, #20]	@ (80002a0 <main+0x30>)
 800028a:	2100      	movs	r1, #0
 800028c:	4805      	ldr	r0, [pc, #20]	@ (80002a4 <main+0x34>)
 800028e:	f002 ff25 	bl	80030dc <osThreadNew>
 8000292:	4603      	mov	r3, r0
 8000294:	4a04      	ldr	r2, [pc, #16]	@ (80002a8 <main+0x38>)
 8000296:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000298:	f002 feba 	bl	8003010 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800029c:	bf00      	nop
 800029e:	e7fd      	b.n	800029c <main+0x2c>
 80002a0:	080065fc 	.word	0x080065fc
 80002a4:	08000429 	.word	0x08000429
 80002a8:	20000104 	.word	0x20000104

080002ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b090      	sub	sp, #64	@ 0x40
 80002b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002b2:	f107 0318 	add.w	r3, r7, #24
 80002b6:	2228      	movs	r2, #40	@ 0x28
 80002b8:	2100      	movs	r1, #0
 80002ba:	4618      	mov	r0, r3
 80002bc:	f005 fc9a 	bl	8005bf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002c0:	1d3b      	adds	r3, r7, #4
 80002c2:	2200      	movs	r2, #0
 80002c4:	601a      	str	r2, [r3, #0]
 80002c6:	605a      	str	r2, [r3, #4]
 80002c8:	609a      	str	r2, [r3, #8]
 80002ca:	60da      	str	r2, [r3, #12]
 80002cc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002ce:	2302      	movs	r3, #2
 80002d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002d2:	2301      	movs	r3, #1
 80002d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002d6:	2310      	movs	r3, #16
 80002d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002da:	2300      	movs	r3, #0
 80002dc:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002de:	f107 0318 	add.w	r3, r7, #24
 80002e2:	4618      	mov	r0, r3
 80002e4:	f000 fd2e 	bl	8000d44 <HAL_RCC_OscConfig>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d001      	beq.n	80002f2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80002ee:	f000 f8f5 	bl	80004dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002f2:	230f      	movs	r3, #15
 80002f4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002f6:	2300      	movs	r3, #0
 80002f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002fa:	2300      	movs	r3, #0
 80002fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002fe:	2300      	movs	r3, #0
 8000300:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000302:	2300      	movs	r3, #0
 8000304:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000306:	1d3b      	adds	r3, r7, #4
 8000308:	2100      	movs	r1, #0
 800030a:	4618      	mov	r0, r3
 800030c:	f001 fd58 	bl	8001dc0 <HAL_RCC_ClockConfig>
 8000310:	4603      	mov	r3, r0
 8000312:	2b00      	cmp	r3, #0
 8000314:	d001      	beq.n	800031a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000316:	f000 f8e1 	bl	80004dc <Error_Handler>
  }
}
 800031a:	bf00      	nop
 800031c:	3740      	adds	r7, #64	@ 0x40
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}
	...

08000324 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000328:	4b12      	ldr	r3, [pc, #72]	@ (8000374 <MX_USART2_UART_Init+0x50>)
 800032a:	4a13      	ldr	r2, [pc, #76]	@ (8000378 <MX_USART2_UART_Init+0x54>)
 800032c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800032e:	4b11      	ldr	r3, [pc, #68]	@ (8000374 <MX_USART2_UART_Init+0x50>)
 8000330:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000334:	605a      	str	r2, [r3, #4]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000336:	4b0f      	ldr	r3, [pc, #60]	@ (8000374 <MX_USART2_UART_Init+0x50>)
 8000338:	2200      	movs	r2, #0
 800033a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800033c:	4b0d      	ldr	r3, [pc, #52]	@ (8000374 <MX_USART2_UART_Init+0x50>)
 800033e:	2200      	movs	r2, #0
 8000340:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000342:	4b0c      	ldr	r3, [pc, #48]	@ (8000374 <MX_USART2_UART_Init+0x50>)
 8000344:	220c      	movs	r2, #12
 8000346:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000348:	4b0a      	ldr	r3, [pc, #40]	@ (8000374 <MX_USART2_UART_Init+0x50>)
 800034a:	2200      	movs	r2, #0
 800034c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800034e:	4b09      	ldr	r3, [pc, #36]	@ (8000374 <MX_USART2_UART_Init+0x50>)
 8000350:	2200      	movs	r2, #0
 8000352:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000354:	4b07      	ldr	r3, [pc, #28]	@ (8000374 <MX_USART2_UART_Init+0x50>)
 8000356:	2200      	movs	r2, #0
 8000358:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800035a:	4b06      	ldr	r3, [pc, #24]	@ (8000374 <MX_USART2_UART_Init+0x50>)
 800035c:	2200      	movs	r2, #0
 800035e:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000360:	4804      	ldr	r0, [pc, #16]	@ (8000374 <MX_USART2_UART_Init+0x50>)
 8000362:	f002 f9f7 	bl	8002754 <HAL_UART_Init>
 8000366:	4603      	mov	r3, r0
 8000368:	2b00      	cmp	r3, #0
 800036a:	d001      	beq.n	8000370 <MX_USART2_UART_Init+0x4c>
  {
    Error_Handler();
 800036c:	f000 f8b6 	bl	80004dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000370:	bf00      	nop
 8000372:	bd80      	pop	{r7, pc}
 8000374:	2000007c 	.word	0x2000007c
 8000378:	40004400 	.word	0x40004400

0800037c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b088      	sub	sp, #32
 8000380:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000382:	f107 030c 	add.w	r3, r7, #12
 8000386:	2200      	movs	r2, #0
 8000388:	601a      	str	r2, [r3, #0]
 800038a:	605a      	str	r2, [r3, #4]
 800038c:	609a      	str	r2, [r3, #8]
 800038e:	60da      	str	r2, [r3, #12]
 8000390:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000392:	4b23      	ldr	r3, [pc, #140]	@ (8000420 <MX_GPIO_Init+0xa4>)
 8000394:	695b      	ldr	r3, [r3, #20]
 8000396:	4a22      	ldr	r2, [pc, #136]	@ (8000420 <MX_GPIO_Init+0xa4>)
 8000398:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800039c:	6153      	str	r3, [r2, #20]
 800039e:	4b20      	ldr	r3, [pc, #128]	@ (8000420 <MX_GPIO_Init+0xa4>)
 80003a0:	695b      	ldr	r3, [r3, #20]
 80003a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80003a6:	60bb      	str	r3, [r7, #8]
 80003a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003aa:	4b1d      	ldr	r3, [pc, #116]	@ (8000420 <MX_GPIO_Init+0xa4>)
 80003ac:	695b      	ldr	r3, [r3, #20]
 80003ae:	4a1c      	ldr	r2, [pc, #112]	@ (8000420 <MX_GPIO_Init+0xa4>)
 80003b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80003b4:	6153      	str	r3, [r2, #20]
 80003b6:	4b1a      	ldr	r3, [pc, #104]	@ (8000420 <MX_GPIO_Init+0xa4>)
 80003b8:	695b      	ldr	r3, [r3, #20]
 80003ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80003be:	607b      	str	r3, [r7, #4]
 80003c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 80003c2:	2200      	movs	r2, #0
 80003c4:	2170      	movs	r1, #112	@ 0x70
 80003c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003ca:	f000 fc89 	bl	8000ce0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80003ce:	2200      	movs	r2, #0
 80003d0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003d4:	4813      	ldr	r0, [pc, #76]	@ (8000424 <MX_GPIO_Init+0xa8>)
 80003d6:	f000 fc83 	bl	8000ce0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80003da:	2370      	movs	r3, #112	@ 0x70
 80003dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003de:	2301      	movs	r3, #1
 80003e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e2:	2300      	movs	r3, #0
 80003e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003e6:	2300      	movs	r3, #0
 80003e8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003ea:	f107 030c 	add.w	r3, r7, #12
 80003ee:	4619      	mov	r1, r3
 80003f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003f4:	f000 fb02 	bl	80009fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80003f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80003fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003fe:	2301      	movs	r3, #1
 8000400:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000402:	2300      	movs	r3, #0
 8000404:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000406:	2300      	movs	r3, #0
 8000408:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800040a:	f107 030c 	add.w	r3, r7, #12
 800040e:	4619      	mov	r1, r3
 8000410:	4804      	ldr	r0, [pc, #16]	@ (8000424 <MX_GPIO_Init+0xa8>)
 8000412:	f000 faf3 	bl	80009fc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000416:	bf00      	nop
 8000418:	3720      	adds	r7, #32
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	40021000 	.word	0x40021000
 8000424:	48000400 	.word	0x48000400

08000428 <StartLedTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartLedTask(void *argument)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b096      	sub	sp, #88	@ 0x58
 800042c:	af02      	add	r7, sp, #8
 800042e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOB, 13);
 8000430:	210d      	movs	r1, #13
 8000432:	481e      	ldr	r0, [pc, #120]	@ (80004ac <StartLedTask+0x84>)
 8000434:	f000 fc6c 	bl	8000d10 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOA, 4|5);
 8000438:	2105      	movs	r1, #5
 800043a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800043e:	f000 fc67 	bl	8000d10 <HAL_GPIO_TogglePin>
    uint32_t currentTimeTicks = osKernelGetTickCount();
 8000442:	f002 fe19 	bl	8003078 <osKernelGetTickCount>
 8000446:	64f8      	str	r0, [r7, #76]	@ 0x4c
    uint32_t tickFrequency = osKernelGetTickFreq(); // získání frekvence ticků
 8000448:	f002 fe3e 	bl	80030c8 <osKernelGetTickFreq>
 800044c:	64b8      	str	r0, [r7, #72]	@ 0x48
    uint32_t seconds = currentTimeTicks / tickFrequency;
 800044e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000450:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000452:	fbb2 f3f3 	udiv	r3, r2, r3
 8000456:	647b      	str	r3, [r7, #68]	@ 0x44
    uint32_t milliseconds = (currentTimeTicks % tickFrequency) * 1000 / tickFrequency;
 8000458:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800045a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800045c:	fbb3 f2f2 	udiv	r2, r3, r2
 8000460:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8000462:	fb01 f202 	mul.w	r2, r1, r2
 8000466:	1a9b      	subs	r3, r3, r2
 8000468:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800046c:	fb03 f202 	mul.w	r2, r3, r2
 8000470:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000472:	fbb2 f3f3 	udiv	r3, r2, r3
 8000476:	643b      	str	r3, [r7, #64]	@ 0x40

    char buffer[50];
    int len = snprintf(buffer, sizeof(buffer), "LED Toggled at time: %lu s %lu ms\r\n", seconds, milliseconds);
 8000478:	f107 0008 	add.w	r0, r7, #8
 800047c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800047e:	9300      	str	r3, [sp, #0]
 8000480:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000482:	4a0b      	ldr	r2, [pc, #44]	@ (80004b0 <StartLedTask+0x88>)
 8000484:	2132      	movs	r1, #50	@ 0x32
 8000486:	f005 fb81 	bl	8005b8c <sniprintf>
 800048a:	63f8      	str	r0, [r7, #60]	@ 0x3c
    HAL_UART_Transmit(&huart2, (uint8_t *)buffer, len, HAL_MAX_DELAY);
 800048c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800048e:	b29a      	uxth	r2, r3
 8000490:	f107 0108 	add.w	r1, r7, #8
 8000494:	f04f 33ff 	mov.w	r3, #4294967295
 8000498:	4806      	ldr	r0, [pc, #24]	@ (80004b4 <StartLedTask+0x8c>)
 800049a:	f002 f9a9 	bl	80027f0 <HAL_UART_Transmit>

    osDelay(1000);
 800049e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80004a2:	f002 fec5 	bl	8003230 <osDelay>
  {
 80004a6:	bf00      	nop
 80004a8:	e7c2      	b.n	8000430 <StartLedTask+0x8>
 80004aa:	bf00      	nop
 80004ac:	48000400 	.word	0x48000400
 80004b0:	080065c0 	.word	0x080065c0
 80004b4:	2000007c 	.word	0x2000007c

080004b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	4a04      	ldr	r2, [pc, #16]	@ (80004d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80004c6:	4293      	cmp	r3, r2
 80004c8:	d101      	bne.n	80004ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80004ca:	f000 f995 	bl	80007f8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80004ce:	bf00      	nop
 80004d0:	3708      	adds	r7, #8
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	40012c00 	.word	0x40012c00

080004dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004e0:	b672      	cpsid	i
}
 80004e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004e4:	bf00      	nop
 80004e6:	e7fd      	b.n	80004e4 <Error_Handler+0x8>

080004e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004ee:	4b11      	ldr	r3, [pc, #68]	@ (8000534 <HAL_MspInit+0x4c>)
 80004f0:	699b      	ldr	r3, [r3, #24]
 80004f2:	4a10      	ldr	r2, [pc, #64]	@ (8000534 <HAL_MspInit+0x4c>)
 80004f4:	f043 0301 	orr.w	r3, r3, #1
 80004f8:	6193      	str	r3, [r2, #24]
 80004fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000534 <HAL_MspInit+0x4c>)
 80004fc:	699b      	ldr	r3, [r3, #24]
 80004fe:	f003 0301 	and.w	r3, r3, #1
 8000502:	607b      	str	r3, [r7, #4]
 8000504:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000506:	4b0b      	ldr	r3, [pc, #44]	@ (8000534 <HAL_MspInit+0x4c>)
 8000508:	69db      	ldr	r3, [r3, #28]
 800050a:	4a0a      	ldr	r2, [pc, #40]	@ (8000534 <HAL_MspInit+0x4c>)
 800050c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000510:	61d3      	str	r3, [r2, #28]
 8000512:	4b08      	ldr	r3, [pc, #32]	@ (8000534 <HAL_MspInit+0x4c>)
 8000514:	69db      	ldr	r3, [r3, #28]
 8000516:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800051a:	603b      	str	r3, [r7, #0]
 800051c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800051e:	2200      	movs	r2, #0
 8000520:	210f      	movs	r1, #15
 8000522:	f06f 0001 	mvn.w	r0, #1
 8000526:	f000 fa3f 	bl	80009a8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800052a:	bf00      	nop
 800052c:	3708      	adds	r7, #8
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	40021000 	.word	0x40021000

08000538 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b08a      	sub	sp, #40	@ 0x28
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000540:	f107 0314 	add.w	r3, r7, #20
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]
 800054e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a17      	ldr	r2, [pc, #92]	@ (80005b4 <HAL_UART_MspInit+0x7c>)
 8000556:	4293      	cmp	r3, r2
 8000558:	d128      	bne.n	80005ac <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800055a:	4b17      	ldr	r3, [pc, #92]	@ (80005b8 <HAL_UART_MspInit+0x80>)
 800055c:	69db      	ldr	r3, [r3, #28]
 800055e:	4a16      	ldr	r2, [pc, #88]	@ (80005b8 <HAL_UART_MspInit+0x80>)
 8000560:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000564:	61d3      	str	r3, [r2, #28]
 8000566:	4b14      	ldr	r3, [pc, #80]	@ (80005b8 <HAL_UART_MspInit+0x80>)
 8000568:	69db      	ldr	r3, [r3, #28]
 800056a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800056e:	613b      	str	r3, [r7, #16]
 8000570:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000572:	4b11      	ldr	r3, [pc, #68]	@ (80005b8 <HAL_UART_MspInit+0x80>)
 8000574:	695b      	ldr	r3, [r3, #20]
 8000576:	4a10      	ldr	r2, [pc, #64]	@ (80005b8 <HAL_UART_MspInit+0x80>)
 8000578:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800057c:	6153      	str	r3, [r2, #20]
 800057e:	4b0e      	ldr	r3, [pc, #56]	@ (80005b8 <HAL_UART_MspInit+0x80>)
 8000580:	695b      	ldr	r3, [r3, #20]
 8000582:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000586:	60fb      	str	r3, [r7, #12]
 8000588:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800058a:	230c      	movs	r3, #12
 800058c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800058e:	2302      	movs	r3, #2
 8000590:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000592:	2300      	movs	r3, #0
 8000594:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000596:	2303      	movs	r3, #3
 8000598:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800059a:	2307      	movs	r3, #7
 800059c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800059e:	f107 0314 	add.w	r3, r7, #20
 80005a2:	4619      	mov	r1, r3
 80005a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005a8:	f000 fa28 	bl	80009fc <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80005ac:	bf00      	nop
 80005ae:	3728      	adds	r7, #40	@ 0x28
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	40004400 	.word	0x40004400
 80005b8:	40021000 	.word	0x40021000

080005bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b08c      	sub	sp, #48	@ 0x30
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80005c4:	2300      	movs	r3, #0
 80005c6:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80005c8:	2300      	movs	r3, #0
 80005ca:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80005cc:	4b2e      	ldr	r3, [pc, #184]	@ (8000688 <HAL_InitTick+0xcc>)
 80005ce:	699b      	ldr	r3, [r3, #24]
 80005d0:	4a2d      	ldr	r2, [pc, #180]	@ (8000688 <HAL_InitTick+0xcc>)
 80005d2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80005d6:	6193      	str	r3, [r2, #24]
 80005d8:	4b2b      	ldr	r3, [pc, #172]	@ (8000688 <HAL_InitTick+0xcc>)
 80005da:	699b      	ldr	r3, [r3, #24]
 80005dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80005e0:	60bb      	str	r3, [r7, #8]
 80005e2:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80005e4:	f107 020c 	add.w	r2, r7, #12
 80005e8:	f107 0310 	add.w	r3, r7, #16
 80005ec:	4611      	mov	r1, r2
 80005ee:	4618      	mov	r0, r3
 80005f0:	f001 fe06 	bl	8002200 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80005f4:	f001 fde2 	bl	80021bc <HAL_RCC_GetPCLK2Freq>
 80005f8:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80005fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80005fc:	4a23      	ldr	r2, [pc, #140]	@ (800068c <HAL_InitTick+0xd0>)
 80005fe:	fba2 2303 	umull	r2, r3, r2, r3
 8000602:	0c9b      	lsrs	r3, r3, #18
 8000604:	3b01      	subs	r3, #1
 8000606:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000608:	4b21      	ldr	r3, [pc, #132]	@ (8000690 <HAL_InitTick+0xd4>)
 800060a:	4a22      	ldr	r2, [pc, #136]	@ (8000694 <HAL_InitTick+0xd8>)
 800060c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800060e:	4b20      	ldr	r3, [pc, #128]	@ (8000690 <HAL_InitTick+0xd4>)
 8000610:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000614:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000616:	4a1e      	ldr	r2, [pc, #120]	@ (8000690 <HAL_InitTick+0xd4>)
 8000618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800061a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800061c:	4b1c      	ldr	r3, [pc, #112]	@ (8000690 <HAL_InitTick+0xd4>)
 800061e:	2200      	movs	r2, #0
 8000620:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000622:	4b1b      	ldr	r3, [pc, #108]	@ (8000690 <HAL_InitTick+0xd4>)
 8000624:	2200      	movs	r2, #0
 8000626:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000628:	4b19      	ldr	r3, [pc, #100]	@ (8000690 <HAL_InitTick+0xd4>)
 800062a:	2200      	movs	r2, #0
 800062c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800062e:	4818      	ldr	r0, [pc, #96]	@ (8000690 <HAL_InitTick+0xd4>)
 8000630:	f001 fe18 	bl	8002264 <HAL_TIM_Base_Init>
 8000634:	4603      	mov	r3, r0
 8000636:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800063a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800063e:	2b00      	cmp	r3, #0
 8000640:	d11b      	bne.n	800067a <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000642:	4813      	ldr	r0, [pc, #76]	@ (8000690 <HAL_InitTick+0xd4>)
 8000644:	f001 fe70 	bl	8002328 <HAL_TIM_Base_Start_IT>
 8000648:	4603      	mov	r3, r0
 800064a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800064e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000652:	2b00      	cmp	r3, #0
 8000654:	d111      	bne.n	800067a <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000656:	2019      	movs	r0, #25
 8000658:	f000 f9c2 	bl	80009e0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	2b0f      	cmp	r3, #15
 8000660:	d808      	bhi.n	8000674 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000662:	2200      	movs	r2, #0
 8000664:	6879      	ldr	r1, [r7, #4]
 8000666:	2019      	movs	r0, #25
 8000668:	f000 f99e 	bl	80009a8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800066c:	4a0a      	ldr	r2, [pc, #40]	@ (8000698 <HAL_InitTick+0xdc>)
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	6013      	str	r3, [r2, #0]
 8000672:	e002      	b.n	800067a <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8000674:	2301      	movs	r3, #1
 8000676:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800067a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800067e:	4618      	mov	r0, r3
 8000680:	3730      	adds	r7, #48	@ 0x30
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40021000 	.word	0x40021000
 800068c:	431bde83 	.word	0x431bde83
 8000690:	20000108 	.word	0x20000108
 8000694:	40012c00 	.word	0x40012c00
 8000698:	20000004 	.word	0x20000004

0800069c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006a0:	bf00      	nop
 80006a2:	e7fd      	b.n	80006a0 <NMI_Handler+0x4>

080006a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006a8:	bf00      	nop
 80006aa:	e7fd      	b.n	80006a8 <HardFault_Handler+0x4>

080006ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006b0:	bf00      	nop
 80006b2:	e7fd      	b.n	80006b0 <MemManage_Handler+0x4>

080006b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006b8:	bf00      	nop
 80006ba:	e7fd      	b.n	80006b8 <BusFault_Handler+0x4>

080006bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006c0:	bf00      	nop
 80006c2:	e7fd      	b.n	80006c0 <UsageFault_Handler+0x4>

080006c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006c8:	bf00      	nop
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
	...

080006d4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80006d8:	4802      	ldr	r0, [pc, #8]	@ (80006e4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80006da:	f001 fe79 	bl	80023d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	20000108 	.word	0x20000108

080006e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b086      	sub	sp, #24
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006f0:	4a14      	ldr	r2, [pc, #80]	@ (8000744 <_sbrk+0x5c>)
 80006f2:	4b15      	ldr	r3, [pc, #84]	@ (8000748 <_sbrk+0x60>)
 80006f4:	1ad3      	subs	r3, r2, r3
 80006f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006f8:	697b      	ldr	r3, [r7, #20]
 80006fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006fc:	4b13      	ldr	r3, [pc, #76]	@ (800074c <_sbrk+0x64>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d102      	bne.n	800070a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000704:	4b11      	ldr	r3, [pc, #68]	@ (800074c <_sbrk+0x64>)
 8000706:	4a12      	ldr	r2, [pc, #72]	@ (8000750 <_sbrk+0x68>)
 8000708:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800070a:	4b10      	ldr	r3, [pc, #64]	@ (800074c <_sbrk+0x64>)
 800070c:	681a      	ldr	r2, [r3, #0]
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	4413      	add	r3, r2
 8000712:	693a      	ldr	r2, [r7, #16]
 8000714:	429a      	cmp	r2, r3
 8000716:	d207      	bcs.n	8000728 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000718:	f005 faca 	bl	8005cb0 <__errno>
 800071c:	4603      	mov	r3, r0
 800071e:	220c      	movs	r2, #12
 8000720:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000722:	f04f 33ff 	mov.w	r3, #4294967295
 8000726:	e009      	b.n	800073c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000728:	4b08      	ldr	r3, [pc, #32]	@ (800074c <_sbrk+0x64>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800072e:	4b07      	ldr	r3, [pc, #28]	@ (800074c <_sbrk+0x64>)
 8000730:	681a      	ldr	r2, [r3, #0]
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	4413      	add	r3, r2
 8000736:	4a05      	ldr	r2, [pc, #20]	@ (800074c <_sbrk+0x64>)
 8000738:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800073a:	68fb      	ldr	r3, [r7, #12]
}
 800073c:	4618      	mov	r0, r3
 800073e:	3718      	adds	r7, #24
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	20004000 	.word	0x20004000
 8000748:	00000400 	.word	0x00000400
 800074c:	20000154 	.word	0x20000154
 8000750:	20001c88 	.word	0x20001c88

08000754 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000758:	4b06      	ldr	r3, [pc, #24]	@ (8000774 <SystemInit+0x20>)
 800075a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800075e:	4a05      	ldr	r2, [pc, #20]	@ (8000774 <SystemInit+0x20>)
 8000760:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000764:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000768:	bf00      	nop
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	e000ed00 	.word	0xe000ed00

08000778 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000778:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80007b0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800077c:	f7ff ffea 	bl	8000754 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000780:	480c      	ldr	r0, [pc, #48]	@ (80007b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000782:	490d      	ldr	r1, [pc, #52]	@ (80007b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000784:	4a0d      	ldr	r2, [pc, #52]	@ (80007bc <LoopForever+0xe>)
  movs r3, #0
 8000786:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000788:	e002      	b.n	8000790 <LoopCopyDataInit>

0800078a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800078a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800078c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800078e:	3304      	adds	r3, #4

08000790 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000790:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000792:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000794:	d3f9      	bcc.n	800078a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000796:	4a0a      	ldr	r2, [pc, #40]	@ (80007c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000798:	4c0a      	ldr	r4, [pc, #40]	@ (80007c4 <LoopForever+0x16>)
  movs r3, #0
 800079a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800079c:	e001      	b.n	80007a2 <LoopFillZerobss>

0800079e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800079e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007a0:	3204      	adds	r2, #4

080007a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007a4:	d3fb      	bcc.n	800079e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007a6:	f005 fa89 	bl	8005cbc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007aa:	f7ff fd61 	bl	8000270 <main>

080007ae <LoopForever>:

LoopForever:
    b LoopForever
 80007ae:	e7fe      	b.n	80007ae <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007b0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80007b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007b8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80007bc:	0800669c 	.word	0x0800669c
  ldr r2, =_sbss
 80007c0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80007c4:	20001c84 	.word	0x20001c84

080007c8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007c8:	e7fe      	b.n	80007c8 <ADC1_IRQHandler>
	...

080007cc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007d0:	4b08      	ldr	r3, [pc, #32]	@ (80007f4 <HAL_Init+0x28>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a07      	ldr	r2, [pc, #28]	@ (80007f4 <HAL_Init+0x28>)
 80007d6:	f043 0310 	orr.w	r3, r3, #16
 80007da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007dc:	2003      	movs	r0, #3
 80007de:	f000 f8d8 	bl	8000992 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007e2:	200f      	movs	r0, #15
 80007e4:	f7ff feea 	bl	80005bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007e8:	f7ff fe7e 	bl	80004e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007ec:	2300      	movs	r3, #0
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40022000 	.word	0x40022000

080007f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007fc:	4b06      	ldr	r3, [pc, #24]	@ (8000818 <HAL_IncTick+0x20>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	461a      	mov	r2, r3
 8000802:	4b06      	ldr	r3, [pc, #24]	@ (800081c <HAL_IncTick+0x24>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4413      	add	r3, r2
 8000808:	4a04      	ldr	r2, [pc, #16]	@ (800081c <HAL_IncTick+0x24>)
 800080a:	6013      	str	r3, [r2, #0]
}
 800080c:	bf00      	nop
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	20000008 	.word	0x20000008
 800081c:	20000158 	.word	0x20000158

08000820 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  return uwTick;  
 8000824:	4b03      	ldr	r3, [pc, #12]	@ (8000834 <HAL_GetTick+0x14>)
 8000826:	681b      	ldr	r3, [r3, #0]
}
 8000828:	4618      	mov	r0, r3
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	20000158 	.word	0x20000158

08000838 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000838:	b480      	push	{r7}
 800083a:	b085      	sub	sp, #20
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	f003 0307 	and.w	r3, r3, #7
 8000846:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000848:	4b0c      	ldr	r3, [pc, #48]	@ (800087c <__NVIC_SetPriorityGrouping+0x44>)
 800084a:	68db      	ldr	r3, [r3, #12]
 800084c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800084e:	68ba      	ldr	r2, [r7, #8]
 8000850:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000854:	4013      	ands	r3, r2
 8000856:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000860:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000864:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000868:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800086a:	4a04      	ldr	r2, [pc, #16]	@ (800087c <__NVIC_SetPriorityGrouping+0x44>)
 800086c:	68bb      	ldr	r3, [r7, #8]
 800086e:	60d3      	str	r3, [r2, #12]
}
 8000870:	bf00      	nop
 8000872:	3714      	adds	r7, #20
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr
 800087c:	e000ed00 	.word	0xe000ed00

08000880 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000884:	4b04      	ldr	r3, [pc, #16]	@ (8000898 <__NVIC_GetPriorityGrouping+0x18>)
 8000886:	68db      	ldr	r3, [r3, #12]
 8000888:	0a1b      	lsrs	r3, r3, #8
 800088a:	f003 0307 	and.w	r3, r3, #7
}
 800088e:	4618      	mov	r0, r3
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr
 8000898:	e000ed00 	.word	0xe000ed00

0800089c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	4603      	mov	r3, r0
 80008a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	db0b      	blt.n	80008c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	f003 021f 	and.w	r2, r3, #31
 80008b4:	4907      	ldr	r1, [pc, #28]	@ (80008d4 <__NVIC_EnableIRQ+0x38>)
 80008b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ba:	095b      	lsrs	r3, r3, #5
 80008bc:	2001      	movs	r0, #1
 80008be:	fa00 f202 	lsl.w	r2, r0, r2
 80008c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008c6:	bf00      	nop
 80008c8:	370c      	adds	r7, #12
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	e000e100 	.word	0xe000e100

080008d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
 80008de:	4603      	mov	r3, r0
 80008e0:	6039      	str	r1, [r7, #0]
 80008e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	db0a      	blt.n	8000902 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	b2da      	uxtb	r2, r3
 80008f0:	490c      	ldr	r1, [pc, #48]	@ (8000924 <__NVIC_SetPriority+0x4c>)
 80008f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f6:	0112      	lsls	r2, r2, #4
 80008f8:	b2d2      	uxtb	r2, r2
 80008fa:	440b      	add	r3, r1
 80008fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000900:	e00a      	b.n	8000918 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	b2da      	uxtb	r2, r3
 8000906:	4908      	ldr	r1, [pc, #32]	@ (8000928 <__NVIC_SetPriority+0x50>)
 8000908:	79fb      	ldrb	r3, [r7, #7]
 800090a:	f003 030f 	and.w	r3, r3, #15
 800090e:	3b04      	subs	r3, #4
 8000910:	0112      	lsls	r2, r2, #4
 8000912:	b2d2      	uxtb	r2, r2
 8000914:	440b      	add	r3, r1
 8000916:	761a      	strb	r2, [r3, #24]
}
 8000918:	bf00      	nop
 800091a:	370c      	adds	r7, #12
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr
 8000924:	e000e100 	.word	0xe000e100
 8000928:	e000ed00 	.word	0xe000ed00

0800092c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800092c:	b480      	push	{r7}
 800092e:	b089      	sub	sp, #36	@ 0x24
 8000930:	af00      	add	r7, sp, #0
 8000932:	60f8      	str	r0, [r7, #12]
 8000934:	60b9      	str	r1, [r7, #8]
 8000936:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	f003 0307 	and.w	r3, r3, #7
 800093e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000940:	69fb      	ldr	r3, [r7, #28]
 8000942:	f1c3 0307 	rsb	r3, r3, #7
 8000946:	2b04      	cmp	r3, #4
 8000948:	bf28      	it	cs
 800094a:	2304      	movcs	r3, #4
 800094c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800094e:	69fb      	ldr	r3, [r7, #28]
 8000950:	3304      	adds	r3, #4
 8000952:	2b06      	cmp	r3, #6
 8000954:	d902      	bls.n	800095c <NVIC_EncodePriority+0x30>
 8000956:	69fb      	ldr	r3, [r7, #28]
 8000958:	3b03      	subs	r3, #3
 800095a:	e000      	b.n	800095e <NVIC_EncodePriority+0x32>
 800095c:	2300      	movs	r3, #0
 800095e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000960:	f04f 32ff 	mov.w	r2, #4294967295
 8000964:	69bb      	ldr	r3, [r7, #24]
 8000966:	fa02 f303 	lsl.w	r3, r2, r3
 800096a:	43da      	mvns	r2, r3
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	401a      	ands	r2, r3
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000974:	f04f 31ff 	mov.w	r1, #4294967295
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	fa01 f303 	lsl.w	r3, r1, r3
 800097e:	43d9      	mvns	r1, r3
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000984:	4313      	orrs	r3, r2
         );
}
 8000986:	4618      	mov	r0, r3
 8000988:	3724      	adds	r7, #36	@ 0x24
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr

08000992 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000992:	b580      	push	{r7, lr}
 8000994:	b082      	sub	sp, #8
 8000996:	af00      	add	r7, sp, #0
 8000998:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800099a:	6878      	ldr	r0, [r7, #4]
 800099c:	f7ff ff4c 	bl	8000838 <__NVIC_SetPriorityGrouping>
}
 80009a0:	bf00      	nop
 80009a2:	3708      	adds	r7, #8
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}

080009a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b086      	sub	sp, #24
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	4603      	mov	r3, r0
 80009b0:	60b9      	str	r1, [r7, #8]
 80009b2:	607a      	str	r2, [r7, #4]
 80009b4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009b6:	2300      	movs	r3, #0
 80009b8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009ba:	f7ff ff61 	bl	8000880 <__NVIC_GetPriorityGrouping>
 80009be:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009c0:	687a      	ldr	r2, [r7, #4]
 80009c2:	68b9      	ldr	r1, [r7, #8]
 80009c4:	6978      	ldr	r0, [r7, #20]
 80009c6:	f7ff ffb1 	bl	800092c <NVIC_EncodePriority>
 80009ca:	4602      	mov	r2, r0
 80009cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009d0:	4611      	mov	r1, r2
 80009d2:	4618      	mov	r0, r3
 80009d4:	f7ff ff80 	bl	80008d8 <__NVIC_SetPriority>
}
 80009d8:	bf00      	nop
 80009da:	3718      	adds	r7, #24
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}

080009e0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	4603      	mov	r3, r0
 80009e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ee:	4618      	mov	r0, r3
 80009f0:	f7ff ff54 	bl	800089c <__NVIC_EnableIRQ>
}
 80009f4:	bf00      	nop
 80009f6:	3708      	adds	r7, #8
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}

080009fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b087      	sub	sp, #28
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
 8000a04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a06:	2300      	movs	r3, #0
 8000a08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a0a:	e14e      	b.n	8000caa <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	681a      	ldr	r2, [r3, #0]
 8000a10:	2101      	movs	r1, #1
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	fa01 f303 	lsl.w	r3, r1, r3
 8000a18:	4013      	ands	r3, r2
 8000a1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	f000 8140 	beq.w	8000ca4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	f003 0303 	and.w	r3, r3, #3
 8000a2c:	2b01      	cmp	r3, #1
 8000a2e:	d005      	beq.n	8000a3c <HAL_GPIO_Init+0x40>
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	f003 0303 	and.w	r3, r3, #3
 8000a38:	2b02      	cmp	r3, #2
 8000a3a:	d130      	bne.n	8000a9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	689b      	ldr	r3, [r3, #8]
 8000a40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	005b      	lsls	r3, r3, #1
 8000a46:	2203      	movs	r2, #3
 8000a48:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4c:	43db      	mvns	r3, r3
 8000a4e:	693a      	ldr	r2, [r7, #16]
 8000a50:	4013      	ands	r3, r2
 8000a52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	68da      	ldr	r2, [r3, #12]
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	005b      	lsls	r3, r3, #1
 8000a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a60:	693a      	ldr	r2, [r7, #16]
 8000a62:	4313      	orrs	r3, r2
 8000a64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	693a      	ldr	r2, [r7, #16]
 8000a6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a72:	2201      	movs	r2, #1
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7a:	43db      	mvns	r3, r3
 8000a7c:	693a      	ldr	r2, [r7, #16]
 8000a7e:	4013      	ands	r3, r2
 8000a80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	091b      	lsrs	r3, r3, #4
 8000a88:	f003 0201 	and.w	r2, r3, #1
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a92:	693a      	ldr	r2, [r7, #16]
 8000a94:	4313      	orrs	r3, r2
 8000a96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	693a      	ldr	r2, [r7, #16]
 8000a9c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	685b      	ldr	r3, [r3, #4]
 8000aa2:	f003 0303 	and.w	r3, r3, #3
 8000aa6:	2b03      	cmp	r3, #3
 8000aa8:	d017      	beq.n	8000ada <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	68db      	ldr	r3, [r3, #12]
 8000aae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	005b      	lsls	r3, r3, #1
 8000ab4:	2203      	movs	r2, #3
 8000ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aba:	43db      	mvns	r3, r3
 8000abc:	693a      	ldr	r2, [r7, #16]
 8000abe:	4013      	ands	r3, r2
 8000ac0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	689a      	ldr	r2, [r3, #8]
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	005b      	lsls	r3, r3, #1
 8000aca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ace:	693a      	ldr	r2, [r7, #16]
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	693a      	ldr	r2, [r7, #16]
 8000ad8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	f003 0303 	and.w	r3, r3, #3
 8000ae2:	2b02      	cmp	r3, #2
 8000ae4:	d123      	bne.n	8000b2e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ae6:	697b      	ldr	r3, [r7, #20]
 8000ae8:	08da      	lsrs	r2, r3, #3
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	3208      	adds	r2, #8
 8000aee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000af2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	f003 0307 	and.w	r3, r3, #7
 8000afa:	009b      	lsls	r3, r3, #2
 8000afc:	220f      	movs	r2, #15
 8000afe:	fa02 f303 	lsl.w	r3, r2, r3
 8000b02:	43db      	mvns	r3, r3
 8000b04:	693a      	ldr	r2, [r7, #16]
 8000b06:	4013      	ands	r3, r2
 8000b08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	691a      	ldr	r2, [r3, #16]
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	f003 0307 	and.w	r3, r3, #7
 8000b14:	009b      	lsls	r3, r3, #2
 8000b16:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1a:	693a      	ldr	r2, [r7, #16]
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	08da      	lsrs	r2, r3, #3
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	3208      	adds	r2, #8
 8000b28:	6939      	ldr	r1, [r7, #16]
 8000b2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	005b      	lsls	r3, r3, #1
 8000b38:	2203      	movs	r2, #3
 8000b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3e:	43db      	mvns	r3, r3
 8000b40:	693a      	ldr	r2, [r7, #16]
 8000b42:	4013      	ands	r3, r2
 8000b44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	f003 0203 	and.w	r2, r3, #3
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	005b      	lsls	r3, r3, #1
 8000b52:	fa02 f303 	lsl.w	r3, r2, r3
 8000b56:	693a      	ldr	r2, [r7, #16]
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	693a      	ldr	r2, [r7, #16]
 8000b60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	f000 809a 	beq.w	8000ca4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b70:	4b55      	ldr	r3, [pc, #340]	@ (8000cc8 <HAL_GPIO_Init+0x2cc>)
 8000b72:	699b      	ldr	r3, [r3, #24]
 8000b74:	4a54      	ldr	r2, [pc, #336]	@ (8000cc8 <HAL_GPIO_Init+0x2cc>)
 8000b76:	f043 0301 	orr.w	r3, r3, #1
 8000b7a:	6193      	str	r3, [r2, #24]
 8000b7c:	4b52      	ldr	r3, [pc, #328]	@ (8000cc8 <HAL_GPIO_Init+0x2cc>)
 8000b7e:	699b      	ldr	r3, [r3, #24]
 8000b80:	f003 0301 	and.w	r3, r3, #1
 8000b84:	60bb      	str	r3, [r7, #8]
 8000b86:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b88:	4a50      	ldr	r2, [pc, #320]	@ (8000ccc <HAL_GPIO_Init+0x2d0>)
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	089b      	lsrs	r3, r3, #2
 8000b8e:	3302      	adds	r3, #2
 8000b90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b94:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	f003 0303 	and.w	r3, r3, #3
 8000b9c:	009b      	lsls	r3, r3, #2
 8000b9e:	220f      	movs	r2, #15
 8000ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba4:	43db      	mvns	r3, r3
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	4013      	ands	r3, r2
 8000baa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000bb2:	d013      	beq.n	8000bdc <HAL_GPIO_Init+0x1e0>
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	4a46      	ldr	r2, [pc, #280]	@ (8000cd0 <HAL_GPIO_Init+0x2d4>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d00d      	beq.n	8000bd8 <HAL_GPIO_Init+0x1dc>
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	4a45      	ldr	r2, [pc, #276]	@ (8000cd4 <HAL_GPIO_Init+0x2d8>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d007      	beq.n	8000bd4 <HAL_GPIO_Init+0x1d8>
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	4a44      	ldr	r2, [pc, #272]	@ (8000cd8 <HAL_GPIO_Init+0x2dc>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d101      	bne.n	8000bd0 <HAL_GPIO_Init+0x1d4>
 8000bcc:	2303      	movs	r3, #3
 8000bce:	e006      	b.n	8000bde <HAL_GPIO_Init+0x1e2>
 8000bd0:	2305      	movs	r3, #5
 8000bd2:	e004      	b.n	8000bde <HAL_GPIO_Init+0x1e2>
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	e002      	b.n	8000bde <HAL_GPIO_Init+0x1e2>
 8000bd8:	2301      	movs	r3, #1
 8000bda:	e000      	b.n	8000bde <HAL_GPIO_Init+0x1e2>
 8000bdc:	2300      	movs	r3, #0
 8000bde:	697a      	ldr	r2, [r7, #20]
 8000be0:	f002 0203 	and.w	r2, r2, #3
 8000be4:	0092      	lsls	r2, r2, #2
 8000be6:	4093      	lsls	r3, r2
 8000be8:	693a      	ldr	r2, [r7, #16]
 8000bea:	4313      	orrs	r3, r2
 8000bec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000bee:	4937      	ldr	r1, [pc, #220]	@ (8000ccc <HAL_GPIO_Init+0x2d0>)
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	089b      	lsrs	r3, r3, #2
 8000bf4:	3302      	adds	r3, #2
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bfc:	4b37      	ldr	r3, [pc, #220]	@ (8000cdc <HAL_GPIO_Init+0x2e0>)
 8000bfe:	689b      	ldr	r3, [r3, #8]
 8000c00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	43db      	mvns	r3, r3
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	4013      	ands	r3, r2
 8000c0a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d003      	beq.n	8000c20 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000c18:	693a      	ldr	r2, [r7, #16]
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c20:	4a2e      	ldr	r2, [pc, #184]	@ (8000cdc <HAL_GPIO_Init+0x2e0>)
 8000c22:	693b      	ldr	r3, [r7, #16]
 8000c24:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c26:	4b2d      	ldr	r3, [pc, #180]	@ (8000cdc <HAL_GPIO_Init+0x2e0>)
 8000c28:	68db      	ldr	r3, [r3, #12]
 8000c2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	43db      	mvns	r3, r3
 8000c30:	693a      	ldr	r2, [r7, #16]
 8000c32:	4013      	ands	r3, r2
 8000c34:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d003      	beq.n	8000c4a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	4313      	orrs	r3, r2
 8000c48:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c4a:	4a24      	ldr	r2, [pc, #144]	@ (8000cdc <HAL_GPIO_Init+0x2e0>)
 8000c4c:	693b      	ldr	r3, [r7, #16]
 8000c4e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000c50:	4b22      	ldr	r3, [pc, #136]	@ (8000cdc <HAL_GPIO_Init+0x2e0>)
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	43db      	mvns	r3, r3
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d003      	beq.n	8000c74 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000c6c:	693a      	ldr	r2, [r7, #16]
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	4313      	orrs	r3, r2
 8000c72:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c74:	4a19      	ldr	r2, [pc, #100]	@ (8000cdc <HAL_GPIO_Init+0x2e0>)
 8000c76:	693b      	ldr	r3, [r7, #16]
 8000c78:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c7a:	4b18      	ldr	r3, [pc, #96]	@ (8000cdc <HAL_GPIO_Init+0x2e0>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	43db      	mvns	r3, r3
 8000c84:	693a      	ldr	r2, [r7, #16]
 8000c86:	4013      	ands	r3, r2
 8000c88:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d003      	beq.n	8000c9e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000c96:	693a      	ldr	r2, [r7, #16]
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	4313      	orrs	r3, r2
 8000c9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c9e:	4a0f      	ldr	r2, [pc, #60]	@ (8000cdc <HAL_GPIO_Init+0x2e0>)
 8000ca0:	693b      	ldr	r3, [r7, #16]
 8000ca2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	fa22 f303 	lsr.w	r3, r2, r3
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	f47f aea9 	bne.w	8000a0c <HAL_GPIO_Init+0x10>
  }
}
 8000cba:	bf00      	nop
 8000cbc:	bf00      	nop
 8000cbe:	371c      	adds	r7, #28
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	40021000 	.word	0x40021000
 8000ccc:	40010000 	.word	0x40010000
 8000cd0:	48000400 	.word	0x48000400
 8000cd4:	48000800 	.word	0x48000800
 8000cd8:	48000c00 	.word	0x48000c00
 8000cdc:	40010400 	.word	0x40010400

08000ce0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	460b      	mov	r3, r1
 8000cea:	807b      	strh	r3, [r7, #2]
 8000cec:	4613      	mov	r3, r2
 8000cee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000cf0:	787b      	ldrb	r3, [r7, #1]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d003      	beq.n	8000cfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000cf6:	887a      	ldrh	r2, [r7, #2]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000cfc:	e002      	b.n	8000d04 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000cfe:	887a      	ldrh	r2, [r7, #2]
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000d04:	bf00      	nop
 8000d06:	370c      	adds	r7, #12
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	460b      	mov	r3, r1
 8000d1a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	695b      	ldr	r3, [r3, #20]
 8000d20:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d22:	887a      	ldrh	r2, [r7, #2]
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	4013      	ands	r3, r2
 8000d28:	041a      	lsls	r2, r3, #16
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	43d9      	mvns	r1, r3
 8000d2e:	887b      	ldrh	r3, [r7, #2]
 8000d30:	400b      	ands	r3, r1
 8000d32:	431a      	orrs	r2, r3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	619a      	str	r2, [r3, #24]
}
 8000d38:	bf00      	nop
 8000d3a:	3714      	adds	r7, #20
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr

08000d44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000d50:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000d54:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000d5a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d102      	bne.n	8000d6a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000d64:	2301      	movs	r3, #1
 8000d66:	f001 b823 	b.w	8001db0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000d6e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f003 0301 	and.w	r3, r3, #1
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	f000 817d 	beq.w	800107a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d80:	4bbc      	ldr	r3, [pc, #752]	@ (8001074 <HAL_RCC_OscConfig+0x330>)
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	f003 030c 	and.w	r3, r3, #12
 8000d88:	2b04      	cmp	r3, #4
 8000d8a:	d00c      	beq.n	8000da6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d8c:	4bb9      	ldr	r3, [pc, #740]	@ (8001074 <HAL_RCC_OscConfig+0x330>)
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f003 030c 	and.w	r3, r3, #12
 8000d94:	2b08      	cmp	r3, #8
 8000d96:	d15c      	bne.n	8000e52 <HAL_RCC_OscConfig+0x10e>
 8000d98:	4bb6      	ldr	r3, [pc, #728]	@ (8001074 <HAL_RCC_OscConfig+0x330>)
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000da0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000da4:	d155      	bne.n	8000e52 <HAL_RCC_OscConfig+0x10e>
 8000da6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000daa:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dae:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8000db2:	fa93 f3a3 	rbit	r3, r3
 8000db6:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000dba:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dbe:	fab3 f383 	clz	r3, r3
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	095b      	lsrs	r3, r3, #5
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	f043 0301 	orr.w	r3, r3, #1
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d102      	bne.n	8000dd8 <HAL_RCC_OscConfig+0x94>
 8000dd2:	4ba8      	ldr	r3, [pc, #672]	@ (8001074 <HAL_RCC_OscConfig+0x330>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	e015      	b.n	8000e04 <HAL_RCC_OscConfig+0xc0>
 8000dd8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000ddc:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000de0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8000de4:	fa93 f3a3 	rbit	r3, r3
 8000de8:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8000dec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000df0:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8000df4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8000df8:	fa93 f3a3 	rbit	r3, r3
 8000dfc:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8000e00:	4b9c      	ldr	r3, [pc, #624]	@ (8001074 <HAL_RCC_OscConfig+0x330>)
 8000e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e04:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000e08:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8000e0c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8000e10:	fa92 f2a2 	rbit	r2, r2
 8000e14:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8000e18:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8000e1c:	fab2 f282 	clz	r2, r2
 8000e20:	b2d2      	uxtb	r2, r2
 8000e22:	f042 0220 	orr.w	r2, r2, #32
 8000e26:	b2d2      	uxtb	r2, r2
 8000e28:	f002 021f 	and.w	r2, r2, #31
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	fa01 f202 	lsl.w	r2, r1, r2
 8000e32:	4013      	ands	r3, r2
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	f000 811f 	beq.w	8001078 <HAL_RCC_OscConfig+0x334>
 8000e3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000e3e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	f040 8116 	bne.w	8001078 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	f000 bfaf 	b.w	8001db0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000e56:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e62:	d106      	bne.n	8000e72 <HAL_RCC_OscConfig+0x12e>
 8000e64:	4b83      	ldr	r3, [pc, #524]	@ (8001074 <HAL_RCC_OscConfig+0x330>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a82      	ldr	r2, [pc, #520]	@ (8001074 <HAL_RCC_OscConfig+0x330>)
 8000e6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e6e:	6013      	str	r3, [r2, #0]
 8000e70:	e036      	b.n	8000ee0 <HAL_RCC_OscConfig+0x19c>
 8000e72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000e76:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d10c      	bne.n	8000e9c <HAL_RCC_OscConfig+0x158>
 8000e82:	4b7c      	ldr	r3, [pc, #496]	@ (8001074 <HAL_RCC_OscConfig+0x330>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a7b      	ldr	r2, [pc, #492]	@ (8001074 <HAL_RCC_OscConfig+0x330>)
 8000e88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e8c:	6013      	str	r3, [r2, #0]
 8000e8e:	4b79      	ldr	r3, [pc, #484]	@ (8001074 <HAL_RCC_OscConfig+0x330>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a78      	ldr	r2, [pc, #480]	@ (8001074 <HAL_RCC_OscConfig+0x330>)
 8000e94:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e98:	6013      	str	r3, [r2, #0]
 8000e9a:	e021      	b.n	8000ee0 <HAL_RCC_OscConfig+0x19c>
 8000e9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000ea0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000eac:	d10c      	bne.n	8000ec8 <HAL_RCC_OscConfig+0x184>
 8000eae:	4b71      	ldr	r3, [pc, #452]	@ (8001074 <HAL_RCC_OscConfig+0x330>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a70      	ldr	r2, [pc, #448]	@ (8001074 <HAL_RCC_OscConfig+0x330>)
 8000eb4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000eb8:	6013      	str	r3, [r2, #0]
 8000eba:	4b6e      	ldr	r3, [pc, #440]	@ (8001074 <HAL_RCC_OscConfig+0x330>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a6d      	ldr	r2, [pc, #436]	@ (8001074 <HAL_RCC_OscConfig+0x330>)
 8000ec0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ec4:	6013      	str	r3, [r2, #0]
 8000ec6:	e00b      	b.n	8000ee0 <HAL_RCC_OscConfig+0x19c>
 8000ec8:	4b6a      	ldr	r3, [pc, #424]	@ (8001074 <HAL_RCC_OscConfig+0x330>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a69      	ldr	r2, [pc, #420]	@ (8001074 <HAL_RCC_OscConfig+0x330>)
 8000ece:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000ed2:	6013      	str	r3, [r2, #0]
 8000ed4:	4b67      	ldr	r3, [pc, #412]	@ (8001074 <HAL_RCC_OscConfig+0x330>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a66      	ldr	r2, [pc, #408]	@ (8001074 <HAL_RCC_OscConfig+0x330>)
 8000eda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ede:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000ee0:	4b64      	ldr	r3, [pc, #400]	@ (8001074 <HAL_RCC_OscConfig+0x330>)
 8000ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ee4:	f023 020f 	bic.w	r2, r3, #15
 8000ee8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000eec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	689b      	ldr	r3, [r3, #8]
 8000ef4:	495f      	ldr	r1, [pc, #380]	@ (8001074 <HAL_RCC_OscConfig+0x330>)
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000efa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000efe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d059      	beq.n	8000fbe <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f0a:	f7ff fc89 	bl	8000820 <HAL_GetTick>
 8000f0e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f12:	e00a      	b.n	8000f2a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f14:	f7ff fc84 	bl	8000820 <HAL_GetTick>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8000f1e:	1ad3      	subs	r3, r2, r3
 8000f20:	2b64      	cmp	r3, #100	@ 0x64
 8000f22:	d902      	bls.n	8000f2a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000f24:	2303      	movs	r3, #3
 8000f26:	f000 bf43 	b.w	8001db0 <HAL_RCC_OscConfig+0x106c>
 8000f2a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f2e:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f32:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8000f36:	fa93 f3a3 	rbit	r3, r3
 8000f3a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8000f3e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f42:	fab3 f383 	clz	r3, r3
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	095b      	lsrs	r3, r3, #5
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	f043 0301 	orr.w	r3, r3, #1
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d102      	bne.n	8000f5c <HAL_RCC_OscConfig+0x218>
 8000f56:	4b47      	ldr	r3, [pc, #284]	@ (8001074 <HAL_RCC_OscConfig+0x330>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	e015      	b.n	8000f88 <HAL_RCC_OscConfig+0x244>
 8000f5c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f60:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f64:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8000f68:	fa93 f3a3 	rbit	r3, r3
 8000f6c:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8000f70:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f74:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8000f78:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8000f7c:	fa93 f3a3 	rbit	r3, r3
 8000f80:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8000f84:	4b3b      	ldr	r3, [pc, #236]	@ (8001074 <HAL_RCC_OscConfig+0x330>)
 8000f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f88:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000f8c:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8000f90:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8000f94:	fa92 f2a2 	rbit	r2, r2
 8000f98:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8000f9c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8000fa0:	fab2 f282 	clz	r2, r2
 8000fa4:	b2d2      	uxtb	r2, r2
 8000fa6:	f042 0220 	orr.w	r2, r2, #32
 8000faa:	b2d2      	uxtb	r2, r2
 8000fac:	f002 021f 	and.w	r2, r2, #31
 8000fb0:	2101      	movs	r1, #1
 8000fb2:	fa01 f202 	lsl.w	r2, r1, r2
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d0ab      	beq.n	8000f14 <HAL_RCC_OscConfig+0x1d0>
 8000fbc:	e05d      	b.n	800107a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fbe:	f7ff fc2f 	bl	8000820 <HAL_GetTick>
 8000fc2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fc6:	e00a      	b.n	8000fde <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fc8:	f7ff fc2a 	bl	8000820 <HAL_GetTick>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8000fd2:	1ad3      	subs	r3, r2, r3
 8000fd4:	2b64      	cmp	r3, #100	@ 0x64
 8000fd6:	d902      	bls.n	8000fde <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8000fd8:	2303      	movs	r3, #3
 8000fda:	f000 bee9 	b.w	8001db0 <HAL_RCC_OscConfig+0x106c>
 8000fde:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000fe2:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fe6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8000fea:	fa93 f3a3 	rbit	r3, r3
 8000fee:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8000ff2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ff6:	fab3 f383 	clz	r3, r3
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	095b      	lsrs	r3, r3, #5
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	f043 0301 	orr.w	r3, r3, #1
 8001004:	b2db      	uxtb	r3, r3
 8001006:	2b01      	cmp	r3, #1
 8001008:	d102      	bne.n	8001010 <HAL_RCC_OscConfig+0x2cc>
 800100a:	4b1a      	ldr	r3, [pc, #104]	@ (8001074 <HAL_RCC_OscConfig+0x330>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	e015      	b.n	800103c <HAL_RCC_OscConfig+0x2f8>
 8001010:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001014:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001018:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 800101c:	fa93 f3a3 	rbit	r3, r3
 8001020:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001024:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001028:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800102c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001030:	fa93 f3a3 	rbit	r3, r3
 8001034:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001038:	4b0e      	ldr	r3, [pc, #56]	@ (8001074 <HAL_RCC_OscConfig+0x330>)
 800103a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800103c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001040:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001044:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001048:	fa92 f2a2 	rbit	r2, r2
 800104c:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001050:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001054:	fab2 f282 	clz	r2, r2
 8001058:	b2d2      	uxtb	r2, r2
 800105a:	f042 0220 	orr.w	r2, r2, #32
 800105e:	b2d2      	uxtb	r2, r2
 8001060:	f002 021f 	and.w	r2, r2, #31
 8001064:	2101      	movs	r1, #1
 8001066:	fa01 f202 	lsl.w	r2, r1, r2
 800106a:	4013      	ands	r3, r2
 800106c:	2b00      	cmp	r3, #0
 800106e:	d1ab      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x284>
 8001070:	e003      	b.n	800107a <HAL_RCC_OscConfig+0x336>
 8001072:	bf00      	nop
 8001074:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001078:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800107a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800107e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f003 0302 	and.w	r3, r3, #2
 800108a:	2b00      	cmp	r3, #0
 800108c:	f000 817d 	beq.w	800138a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001090:	4ba6      	ldr	r3, [pc, #664]	@ (800132c <HAL_RCC_OscConfig+0x5e8>)
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f003 030c 	and.w	r3, r3, #12
 8001098:	2b00      	cmp	r3, #0
 800109a:	d00b      	beq.n	80010b4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800109c:	4ba3      	ldr	r3, [pc, #652]	@ (800132c <HAL_RCC_OscConfig+0x5e8>)
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f003 030c 	and.w	r3, r3, #12
 80010a4:	2b08      	cmp	r3, #8
 80010a6:	d172      	bne.n	800118e <HAL_RCC_OscConfig+0x44a>
 80010a8:	4ba0      	ldr	r3, [pc, #640]	@ (800132c <HAL_RCC_OscConfig+0x5e8>)
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d16c      	bne.n	800118e <HAL_RCC_OscConfig+0x44a>
 80010b4:	2302      	movs	r3, #2
 80010b6:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ba:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80010be:	fa93 f3a3 	rbit	r3, r3
 80010c2:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 80010c6:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010ca:	fab3 f383 	clz	r3, r3
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	095b      	lsrs	r3, r3, #5
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	f043 0301 	orr.w	r3, r3, #1
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d102      	bne.n	80010e4 <HAL_RCC_OscConfig+0x3a0>
 80010de:	4b93      	ldr	r3, [pc, #588]	@ (800132c <HAL_RCC_OscConfig+0x5e8>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	e013      	b.n	800110c <HAL_RCC_OscConfig+0x3c8>
 80010e4:	2302      	movs	r3, #2
 80010e6:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ea:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80010ee:	fa93 f3a3 	rbit	r3, r3
 80010f2:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80010f6:	2302      	movs	r3, #2
 80010f8:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80010fc:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001100:	fa93 f3a3 	rbit	r3, r3
 8001104:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001108:	4b88      	ldr	r3, [pc, #544]	@ (800132c <HAL_RCC_OscConfig+0x5e8>)
 800110a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800110c:	2202      	movs	r2, #2
 800110e:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001112:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001116:	fa92 f2a2 	rbit	r2, r2
 800111a:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 800111e:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001122:	fab2 f282 	clz	r2, r2
 8001126:	b2d2      	uxtb	r2, r2
 8001128:	f042 0220 	orr.w	r2, r2, #32
 800112c:	b2d2      	uxtb	r2, r2
 800112e:	f002 021f 	and.w	r2, r2, #31
 8001132:	2101      	movs	r1, #1
 8001134:	fa01 f202 	lsl.w	r2, r1, r2
 8001138:	4013      	ands	r3, r2
 800113a:	2b00      	cmp	r3, #0
 800113c:	d00a      	beq.n	8001154 <HAL_RCC_OscConfig+0x410>
 800113e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001142:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	691b      	ldr	r3, [r3, #16]
 800114a:	2b01      	cmp	r3, #1
 800114c:	d002      	beq.n	8001154 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	f000 be2e 	b.w	8001db0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001154:	4b75      	ldr	r3, [pc, #468]	@ (800132c <HAL_RCC_OscConfig+0x5e8>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800115c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001160:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	695b      	ldr	r3, [r3, #20]
 8001168:	21f8      	movs	r1, #248	@ 0xf8
 800116a:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800116e:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001172:	fa91 f1a1 	rbit	r1, r1
 8001176:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 800117a:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 800117e:	fab1 f181 	clz	r1, r1
 8001182:	b2c9      	uxtb	r1, r1
 8001184:	408b      	lsls	r3, r1
 8001186:	4969      	ldr	r1, [pc, #420]	@ (800132c <HAL_RCC_OscConfig+0x5e8>)
 8001188:	4313      	orrs	r3, r2
 800118a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800118c:	e0fd      	b.n	800138a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800118e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001192:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	691b      	ldr	r3, [r3, #16]
 800119a:	2b00      	cmp	r3, #0
 800119c:	f000 8088 	beq.w	80012b0 <HAL_RCC_OscConfig+0x56c>
 80011a0:	2301      	movs	r3, #1
 80011a2:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011a6:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80011aa:	fa93 f3a3 	rbit	r3, r3
 80011ae:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 80011b2:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011b6:	fab3 f383 	clz	r3, r3
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80011c0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	461a      	mov	r2, r3
 80011c8:	2301      	movs	r3, #1
 80011ca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011cc:	f7ff fb28 	bl	8000820 <HAL_GetTick>
 80011d0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011d4:	e00a      	b.n	80011ec <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011d6:	f7ff fb23 	bl	8000820 <HAL_GetTick>
 80011da:	4602      	mov	r2, r0
 80011dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	d902      	bls.n	80011ec <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80011e6:	2303      	movs	r3, #3
 80011e8:	f000 bde2 	b.w	8001db0 <HAL_RCC_OscConfig+0x106c>
 80011ec:	2302      	movs	r3, #2
 80011ee:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011f2:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80011f6:	fa93 f3a3 	rbit	r3, r3
 80011fa:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80011fe:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001202:	fab3 f383 	clz	r3, r3
 8001206:	b2db      	uxtb	r3, r3
 8001208:	095b      	lsrs	r3, r3, #5
 800120a:	b2db      	uxtb	r3, r3
 800120c:	f043 0301 	orr.w	r3, r3, #1
 8001210:	b2db      	uxtb	r3, r3
 8001212:	2b01      	cmp	r3, #1
 8001214:	d102      	bne.n	800121c <HAL_RCC_OscConfig+0x4d8>
 8001216:	4b45      	ldr	r3, [pc, #276]	@ (800132c <HAL_RCC_OscConfig+0x5e8>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	e013      	b.n	8001244 <HAL_RCC_OscConfig+0x500>
 800121c:	2302      	movs	r3, #2
 800121e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001222:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001226:	fa93 f3a3 	rbit	r3, r3
 800122a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800122e:	2302      	movs	r3, #2
 8001230:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001234:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001238:	fa93 f3a3 	rbit	r3, r3
 800123c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001240:	4b3a      	ldr	r3, [pc, #232]	@ (800132c <HAL_RCC_OscConfig+0x5e8>)
 8001242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001244:	2202      	movs	r2, #2
 8001246:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 800124a:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800124e:	fa92 f2a2 	rbit	r2, r2
 8001252:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8001256:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800125a:	fab2 f282 	clz	r2, r2
 800125e:	b2d2      	uxtb	r2, r2
 8001260:	f042 0220 	orr.w	r2, r2, #32
 8001264:	b2d2      	uxtb	r2, r2
 8001266:	f002 021f 	and.w	r2, r2, #31
 800126a:	2101      	movs	r1, #1
 800126c:	fa01 f202 	lsl.w	r2, r1, r2
 8001270:	4013      	ands	r3, r2
 8001272:	2b00      	cmp	r3, #0
 8001274:	d0af      	beq.n	80011d6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001276:	4b2d      	ldr	r3, [pc, #180]	@ (800132c <HAL_RCC_OscConfig+0x5e8>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800127e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001282:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	695b      	ldr	r3, [r3, #20]
 800128a:	21f8      	movs	r1, #248	@ 0xf8
 800128c:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001290:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001294:	fa91 f1a1 	rbit	r1, r1
 8001298:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 800129c:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80012a0:	fab1 f181 	clz	r1, r1
 80012a4:	b2c9      	uxtb	r1, r1
 80012a6:	408b      	lsls	r3, r1
 80012a8:	4920      	ldr	r1, [pc, #128]	@ (800132c <HAL_RCC_OscConfig+0x5e8>)
 80012aa:	4313      	orrs	r3, r2
 80012ac:	600b      	str	r3, [r1, #0]
 80012ae:	e06c      	b.n	800138a <HAL_RCC_OscConfig+0x646>
 80012b0:	2301      	movs	r3, #1
 80012b2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012b6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80012ba:	fa93 f3a3 	rbit	r3, r3
 80012be:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 80012c2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012c6:	fab3 f383 	clz	r3, r3
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80012d0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	461a      	mov	r2, r3
 80012d8:	2300      	movs	r3, #0
 80012da:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012dc:	f7ff faa0 	bl	8000820 <HAL_GetTick>
 80012e0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012e4:	e00a      	b.n	80012fc <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012e6:	f7ff fa9b 	bl	8000820 <HAL_GetTick>
 80012ea:	4602      	mov	r2, r0
 80012ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d902      	bls.n	80012fc <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80012f6:	2303      	movs	r3, #3
 80012f8:	f000 bd5a 	b.w	8001db0 <HAL_RCC_OscConfig+0x106c>
 80012fc:	2302      	movs	r3, #2
 80012fe:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001302:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001306:	fa93 f3a3 	rbit	r3, r3
 800130a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 800130e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001312:	fab3 f383 	clz	r3, r3
 8001316:	b2db      	uxtb	r3, r3
 8001318:	095b      	lsrs	r3, r3, #5
 800131a:	b2db      	uxtb	r3, r3
 800131c:	f043 0301 	orr.w	r3, r3, #1
 8001320:	b2db      	uxtb	r3, r3
 8001322:	2b01      	cmp	r3, #1
 8001324:	d104      	bne.n	8001330 <HAL_RCC_OscConfig+0x5ec>
 8001326:	4b01      	ldr	r3, [pc, #4]	@ (800132c <HAL_RCC_OscConfig+0x5e8>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	e015      	b.n	8001358 <HAL_RCC_OscConfig+0x614>
 800132c:	40021000 	.word	0x40021000
 8001330:	2302      	movs	r3, #2
 8001332:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001336:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800133a:	fa93 f3a3 	rbit	r3, r3
 800133e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001342:	2302      	movs	r3, #2
 8001344:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001348:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800134c:	fa93 f3a3 	rbit	r3, r3
 8001350:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001354:	4bc8      	ldr	r3, [pc, #800]	@ (8001678 <HAL_RCC_OscConfig+0x934>)
 8001356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001358:	2202      	movs	r2, #2
 800135a:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 800135e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001362:	fa92 f2a2 	rbit	r2, r2
 8001366:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 800136a:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800136e:	fab2 f282 	clz	r2, r2
 8001372:	b2d2      	uxtb	r2, r2
 8001374:	f042 0220 	orr.w	r2, r2, #32
 8001378:	b2d2      	uxtb	r2, r2
 800137a:	f002 021f 	and.w	r2, r2, #31
 800137e:	2101      	movs	r1, #1
 8001380:	fa01 f202 	lsl.w	r2, r1, r2
 8001384:	4013      	ands	r3, r2
 8001386:	2b00      	cmp	r3, #0
 8001388:	d1ad      	bne.n	80012e6 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800138a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800138e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 0308 	and.w	r3, r3, #8
 800139a:	2b00      	cmp	r3, #0
 800139c:	f000 8110 	beq.w	80015c0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013a4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d079      	beq.n	80014a4 <HAL_RCC_OscConfig+0x760>
 80013b0:	2301      	movs	r3, #1
 80013b2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013b6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80013ba:	fa93 f3a3 	rbit	r3, r3
 80013be:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 80013c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013c6:	fab3 f383 	clz	r3, r3
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	461a      	mov	r2, r3
 80013ce:	4bab      	ldr	r3, [pc, #684]	@ (800167c <HAL_RCC_OscConfig+0x938>)
 80013d0:	4413      	add	r3, r2
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	461a      	mov	r2, r3
 80013d6:	2301      	movs	r3, #1
 80013d8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013da:	f7ff fa21 	bl	8000820 <HAL_GetTick>
 80013de:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013e2:	e00a      	b.n	80013fa <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013e4:	f7ff fa1c 	bl	8000820 <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d902      	bls.n	80013fa <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80013f4:	2303      	movs	r3, #3
 80013f6:	f000 bcdb 	b.w	8001db0 <HAL_RCC_OscConfig+0x106c>
 80013fa:	2302      	movs	r3, #2
 80013fc:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001400:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001404:	fa93 f3a3 	rbit	r3, r3
 8001408:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800140c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001410:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001414:	2202      	movs	r2, #2
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800141c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	fa93 f2a3 	rbit	r2, r3
 8001426:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800142a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001434:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001438:	2202      	movs	r2, #2
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001440:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	fa93 f2a3 	rbit	r2, r3
 800144a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800144e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001452:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001454:	4b88      	ldr	r3, [pc, #544]	@ (8001678 <HAL_RCC_OscConfig+0x934>)
 8001456:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001458:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800145c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001460:	2102      	movs	r1, #2
 8001462:	6019      	str	r1, [r3, #0]
 8001464:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001468:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	fa93 f1a3 	rbit	r1, r3
 8001472:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001476:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800147a:	6019      	str	r1, [r3, #0]
  return result;
 800147c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001480:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	fab3 f383 	clz	r3, r3
 800148a:	b2db      	uxtb	r3, r3
 800148c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001490:	b2db      	uxtb	r3, r3
 8001492:	f003 031f 	and.w	r3, r3, #31
 8001496:	2101      	movs	r1, #1
 8001498:	fa01 f303 	lsl.w	r3, r1, r3
 800149c:	4013      	ands	r3, r2
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d0a0      	beq.n	80013e4 <HAL_RCC_OscConfig+0x6a0>
 80014a2:	e08d      	b.n	80015c0 <HAL_RCC_OscConfig+0x87c>
 80014a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014a8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80014ac:	2201      	movs	r2, #1
 80014ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014b4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	fa93 f2a3 	rbit	r2, r3
 80014be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014c2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80014c6:	601a      	str	r2, [r3, #0]
  return result;
 80014c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014cc:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80014d0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014d2:	fab3 f383 	clz	r3, r3
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	461a      	mov	r2, r3
 80014da:	4b68      	ldr	r3, [pc, #416]	@ (800167c <HAL_RCC_OscConfig+0x938>)
 80014dc:	4413      	add	r3, r2
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	461a      	mov	r2, r3
 80014e2:	2300      	movs	r3, #0
 80014e4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014e6:	f7ff f99b 	bl	8000820 <HAL_GetTick>
 80014ea:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014ee:	e00a      	b.n	8001506 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014f0:	f7ff f996 	bl	8000820 <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d902      	bls.n	8001506 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001500:	2303      	movs	r3, #3
 8001502:	f000 bc55 	b.w	8001db0 <HAL_RCC_OscConfig+0x106c>
 8001506:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800150a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800150e:	2202      	movs	r2, #2
 8001510:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001512:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001516:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	fa93 f2a3 	rbit	r2, r3
 8001520:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001524:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800152e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001532:	2202      	movs	r2, #2
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800153a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	fa93 f2a3 	rbit	r2, r3
 8001544:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001548:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001552:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001556:	2202      	movs	r2, #2
 8001558:	601a      	str	r2, [r3, #0]
 800155a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800155e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	fa93 f2a3 	rbit	r2, r3
 8001568:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800156c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001570:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001572:	4b41      	ldr	r3, [pc, #260]	@ (8001678 <HAL_RCC_OscConfig+0x934>)
 8001574:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001576:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800157a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800157e:	2102      	movs	r1, #2
 8001580:	6019      	str	r1, [r3, #0]
 8001582:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001586:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	fa93 f1a3 	rbit	r1, r3
 8001590:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001594:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001598:	6019      	str	r1, [r3, #0]
  return result;
 800159a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800159e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	fab3 f383 	clz	r3, r3
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	f003 031f 	and.w	r3, r3, #31
 80015b4:	2101      	movs	r1, #1
 80015b6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ba:	4013      	ands	r3, r2
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d197      	bne.n	80014f0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015c4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0304 	and.w	r3, r3, #4
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	f000 81a1 	beq.w	8001918 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015d6:	2300      	movs	r3, #0
 80015d8:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015dc:	4b26      	ldr	r3, [pc, #152]	@ (8001678 <HAL_RCC_OscConfig+0x934>)
 80015de:	69db      	ldr	r3, [r3, #28]
 80015e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d116      	bne.n	8001616 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015e8:	4b23      	ldr	r3, [pc, #140]	@ (8001678 <HAL_RCC_OscConfig+0x934>)
 80015ea:	69db      	ldr	r3, [r3, #28]
 80015ec:	4a22      	ldr	r2, [pc, #136]	@ (8001678 <HAL_RCC_OscConfig+0x934>)
 80015ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015f2:	61d3      	str	r3, [r2, #28]
 80015f4:	4b20      	ldr	r3, [pc, #128]	@ (8001678 <HAL_RCC_OscConfig+0x934>)
 80015f6:	69db      	ldr	r3, [r3, #28]
 80015f8:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80015fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001600:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800160a:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800160e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001610:	2301      	movs	r3, #1
 8001612:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001616:	4b1a      	ldr	r3, [pc, #104]	@ (8001680 <HAL_RCC_OscConfig+0x93c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800161e:	2b00      	cmp	r3, #0
 8001620:	d11a      	bne.n	8001658 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001622:	4b17      	ldr	r3, [pc, #92]	@ (8001680 <HAL_RCC_OscConfig+0x93c>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a16      	ldr	r2, [pc, #88]	@ (8001680 <HAL_RCC_OscConfig+0x93c>)
 8001628:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800162c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800162e:	f7ff f8f7 	bl	8000820 <HAL_GetTick>
 8001632:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001636:	e009      	b.n	800164c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001638:	f7ff f8f2 	bl	8000820 <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	2b64      	cmp	r3, #100	@ 0x64
 8001646:	d901      	bls.n	800164c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001648:	2303      	movs	r3, #3
 800164a:	e3b1      	b.n	8001db0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800164c:	4b0c      	ldr	r3, [pc, #48]	@ (8001680 <HAL_RCC_OscConfig+0x93c>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001654:	2b00      	cmp	r3, #0
 8001656:	d0ef      	beq.n	8001638 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001658:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800165c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	2b01      	cmp	r3, #1
 8001666:	d10d      	bne.n	8001684 <HAL_RCC_OscConfig+0x940>
 8001668:	4b03      	ldr	r3, [pc, #12]	@ (8001678 <HAL_RCC_OscConfig+0x934>)
 800166a:	6a1b      	ldr	r3, [r3, #32]
 800166c:	4a02      	ldr	r2, [pc, #8]	@ (8001678 <HAL_RCC_OscConfig+0x934>)
 800166e:	f043 0301 	orr.w	r3, r3, #1
 8001672:	6213      	str	r3, [r2, #32]
 8001674:	e03c      	b.n	80016f0 <HAL_RCC_OscConfig+0x9ac>
 8001676:	bf00      	nop
 8001678:	40021000 	.word	0x40021000
 800167c:	10908120 	.word	0x10908120
 8001680:	40007000 	.word	0x40007000
 8001684:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001688:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d10c      	bne.n	80016ae <HAL_RCC_OscConfig+0x96a>
 8001694:	4bc1      	ldr	r3, [pc, #772]	@ (800199c <HAL_RCC_OscConfig+0xc58>)
 8001696:	6a1b      	ldr	r3, [r3, #32]
 8001698:	4ac0      	ldr	r2, [pc, #768]	@ (800199c <HAL_RCC_OscConfig+0xc58>)
 800169a:	f023 0301 	bic.w	r3, r3, #1
 800169e:	6213      	str	r3, [r2, #32]
 80016a0:	4bbe      	ldr	r3, [pc, #760]	@ (800199c <HAL_RCC_OscConfig+0xc58>)
 80016a2:	6a1b      	ldr	r3, [r3, #32]
 80016a4:	4abd      	ldr	r2, [pc, #756]	@ (800199c <HAL_RCC_OscConfig+0xc58>)
 80016a6:	f023 0304 	bic.w	r3, r3, #4
 80016aa:	6213      	str	r3, [r2, #32]
 80016ac:	e020      	b.n	80016f0 <HAL_RCC_OscConfig+0x9ac>
 80016ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016b2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	68db      	ldr	r3, [r3, #12]
 80016ba:	2b05      	cmp	r3, #5
 80016bc:	d10c      	bne.n	80016d8 <HAL_RCC_OscConfig+0x994>
 80016be:	4bb7      	ldr	r3, [pc, #732]	@ (800199c <HAL_RCC_OscConfig+0xc58>)
 80016c0:	6a1b      	ldr	r3, [r3, #32]
 80016c2:	4ab6      	ldr	r2, [pc, #728]	@ (800199c <HAL_RCC_OscConfig+0xc58>)
 80016c4:	f043 0304 	orr.w	r3, r3, #4
 80016c8:	6213      	str	r3, [r2, #32]
 80016ca:	4bb4      	ldr	r3, [pc, #720]	@ (800199c <HAL_RCC_OscConfig+0xc58>)
 80016cc:	6a1b      	ldr	r3, [r3, #32]
 80016ce:	4ab3      	ldr	r2, [pc, #716]	@ (800199c <HAL_RCC_OscConfig+0xc58>)
 80016d0:	f043 0301 	orr.w	r3, r3, #1
 80016d4:	6213      	str	r3, [r2, #32]
 80016d6:	e00b      	b.n	80016f0 <HAL_RCC_OscConfig+0x9ac>
 80016d8:	4bb0      	ldr	r3, [pc, #704]	@ (800199c <HAL_RCC_OscConfig+0xc58>)
 80016da:	6a1b      	ldr	r3, [r3, #32]
 80016dc:	4aaf      	ldr	r2, [pc, #700]	@ (800199c <HAL_RCC_OscConfig+0xc58>)
 80016de:	f023 0301 	bic.w	r3, r3, #1
 80016e2:	6213      	str	r3, [r2, #32]
 80016e4:	4bad      	ldr	r3, [pc, #692]	@ (800199c <HAL_RCC_OscConfig+0xc58>)
 80016e6:	6a1b      	ldr	r3, [r3, #32]
 80016e8:	4aac      	ldr	r2, [pc, #688]	@ (800199c <HAL_RCC_OscConfig+0xc58>)
 80016ea:	f023 0304 	bic.w	r3, r3, #4
 80016ee:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016f4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	f000 8081 	beq.w	8001804 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001702:	f7ff f88d 	bl	8000820 <HAL_GetTick>
 8001706:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800170a:	e00b      	b.n	8001724 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800170c:	f7ff f888 	bl	8000820 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	f241 3288 	movw	r2, #5000	@ 0x1388
 800171c:	4293      	cmp	r3, r2
 800171e:	d901      	bls.n	8001724 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001720:	2303      	movs	r3, #3
 8001722:	e345      	b.n	8001db0 <HAL_RCC_OscConfig+0x106c>
 8001724:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001728:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800172c:	2202      	movs	r2, #2
 800172e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001730:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001734:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	fa93 f2a3 	rbit	r2, r3
 800173e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001742:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800174c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001750:	2202      	movs	r2, #2
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001758:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	fa93 f2a3 	rbit	r2, r3
 8001762:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001766:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800176a:	601a      	str	r2, [r3, #0]
  return result;
 800176c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001770:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001774:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001776:	fab3 f383 	clz	r3, r3
 800177a:	b2db      	uxtb	r3, r3
 800177c:	095b      	lsrs	r3, r3, #5
 800177e:	b2db      	uxtb	r3, r3
 8001780:	f043 0302 	orr.w	r3, r3, #2
 8001784:	b2db      	uxtb	r3, r3
 8001786:	2b02      	cmp	r3, #2
 8001788:	d102      	bne.n	8001790 <HAL_RCC_OscConfig+0xa4c>
 800178a:	4b84      	ldr	r3, [pc, #528]	@ (800199c <HAL_RCC_OscConfig+0xc58>)
 800178c:	6a1b      	ldr	r3, [r3, #32]
 800178e:	e013      	b.n	80017b8 <HAL_RCC_OscConfig+0xa74>
 8001790:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001794:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001798:	2202      	movs	r2, #2
 800179a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800179c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017a0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	fa93 f2a3 	rbit	r2, r3
 80017aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017ae:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	4b79      	ldr	r3, [pc, #484]	@ (800199c <HAL_RCC_OscConfig+0xc58>)
 80017b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017b8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80017bc:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80017c0:	2102      	movs	r1, #2
 80017c2:	6011      	str	r1, [r2, #0]
 80017c4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80017c8:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80017cc:	6812      	ldr	r2, [r2, #0]
 80017ce:	fa92 f1a2 	rbit	r1, r2
 80017d2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80017d6:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80017da:	6011      	str	r1, [r2, #0]
  return result;
 80017dc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80017e0:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80017e4:	6812      	ldr	r2, [r2, #0]
 80017e6:	fab2 f282 	clz	r2, r2
 80017ea:	b2d2      	uxtb	r2, r2
 80017ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80017f0:	b2d2      	uxtb	r2, r2
 80017f2:	f002 021f 	and.w	r2, r2, #31
 80017f6:	2101      	movs	r1, #1
 80017f8:	fa01 f202 	lsl.w	r2, r1, r2
 80017fc:	4013      	ands	r3, r2
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d084      	beq.n	800170c <HAL_RCC_OscConfig+0x9c8>
 8001802:	e07f      	b.n	8001904 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001804:	f7ff f80c 	bl	8000820 <HAL_GetTick>
 8001808:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800180c:	e00b      	b.n	8001826 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800180e:	f7ff f807 	bl	8000820 <HAL_GetTick>
 8001812:	4602      	mov	r2, r0
 8001814:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800181e:	4293      	cmp	r3, r2
 8001820:	d901      	bls.n	8001826 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e2c4      	b.n	8001db0 <HAL_RCC_OscConfig+0x106c>
 8001826:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800182a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800182e:	2202      	movs	r2, #2
 8001830:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001832:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001836:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	fa93 f2a3 	rbit	r2, r3
 8001840:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001844:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800184e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001852:	2202      	movs	r2, #2
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800185a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	fa93 f2a3 	rbit	r2, r3
 8001864:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001868:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800186c:	601a      	str	r2, [r3, #0]
  return result;
 800186e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001872:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001876:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001878:	fab3 f383 	clz	r3, r3
 800187c:	b2db      	uxtb	r3, r3
 800187e:	095b      	lsrs	r3, r3, #5
 8001880:	b2db      	uxtb	r3, r3
 8001882:	f043 0302 	orr.w	r3, r3, #2
 8001886:	b2db      	uxtb	r3, r3
 8001888:	2b02      	cmp	r3, #2
 800188a:	d102      	bne.n	8001892 <HAL_RCC_OscConfig+0xb4e>
 800188c:	4b43      	ldr	r3, [pc, #268]	@ (800199c <HAL_RCC_OscConfig+0xc58>)
 800188e:	6a1b      	ldr	r3, [r3, #32]
 8001890:	e013      	b.n	80018ba <HAL_RCC_OscConfig+0xb76>
 8001892:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001896:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800189a:	2202      	movs	r2, #2
 800189c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800189e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018a2:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	fa93 f2a3 	rbit	r2, r3
 80018ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018b0:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80018b4:	601a      	str	r2, [r3, #0]
 80018b6:	4b39      	ldr	r3, [pc, #228]	@ (800199c <HAL_RCC_OscConfig+0xc58>)
 80018b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ba:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80018be:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80018c2:	2102      	movs	r1, #2
 80018c4:	6011      	str	r1, [r2, #0]
 80018c6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80018ca:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80018ce:	6812      	ldr	r2, [r2, #0]
 80018d0:	fa92 f1a2 	rbit	r1, r2
 80018d4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80018d8:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80018dc:	6011      	str	r1, [r2, #0]
  return result;
 80018de:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80018e2:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80018e6:	6812      	ldr	r2, [r2, #0]
 80018e8:	fab2 f282 	clz	r2, r2
 80018ec:	b2d2      	uxtb	r2, r2
 80018ee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80018f2:	b2d2      	uxtb	r2, r2
 80018f4:	f002 021f 	and.w	r2, r2, #31
 80018f8:	2101      	movs	r1, #1
 80018fa:	fa01 f202 	lsl.w	r2, r1, r2
 80018fe:	4013      	ands	r3, r2
 8001900:	2b00      	cmp	r3, #0
 8001902:	d184      	bne.n	800180e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001904:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8001908:	2b01      	cmp	r3, #1
 800190a:	d105      	bne.n	8001918 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800190c:	4b23      	ldr	r3, [pc, #140]	@ (800199c <HAL_RCC_OscConfig+0xc58>)
 800190e:	69db      	ldr	r3, [r3, #28]
 8001910:	4a22      	ldr	r2, [pc, #136]	@ (800199c <HAL_RCC_OscConfig+0xc58>)
 8001912:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001916:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001918:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800191c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	69db      	ldr	r3, [r3, #28]
 8001924:	2b00      	cmp	r3, #0
 8001926:	f000 8242 	beq.w	8001dae <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800192a:	4b1c      	ldr	r3, [pc, #112]	@ (800199c <HAL_RCC_OscConfig+0xc58>)
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f003 030c 	and.w	r3, r3, #12
 8001932:	2b08      	cmp	r3, #8
 8001934:	f000 8213 	beq.w	8001d5e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001938:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800193c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	69db      	ldr	r3, [r3, #28]
 8001944:	2b02      	cmp	r3, #2
 8001946:	f040 8162 	bne.w	8001c0e <HAL_RCC_OscConfig+0xeca>
 800194a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800194e:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001952:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001956:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001958:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800195c:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	fa93 f2a3 	rbit	r2, r3
 8001966:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800196a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800196e:	601a      	str	r2, [r3, #0]
  return result;
 8001970:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001974:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001978:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800197a:	fab3 f383 	clz	r3, r3
 800197e:	b2db      	uxtb	r3, r3
 8001980:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001984:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	461a      	mov	r2, r3
 800198c:	2300      	movs	r3, #0
 800198e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001990:	f7fe ff46 	bl	8000820 <HAL_GetTick>
 8001994:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001998:	e00c      	b.n	80019b4 <HAL_RCC_OscConfig+0xc70>
 800199a:	bf00      	nop
 800199c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019a0:	f7fe ff3e 	bl	8000820 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d901      	bls.n	80019b4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	e1fd      	b.n	8001db0 <HAL_RCC_OscConfig+0x106c>
 80019b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019b8:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80019bc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80019c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019c6:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	fa93 f2a3 	rbit	r2, r3
 80019d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019d4:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80019d8:	601a      	str	r2, [r3, #0]
  return result;
 80019da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019de:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80019e2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019e4:	fab3 f383 	clz	r3, r3
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	095b      	lsrs	r3, r3, #5
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	f043 0301 	orr.w	r3, r3, #1
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d102      	bne.n	80019fe <HAL_RCC_OscConfig+0xcba>
 80019f8:	4bb0      	ldr	r3, [pc, #704]	@ (8001cbc <HAL_RCC_OscConfig+0xf78>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	e027      	b.n	8001a4e <HAL_RCC_OscConfig+0xd0a>
 80019fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a02:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001a06:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a10:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	fa93 f2a3 	rbit	r2, r3
 8001a1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a1e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a28:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001a2c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a36:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	fa93 f2a3 	rbit	r2, r3
 8001a40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a44:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001a48:	601a      	str	r2, [r3, #0]
 8001a4a:	4b9c      	ldr	r3, [pc, #624]	@ (8001cbc <HAL_RCC_OscConfig+0xf78>)
 8001a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a4e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001a52:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001a56:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001a5a:	6011      	str	r1, [r2, #0]
 8001a5c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001a60:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001a64:	6812      	ldr	r2, [r2, #0]
 8001a66:	fa92 f1a2 	rbit	r1, r2
 8001a6a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001a6e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001a72:	6011      	str	r1, [r2, #0]
  return result;
 8001a74:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001a78:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001a7c:	6812      	ldr	r2, [r2, #0]
 8001a7e:	fab2 f282 	clz	r2, r2
 8001a82:	b2d2      	uxtb	r2, r2
 8001a84:	f042 0220 	orr.w	r2, r2, #32
 8001a88:	b2d2      	uxtb	r2, r2
 8001a8a:	f002 021f 	and.w	r2, r2, #31
 8001a8e:	2101      	movs	r1, #1
 8001a90:	fa01 f202 	lsl.w	r2, r1, r2
 8001a94:	4013      	ands	r3, r2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d182      	bne.n	80019a0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a9a:	4b88      	ldr	r3, [pc, #544]	@ (8001cbc <HAL_RCC_OscConfig+0xf78>)
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001aa2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001aa6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001aae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ab2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	6a1b      	ldr	r3, [r3, #32]
 8001aba:	430b      	orrs	r3, r1
 8001abc:	497f      	ldr	r1, [pc, #508]	@ (8001cbc <HAL_RCC_OscConfig+0xf78>)
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	604b      	str	r3, [r1, #4]
 8001ac2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ac6:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001aca:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001ace:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ad4:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	fa93 f2a3 	rbit	r2, r3
 8001ade:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ae2:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001ae6:	601a      	str	r2, [r3, #0]
  return result;
 8001ae8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001aec:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001af0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001af2:	fab3 f383 	clz	r3, r3
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001afc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	461a      	mov	r2, r3
 8001b04:	2301      	movs	r3, #1
 8001b06:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b08:	f7fe fe8a 	bl	8000820 <HAL_GetTick>
 8001b0c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b10:	e009      	b.n	8001b26 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b12:	f7fe fe85 	bl	8000820 <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d901      	bls.n	8001b26 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e144      	b.n	8001db0 <HAL_RCC_OscConfig+0x106c>
 8001b26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b2a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001b2e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b38:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	fa93 f2a3 	rbit	r2, r3
 8001b42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b46:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001b4a:	601a      	str	r2, [r3, #0]
  return result;
 8001b4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b50:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001b54:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b56:	fab3 f383 	clz	r3, r3
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	095b      	lsrs	r3, r3, #5
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	f043 0301 	orr.w	r3, r3, #1
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d102      	bne.n	8001b70 <HAL_RCC_OscConfig+0xe2c>
 8001b6a:	4b54      	ldr	r3, [pc, #336]	@ (8001cbc <HAL_RCC_OscConfig+0xf78>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	e027      	b.n	8001bc0 <HAL_RCC_OscConfig+0xe7c>
 8001b70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b74:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001b78:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b82:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	fa93 f2a3 	rbit	r2, r3
 8001b8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b90:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001b94:	601a      	str	r2, [r3, #0]
 8001b96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b9a:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001b9e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ba8:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	fa93 f2a3 	rbit	r2, r3
 8001bb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bb6:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	4b3f      	ldr	r3, [pc, #252]	@ (8001cbc <HAL_RCC_OscConfig+0xf78>)
 8001bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bc0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001bc4:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001bc8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001bcc:	6011      	str	r1, [r2, #0]
 8001bce:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001bd2:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001bd6:	6812      	ldr	r2, [r2, #0]
 8001bd8:	fa92 f1a2 	rbit	r1, r2
 8001bdc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001be0:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001be4:	6011      	str	r1, [r2, #0]
  return result;
 8001be6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001bea:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001bee:	6812      	ldr	r2, [r2, #0]
 8001bf0:	fab2 f282 	clz	r2, r2
 8001bf4:	b2d2      	uxtb	r2, r2
 8001bf6:	f042 0220 	orr.w	r2, r2, #32
 8001bfa:	b2d2      	uxtb	r2, r2
 8001bfc:	f002 021f 	and.w	r2, r2, #31
 8001c00:	2101      	movs	r1, #1
 8001c02:	fa01 f202 	lsl.w	r2, r1, r2
 8001c06:	4013      	ands	r3, r2
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d082      	beq.n	8001b12 <HAL_RCC_OscConfig+0xdce>
 8001c0c:	e0cf      	b.n	8001dae <HAL_RCC_OscConfig+0x106a>
 8001c0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c12:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001c16:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001c1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c20:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	fa93 f2a3 	rbit	r2, r3
 8001c2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c2e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001c32:	601a      	str	r2, [r3, #0]
  return result;
 8001c34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c38:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001c3c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c3e:	fab3 f383 	clz	r3, r3
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001c48:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	461a      	mov	r2, r3
 8001c50:	2300      	movs	r3, #0
 8001c52:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c54:	f7fe fde4 	bl	8000820 <HAL_GetTick>
 8001c58:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c5c:	e009      	b.n	8001c72 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c5e:	f7fe fddf 	bl	8000820 <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e09e      	b.n	8001db0 <HAL_RCC_OscConfig+0x106c>
 8001c72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c76:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001c7a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c84:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	fa93 f2a3 	rbit	r2, r3
 8001c8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c92:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001c96:	601a      	str	r2, [r3, #0]
  return result;
 8001c98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c9c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001ca0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ca2:	fab3 f383 	clz	r3, r3
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	095b      	lsrs	r3, r3, #5
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	f043 0301 	orr.w	r3, r3, #1
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d104      	bne.n	8001cc0 <HAL_RCC_OscConfig+0xf7c>
 8001cb6:	4b01      	ldr	r3, [pc, #4]	@ (8001cbc <HAL_RCC_OscConfig+0xf78>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	e029      	b.n	8001d10 <HAL_RCC_OscConfig+0xfcc>
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cc4:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001cc8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ccc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cd2:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	fa93 f2a3 	rbit	r2, r3
 8001cdc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ce0:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001ce4:	601a      	str	r2, [r3, #0]
 8001ce6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cea:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001cee:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cf8:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	fa93 f2a3 	rbit	r2, r3
 8001d02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d06:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	4b2b      	ldr	r3, [pc, #172]	@ (8001dbc <HAL_RCC_OscConfig+0x1078>)
 8001d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d10:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001d14:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8001d18:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001d1c:	6011      	str	r1, [r2, #0]
 8001d1e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001d22:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8001d26:	6812      	ldr	r2, [r2, #0]
 8001d28:	fa92 f1a2 	rbit	r1, r2
 8001d2c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001d30:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001d34:	6011      	str	r1, [r2, #0]
  return result;
 8001d36:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001d3a:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001d3e:	6812      	ldr	r2, [r2, #0]
 8001d40:	fab2 f282 	clz	r2, r2
 8001d44:	b2d2      	uxtb	r2, r2
 8001d46:	f042 0220 	orr.w	r2, r2, #32
 8001d4a:	b2d2      	uxtb	r2, r2
 8001d4c:	f002 021f 	and.w	r2, r2, #31
 8001d50:	2101      	movs	r1, #1
 8001d52:	fa01 f202 	lsl.w	r2, r1, r2
 8001d56:	4013      	ands	r3, r2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d180      	bne.n	8001c5e <HAL_RCC_OscConfig+0xf1a>
 8001d5c:	e027      	b.n	8001dae <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d62:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	69db      	ldr	r3, [r3, #28]
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d101      	bne.n	8001d72 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e01e      	b.n	8001db0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d72:	4b12      	ldr	r3, [pc, #72]	@ (8001dbc <HAL_RCC_OscConfig+0x1078>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d7a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001d7e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001d82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d86:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	6a1b      	ldr	r3, [r3, #32]
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d10b      	bne.n	8001daa <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001d92:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001d96:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001d9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d9e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d001      	beq.n	8001dae <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e000      	b.n	8001db0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001dae:	2300      	movs	r3, #0
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	40021000 	.word	0x40021000

08001dc0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b09e      	sub	sp, #120	@ 0x78
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d101      	bne.n	8001dd8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e162      	b.n	800209e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001dd8:	4b90      	ldr	r3, [pc, #576]	@ (800201c <HAL_RCC_ClockConfig+0x25c>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0307 	and.w	r3, r3, #7
 8001de0:	683a      	ldr	r2, [r7, #0]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d910      	bls.n	8001e08 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001de6:	4b8d      	ldr	r3, [pc, #564]	@ (800201c <HAL_RCC_ClockConfig+0x25c>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f023 0207 	bic.w	r2, r3, #7
 8001dee:	498b      	ldr	r1, [pc, #556]	@ (800201c <HAL_RCC_ClockConfig+0x25c>)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001df6:	4b89      	ldr	r3, [pc, #548]	@ (800201c <HAL_RCC_ClockConfig+0x25c>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0307 	and.w	r3, r3, #7
 8001dfe:	683a      	ldr	r2, [r7, #0]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d001      	beq.n	8001e08 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e14a      	b.n	800209e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0302 	and.w	r3, r3, #2
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d008      	beq.n	8001e26 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e14:	4b82      	ldr	r3, [pc, #520]	@ (8002020 <HAL_RCC_ClockConfig+0x260>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	497f      	ldr	r1, [pc, #508]	@ (8002020 <HAL_RCC_ClockConfig+0x260>)
 8001e22:	4313      	orrs	r3, r2
 8001e24:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	f000 80dc 	beq.w	8001fec <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d13c      	bne.n	8001eb6 <HAL_RCC_ClockConfig+0xf6>
 8001e3c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e40:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e42:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001e44:	fa93 f3a3 	rbit	r3, r3
 8001e48:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001e4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e4c:	fab3 f383 	clz	r3, r3
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	095b      	lsrs	r3, r3, #5
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	f043 0301 	orr.w	r3, r3, #1
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d102      	bne.n	8001e66 <HAL_RCC_ClockConfig+0xa6>
 8001e60:	4b6f      	ldr	r3, [pc, #444]	@ (8002020 <HAL_RCC_ClockConfig+0x260>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	e00f      	b.n	8001e86 <HAL_RCC_ClockConfig+0xc6>
 8001e66:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e6a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e6c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001e6e:	fa93 f3a3 	rbit	r3, r3
 8001e72:	667b      	str	r3, [r7, #100]	@ 0x64
 8001e74:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e78:	663b      	str	r3, [r7, #96]	@ 0x60
 8001e7a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001e7c:	fa93 f3a3 	rbit	r3, r3
 8001e80:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001e82:	4b67      	ldr	r3, [pc, #412]	@ (8002020 <HAL_RCC_ClockConfig+0x260>)
 8001e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e86:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001e8a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001e8c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001e8e:	fa92 f2a2 	rbit	r2, r2
 8001e92:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8001e94:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001e96:	fab2 f282 	clz	r2, r2
 8001e9a:	b2d2      	uxtb	r2, r2
 8001e9c:	f042 0220 	orr.w	r2, r2, #32
 8001ea0:	b2d2      	uxtb	r2, r2
 8001ea2:	f002 021f 	and.w	r2, r2, #31
 8001ea6:	2101      	movs	r1, #1
 8001ea8:	fa01 f202 	lsl.w	r2, r1, r2
 8001eac:	4013      	ands	r3, r2
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d17b      	bne.n	8001faa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e0f3      	b.n	800209e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d13c      	bne.n	8001f38 <HAL_RCC_ClockConfig+0x178>
 8001ebe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ec2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001ec6:	fa93 f3a3 	rbit	r3, r3
 8001eca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001ecc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ece:	fab3 f383 	clz	r3, r3
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	095b      	lsrs	r3, r3, #5
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	f043 0301 	orr.w	r3, r3, #1
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d102      	bne.n	8001ee8 <HAL_RCC_ClockConfig+0x128>
 8001ee2:	4b4f      	ldr	r3, [pc, #316]	@ (8002020 <HAL_RCC_ClockConfig+0x260>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	e00f      	b.n	8001f08 <HAL_RCC_ClockConfig+0x148>
 8001ee8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001eec:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001ef0:	fa93 f3a3 	rbit	r3, r3
 8001ef4:	647b      	str	r3, [r7, #68]	@ 0x44
 8001ef6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001efa:	643b      	str	r3, [r7, #64]	@ 0x40
 8001efc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001efe:	fa93 f3a3 	rbit	r3, r3
 8001f02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f04:	4b46      	ldr	r3, [pc, #280]	@ (8002020 <HAL_RCC_ClockConfig+0x260>)
 8001f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f08:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f0c:	63ba      	str	r2, [r7, #56]	@ 0x38
 8001f0e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001f10:	fa92 f2a2 	rbit	r2, r2
 8001f14:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8001f16:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001f18:	fab2 f282 	clz	r2, r2
 8001f1c:	b2d2      	uxtb	r2, r2
 8001f1e:	f042 0220 	orr.w	r2, r2, #32
 8001f22:	b2d2      	uxtb	r2, r2
 8001f24:	f002 021f 	and.w	r2, r2, #31
 8001f28:	2101      	movs	r1, #1
 8001f2a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f2e:	4013      	ands	r3, r2
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d13a      	bne.n	8001faa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e0b2      	b.n	800209e <HAL_RCC_ClockConfig+0x2de>
 8001f38:	2302      	movs	r3, #2
 8001f3a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f3e:	fa93 f3a3 	rbit	r3, r3
 8001f42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8001f44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f46:	fab3 f383 	clz	r3, r3
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	095b      	lsrs	r3, r3, #5
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	f043 0301 	orr.w	r3, r3, #1
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d102      	bne.n	8001f60 <HAL_RCC_ClockConfig+0x1a0>
 8001f5a:	4b31      	ldr	r3, [pc, #196]	@ (8002020 <HAL_RCC_ClockConfig+0x260>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	e00d      	b.n	8001f7c <HAL_RCC_ClockConfig+0x1bc>
 8001f60:	2302      	movs	r3, #2
 8001f62:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f66:	fa93 f3a3 	rbit	r3, r3
 8001f6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	623b      	str	r3, [r7, #32]
 8001f70:	6a3b      	ldr	r3, [r7, #32]
 8001f72:	fa93 f3a3 	rbit	r3, r3
 8001f76:	61fb      	str	r3, [r7, #28]
 8001f78:	4b29      	ldr	r3, [pc, #164]	@ (8002020 <HAL_RCC_ClockConfig+0x260>)
 8001f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f7c:	2202      	movs	r2, #2
 8001f7e:	61ba      	str	r2, [r7, #24]
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	fa92 f2a2 	rbit	r2, r2
 8001f86:	617a      	str	r2, [r7, #20]
  return result;
 8001f88:	697a      	ldr	r2, [r7, #20]
 8001f8a:	fab2 f282 	clz	r2, r2
 8001f8e:	b2d2      	uxtb	r2, r2
 8001f90:	f042 0220 	orr.w	r2, r2, #32
 8001f94:	b2d2      	uxtb	r2, r2
 8001f96:	f002 021f 	and.w	r2, r2, #31
 8001f9a:	2101      	movs	r1, #1
 8001f9c:	fa01 f202 	lsl.w	r2, r1, r2
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d101      	bne.n	8001faa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e079      	b.n	800209e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001faa:	4b1d      	ldr	r3, [pc, #116]	@ (8002020 <HAL_RCC_ClockConfig+0x260>)
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f023 0203 	bic.w	r2, r3, #3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	491a      	ldr	r1, [pc, #104]	@ (8002020 <HAL_RCC_ClockConfig+0x260>)
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fbc:	f7fe fc30 	bl	8000820 <HAL_GetTick>
 8001fc0:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fc2:	e00a      	b.n	8001fda <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fc4:	f7fe fc2c 	bl	8000820 <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e061      	b.n	800209e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fda:	4b11      	ldr	r3, [pc, #68]	@ (8002020 <HAL_RCC_ClockConfig+0x260>)
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f003 020c 	and.w	r2, r3, #12
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d1eb      	bne.n	8001fc4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fec:	4b0b      	ldr	r3, [pc, #44]	@ (800201c <HAL_RCC_ClockConfig+0x25c>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0307 	and.w	r3, r3, #7
 8001ff4:	683a      	ldr	r2, [r7, #0]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d214      	bcs.n	8002024 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ffa:	4b08      	ldr	r3, [pc, #32]	@ (800201c <HAL_RCC_ClockConfig+0x25c>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f023 0207 	bic.w	r2, r3, #7
 8002002:	4906      	ldr	r1, [pc, #24]	@ (800201c <HAL_RCC_ClockConfig+0x25c>)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	4313      	orrs	r3, r2
 8002008:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800200a:	4b04      	ldr	r3, [pc, #16]	@ (800201c <HAL_RCC_ClockConfig+0x25c>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0307 	and.w	r3, r3, #7
 8002012:	683a      	ldr	r2, [r7, #0]
 8002014:	429a      	cmp	r2, r3
 8002016:	d005      	beq.n	8002024 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e040      	b.n	800209e <HAL_RCC_ClockConfig+0x2de>
 800201c:	40022000 	.word	0x40022000
 8002020:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0304 	and.w	r3, r3, #4
 800202c:	2b00      	cmp	r3, #0
 800202e:	d008      	beq.n	8002042 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002030:	4b1d      	ldr	r3, [pc, #116]	@ (80020a8 <HAL_RCC_ClockConfig+0x2e8>)
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	491a      	ldr	r1, [pc, #104]	@ (80020a8 <HAL_RCC_ClockConfig+0x2e8>)
 800203e:	4313      	orrs	r3, r2
 8002040:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0308 	and.w	r3, r3, #8
 800204a:	2b00      	cmp	r3, #0
 800204c:	d009      	beq.n	8002062 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800204e:	4b16      	ldr	r3, [pc, #88]	@ (80020a8 <HAL_RCC_ClockConfig+0x2e8>)
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	00db      	lsls	r3, r3, #3
 800205c:	4912      	ldr	r1, [pc, #72]	@ (80020a8 <HAL_RCC_ClockConfig+0x2e8>)
 800205e:	4313      	orrs	r3, r2
 8002060:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002062:	f000 f829 	bl	80020b8 <HAL_RCC_GetSysClockFreq>
 8002066:	4601      	mov	r1, r0
 8002068:	4b0f      	ldr	r3, [pc, #60]	@ (80020a8 <HAL_RCC_ClockConfig+0x2e8>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002070:	22f0      	movs	r2, #240	@ 0xf0
 8002072:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002074:	693a      	ldr	r2, [r7, #16]
 8002076:	fa92 f2a2 	rbit	r2, r2
 800207a:	60fa      	str	r2, [r7, #12]
  return result;
 800207c:	68fa      	ldr	r2, [r7, #12]
 800207e:	fab2 f282 	clz	r2, r2
 8002082:	b2d2      	uxtb	r2, r2
 8002084:	40d3      	lsrs	r3, r2
 8002086:	4a09      	ldr	r2, [pc, #36]	@ (80020ac <HAL_RCC_ClockConfig+0x2ec>)
 8002088:	5cd3      	ldrb	r3, [r2, r3]
 800208a:	fa21 f303 	lsr.w	r3, r1, r3
 800208e:	4a08      	ldr	r2, [pc, #32]	@ (80020b0 <HAL_RCC_ClockConfig+0x2f0>)
 8002090:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002092:	4b08      	ldr	r3, [pc, #32]	@ (80020b4 <HAL_RCC_ClockConfig+0x2f4>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4618      	mov	r0, r3
 8002098:	f7fe fa90 	bl	80005bc <HAL_InitTick>
  
  return HAL_OK;
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3778      	adds	r7, #120	@ 0x78
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	40021000 	.word	0x40021000
 80020ac:	08006620 	.word	0x08006620
 80020b0:	20000000 	.word	0x20000000
 80020b4:	20000004 	.word	0x20000004

080020b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b087      	sub	sp, #28
 80020bc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020be:	2300      	movs	r3, #0
 80020c0:	60fb      	str	r3, [r7, #12]
 80020c2:	2300      	movs	r3, #0
 80020c4:	60bb      	str	r3, [r7, #8]
 80020c6:	2300      	movs	r3, #0
 80020c8:	617b      	str	r3, [r7, #20]
 80020ca:	2300      	movs	r3, #0
 80020cc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80020ce:	2300      	movs	r3, #0
 80020d0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80020d2:	4b1e      	ldr	r3, [pc, #120]	@ (800214c <HAL_RCC_GetSysClockFreq+0x94>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f003 030c 	and.w	r3, r3, #12
 80020de:	2b04      	cmp	r3, #4
 80020e0:	d002      	beq.n	80020e8 <HAL_RCC_GetSysClockFreq+0x30>
 80020e2:	2b08      	cmp	r3, #8
 80020e4:	d003      	beq.n	80020ee <HAL_RCC_GetSysClockFreq+0x36>
 80020e6:	e026      	b.n	8002136 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020e8:	4b19      	ldr	r3, [pc, #100]	@ (8002150 <HAL_RCC_GetSysClockFreq+0x98>)
 80020ea:	613b      	str	r3, [r7, #16]
      break;
 80020ec:	e026      	b.n	800213c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	0c9b      	lsrs	r3, r3, #18
 80020f2:	f003 030f 	and.w	r3, r3, #15
 80020f6:	4a17      	ldr	r2, [pc, #92]	@ (8002154 <HAL_RCC_GetSysClockFreq+0x9c>)
 80020f8:	5cd3      	ldrb	r3, [r2, r3]
 80020fa:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80020fc:	4b13      	ldr	r3, [pc, #76]	@ (800214c <HAL_RCC_GetSysClockFreq+0x94>)
 80020fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002100:	f003 030f 	and.w	r3, r3, #15
 8002104:	4a14      	ldr	r2, [pc, #80]	@ (8002158 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002106:	5cd3      	ldrb	r3, [r2, r3]
 8002108:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d008      	beq.n	8002126 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002114:	4a0e      	ldr	r2, [pc, #56]	@ (8002150 <HAL_RCC_GetSysClockFreq+0x98>)
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	fbb2 f2f3 	udiv	r2, r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	fb02 f303 	mul.w	r3, r2, r3
 8002122:	617b      	str	r3, [r7, #20]
 8002124:	e004      	b.n	8002130 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a0c      	ldr	r2, [pc, #48]	@ (800215c <HAL_RCC_GetSysClockFreq+0xa4>)
 800212a:	fb02 f303 	mul.w	r3, r2, r3
 800212e:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	613b      	str	r3, [r7, #16]
      break;
 8002134:	e002      	b.n	800213c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002136:	4b06      	ldr	r3, [pc, #24]	@ (8002150 <HAL_RCC_GetSysClockFreq+0x98>)
 8002138:	613b      	str	r3, [r7, #16]
      break;
 800213a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800213c:	693b      	ldr	r3, [r7, #16]
}
 800213e:	4618      	mov	r0, r3
 8002140:	371c      	adds	r7, #28
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	40021000 	.word	0x40021000
 8002150:	007a1200 	.word	0x007a1200
 8002154:	08006638 	.word	0x08006638
 8002158:	08006648 	.word	0x08006648
 800215c:	003d0900 	.word	0x003d0900

08002160 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002164:	4b03      	ldr	r3, [pc, #12]	@ (8002174 <HAL_RCC_GetHCLKFreq+0x14>)
 8002166:	681b      	ldr	r3, [r3, #0]
}
 8002168:	4618      	mov	r0, r3
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	20000000 	.word	0x20000000

08002178 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800217e:	f7ff ffef 	bl	8002160 <HAL_RCC_GetHCLKFreq>
 8002182:	4601      	mov	r1, r0
 8002184:	4b0b      	ldr	r3, [pc, #44]	@ (80021b4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800218c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002190:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	fa92 f2a2 	rbit	r2, r2
 8002198:	603a      	str	r2, [r7, #0]
  return result;
 800219a:	683a      	ldr	r2, [r7, #0]
 800219c:	fab2 f282 	clz	r2, r2
 80021a0:	b2d2      	uxtb	r2, r2
 80021a2:	40d3      	lsrs	r3, r2
 80021a4:	4a04      	ldr	r2, [pc, #16]	@ (80021b8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80021a6:	5cd3      	ldrb	r3, [r2, r3]
 80021a8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80021ac:	4618      	mov	r0, r3
 80021ae:	3708      	adds	r7, #8
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	40021000 	.word	0x40021000
 80021b8:	08006630 	.word	0x08006630

080021bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80021c2:	f7ff ffcd 	bl	8002160 <HAL_RCC_GetHCLKFreq>
 80021c6:	4601      	mov	r1, r0
 80021c8:	4b0b      	ldr	r3, [pc, #44]	@ (80021f8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80021d0:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80021d4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	fa92 f2a2 	rbit	r2, r2
 80021dc:	603a      	str	r2, [r7, #0]
  return result;
 80021de:	683a      	ldr	r2, [r7, #0]
 80021e0:	fab2 f282 	clz	r2, r2
 80021e4:	b2d2      	uxtb	r2, r2
 80021e6:	40d3      	lsrs	r3, r2
 80021e8:	4a04      	ldr	r2, [pc, #16]	@ (80021fc <HAL_RCC_GetPCLK2Freq+0x40>)
 80021ea:	5cd3      	ldrb	r3, [r2, r3]
 80021ec:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80021f0:	4618      	mov	r0, r3
 80021f2:	3708      	adds	r7, #8
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	40021000 	.word	0x40021000
 80021fc:	08006630 	.word	0x08006630

08002200 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	220f      	movs	r2, #15
 800220e:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002210:	4b12      	ldr	r3, [pc, #72]	@ (800225c <HAL_RCC_GetClockConfig+0x5c>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f003 0203 	and.w	r2, r3, #3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 800221c:	4b0f      	ldr	r3, [pc, #60]	@ (800225c <HAL_RCC_GetClockConfig+0x5c>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8002228:	4b0c      	ldr	r3, [pc, #48]	@ (800225c <HAL_RCC_GetClockConfig+0x5c>)
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002234:	4b09      	ldr	r3, [pc, #36]	@ (800225c <HAL_RCC_GetClockConfig+0x5c>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	08db      	lsrs	r3, r3, #3
 800223a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8002242:	4b07      	ldr	r3, [pc, #28]	@ (8002260 <HAL_RCC_GetClockConfig+0x60>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0207 	and.w	r2, r3, #7
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	601a      	str	r2, [r3, #0]
}
 800224e:	bf00      	nop
 8002250:	370c      	adds	r7, #12
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	40021000 	.word	0x40021000
 8002260:	40022000 	.word	0x40022000

08002264 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d101      	bne.n	8002276 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e049      	b.n	800230a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800227c:	b2db      	uxtb	r3, r3
 800227e:	2b00      	cmp	r3, #0
 8002280:	d106      	bne.n	8002290 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f000 f841 	bl	8002312 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2202      	movs	r2, #2
 8002294:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	3304      	adds	r3, #4
 80022a0:	4619      	mov	r1, r3
 80022a2:	4610      	mov	r0, r2
 80022a4:	f000 f9be 	bl	8002624 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2201      	movs	r2, #1
 80022ac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2201      	movs	r2, #1
 80022c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2201      	movs	r2, #1
 80022cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2201      	movs	r2, #1
 80022d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2201      	movs	r2, #1
 80022e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2201      	movs	r2, #1
 80022fc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002308:	2300      	movs	r3, #0
}
 800230a:	4618      	mov	r0, r3
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002312:	b480      	push	{r7}
 8002314:	b083      	sub	sp, #12
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800231a:	bf00      	nop
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
	...

08002328 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002328:	b480      	push	{r7}
 800232a:	b085      	sub	sp, #20
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002336:	b2db      	uxtb	r3, r3
 8002338:	2b01      	cmp	r3, #1
 800233a:	d001      	beq.n	8002340 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e03b      	b.n	80023b8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2202      	movs	r2, #2
 8002344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	68da      	ldr	r2, [r3, #12]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f042 0201 	orr.w	r2, r2, #1
 8002356:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a19      	ldr	r2, [pc, #100]	@ (80023c4 <HAL_TIM_Base_Start_IT+0x9c>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d009      	beq.n	8002376 <HAL_TIM_Base_Start_IT+0x4e>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800236a:	d004      	beq.n	8002376 <HAL_TIM_Base_Start_IT+0x4e>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a15      	ldr	r2, [pc, #84]	@ (80023c8 <HAL_TIM_Base_Start_IT+0xa0>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d115      	bne.n	80023a2 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	689a      	ldr	r2, [r3, #8]
 800237c:	4b13      	ldr	r3, [pc, #76]	@ (80023cc <HAL_TIM_Base_Start_IT+0xa4>)
 800237e:	4013      	ands	r3, r2
 8002380:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2b06      	cmp	r3, #6
 8002386:	d015      	beq.n	80023b4 <HAL_TIM_Base_Start_IT+0x8c>
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800238e:	d011      	beq.n	80023b4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f042 0201 	orr.w	r2, r2, #1
 800239e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023a0:	e008      	b.n	80023b4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f042 0201 	orr.w	r2, r2, #1
 80023b0:	601a      	str	r2, [r3, #0]
 80023b2:	e000      	b.n	80023b6 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023b4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80023b6:	2300      	movs	r3, #0
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3714      	adds	r7, #20
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr
 80023c4:	40012c00 	.word	0x40012c00
 80023c8:	40014000 	.word	0x40014000
 80023cc:	00010007 	.word	0x00010007

080023d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d020      	beq.n	8002434 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	f003 0302 	and.w	r3, r3, #2
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d01b      	beq.n	8002434 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f06f 0202 	mvn.w	r2, #2
 8002404:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2201      	movs	r2, #1
 800240a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	699b      	ldr	r3, [r3, #24]
 8002412:	f003 0303 	and.w	r3, r3, #3
 8002416:	2b00      	cmp	r3, #0
 8002418:	d003      	beq.n	8002422 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 f8e4 	bl	80025e8 <HAL_TIM_IC_CaptureCallback>
 8002420:	e005      	b.n	800242e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f000 f8d6 	bl	80025d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f000 f8e7 	bl	80025fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	f003 0304 	and.w	r3, r3, #4
 800243a:	2b00      	cmp	r3, #0
 800243c:	d020      	beq.n	8002480 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	f003 0304 	and.w	r3, r3, #4
 8002444:	2b00      	cmp	r3, #0
 8002446:	d01b      	beq.n	8002480 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f06f 0204 	mvn.w	r2, #4
 8002450:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2202      	movs	r2, #2
 8002456:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	699b      	ldr	r3, [r3, #24]
 800245e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002462:	2b00      	cmp	r3, #0
 8002464:	d003      	beq.n	800246e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f000 f8be 	bl	80025e8 <HAL_TIM_IC_CaptureCallback>
 800246c:	e005      	b.n	800247a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f000 f8b0 	bl	80025d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f000 f8c1 	bl	80025fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	f003 0308 	and.w	r3, r3, #8
 8002486:	2b00      	cmp	r3, #0
 8002488:	d020      	beq.n	80024cc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	f003 0308 	and.w	r3, r3, #8
 8002490:	2b00      	cmp	r3, #0
 8002492:	d01b      	beq.n	80024cc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f06f 0208 	mvn.w	r2, #8
 800249c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2204      	movs	r2, #4
 80024a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	69db      	ldr	r3, [r3, #28]
 80024aa:	f003 0303 	and.w	r3, r3, #3
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d003      	beq.n	80024ba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f000 f898 	bl	80025e8 <HAL_TIM_IC_CaptureCallback>
 80024b8:	e005      	b.n	80024c6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f000 f88a 	bl	80025d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f000 f89b 	bl	80025fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	f003 0310 	and.w	r3, r3, #16
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d020      	beq.n	8002518 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	f003 0310 	and.w	r3, r3, #16
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d01b      	beq.n	8002518 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f06f 0210 	mvn.w	r2, #16
 80024e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2208      	movs	r2, #8
 80024ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	69db      	ldr	r3, [r3, #28]
 80024f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d003      	beq.n	8002506 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f000 f872 	bl	80025e8 <HAL_TIM_IC_CaptureCallback>
 8002504:	e005      	b.n	8002512 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f000 f864 	bl	80025d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f000 f875 	bl	80025fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	2b00      	cmp	r3, #0
 8002520:	d00c      	beq.n	800253c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	f003 0301 	and.w	r3, r3, #1
 8002528:	2b00      	cmp	r3, #0
 800252a:	d007      	beq.n	800253c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f06f 0201 	mvn.w	r2, #1
 8002534:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f7fd ffbe 	bl	80004b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002542:	2b00      	cmp	r3, #0
 8002544:	d00c      	beq.n	8002560 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800254c:	2b00      	cmp	r3, #0
 800254e:	d007      	beq.n	8002560 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002558:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 f8e6 	bl	800272c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002566:	2b00      	cmp	r3, #0
 8002568:	d00c      	beq.n	8002584 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002570:	2b00      	cmp	r3, #0
 8002572:	d007      	beq.n	8002584 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800257c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f000 f8de 	bl	8002740 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800258a:	2b00      	cmp	r3, #0
 800258c:	d00c      	beq.n	80025a8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002594:	2b00      	cmp	r3, #0
 8002596:	d007      	beq.n	80025a8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80025a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f000 f834 	bl	8002610 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	f003 0320 	and.w	r3, r3, #32
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d00c      	beq.n	80025cc <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	f003 0320 	and.w	r3, r3, #32
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d007      	beq.n	80025cc <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f06f 0220 	mvn.w	r2, #32
 80025c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f000 f8a6 	bl	8002718 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80025cc:	bf00      	nop
 80025ce:	3710      	adds	r7, #16
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80025dc:	bf00      	nop
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80025f0:	bf00      	nop
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002604:	bf00      	nop
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002618:	bf00      	nop
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002624:	b480      	push	{r7}
 8002626:	b085      	sub	sp, #20
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	4a34      	ldr	r2, [pc, #208]	@ (8002708 <TIM_Base_SetConfig+0xe4>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d003      	beq.n	8002644 <TIM_Base_SetConfig+0x20>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002642:	d108      	bne.n	8002656 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800264a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	68fa      	ldr	r2, [r7, #12]
 8002652:	4313      	orrs	r3, r2
 8002654:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a2b      	ldr	r2, [pc, #172]	@ (8002708 <TIM_Base_SetConfig+0xe4>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d00f      	beq.n	800267e <TIM_Base_SetConfig+0x5a>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002664:	d00b      	beq.n	800267e <TIM_Base_SetConfig+0x5a>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a28      	ldr	r2, [pc, #160]	@ (800270c <TIM_Base_SetConfig+0xe8>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d007      	beq.n	800267e <TIM_Base_SetConfig+0x5a>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a27      	ldr	r2, [pc, #156]	@ (8002710 <TIM_Base_SetConfig+0xec>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d003      	beq.n	800267e <TIM_Base_SetConfig+0x5a>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a26      	ldr	r2, [pc, #152]	@ (8002714 <TIM_Base_SetConfig+0xf0>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d108      	bne.n	8002690 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002684:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	68fa      	ldr	r2, [r7, #12]
 800268c:	4313      	orrs	r3, r2
 800268e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	695b      	ldr	r3, [r3, #20]
 800269a:	4313      	orrs	r3, r2
 800269c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	68fa      	ldr	r2, [r7, #12]
 80026a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	689a      	ldr	r2, [r3, #8]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	4a14      	ldr	r2, [pc, #80]	@ (8002708 <TIM_Base_SetConfig+0xe4>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d00b      	beq.n	80026d4 <TIM_Base_SetConfig+0xb0>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	4a13      	ldr	r2, [pc, #76]	@ (800270c <TIM_Base_SetConfig+0xe8>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d007      	beq.n	80026d4 <TIM_Base_SetConfig+0xb0>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	4a12      	ldr	r2, [pc, #72]	@ (8002710 <TIM_Base_SetConfig+0xec>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d003      	beq.n	80026d4 <TIM_Base_SetConfig+0xb0>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	4a11      	ldr	r2, [pc, #68]	@ (8002714 <TIM_Base_SetConfig+0xf0>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d103      	bne.n	80026dc <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	691a      	ldr	r2, [r3, #16]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2201      	movs	r2, #1
 80026e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d105      	bne.n	80026fa <TIM_Base_SetConfig+0xd6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	f023 0201 	bic.w	r2, r3, #1
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	611a      	str	r2, [r3, #16]
  }
}
 80026fa:	bf00      	nop
 80026fc:	3714      	adds	r7, #20
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	40012c00 	.word	0x40012c00
 800270c:	40014000 	.word	0x40014000
 8002710:	40014400 	.word	0x40014400
 8002714:	40014800 	.word	0x40014800

08002718 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002720:	bf00      	nop
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr

0800272c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002734:	bf00      	nop
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002748:	bf00      	nop
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr

08002754 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d101      	bne.n	8002766 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e040      	b.n	80027e8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800276a:	2b00      	cmp	r3, #0
 800276c:	d106      	bne.n	800277c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f7fd fede 	bl	8000538 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2224      	movs	r2, #36	@ 0x24
 8002780:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f022 0201 	bic.w	r2, r2, #1
 8002790:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002796:	2b00      	cmp	r3, #0
 8002798:	d002      	beq.n	80027a0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f000 f9e8 	bl	8002b70 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f000 f8af 	bl	8002904 <UART_SetConfig>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d101      	bne.n	80027b0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e01b      	b.n	80027e8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	685a      	ldr	r2, [r3, #4]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80027be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	689a      	ldr	r2, [r3, #8]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80027ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f042 0201 	orr.w	r2, r2, #1
 80027de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f000 fa67 	bl	8002cb4 <UART_CheckIdleState>
 80027e6:	4603      	mov	r3, r0
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3708      	adds	r7, #8
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b08a      	sub	sp, #40	@ 0x28
 80027f4:	af02      	add	r7, sp, #8
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	60b9      	str	r1, [r7, #8]
 80027fa:	603b      	str	r3, [r7, #0]
 80027fc:	4613      	mov	r3, r2
 80027fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002804:	2b20      	cmp	r3, #32
 8002806:	d177      	bne.n	80028f8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d002      	beq.n	8002814 <HAL_UART_Transmit+0x24>
 800280e:	88fb      	ldrh	r3, [r7, #6]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d101      	bne.n	8002818 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e070      	b.n	80028fa <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2200      	movs	r2, #0
 800281c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2221      	movs	r2, #33	@ 0x21
 8002824:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002826:	f7fd fffb 	bl	8000820 <HAL_GetTick>
 800282a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	88fa      	ldrh	r2, [r7, #6]
 8002830:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	88fa      	ldrh	r2, [r7, #6]
 8002838:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002844:	d108      	bne.n	8002858 <HAL_UART_Transmit+0x68>
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d104      	bne.n	8002858 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800284e:	2300      	movs	r3, #0
 8002850:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	61bb      	str	r3, [r7, #24]
 8002856:	e003      	b.n	8002860 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800285c:	2300      	movs	r3, #0
 800285e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002860:	e02f      	b.n	80028c2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	9300      	str	r3, [sp, #0]
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	2200      	movs	r2, #0
 800286a:	2180      	movs	r1, #128	@ 0x80
 800286c:	68f8      	ldr	r0, [r7, #12]
 800286e:	f000 fac9 	bl	8002e04 <UART_WaitOnFlagUntilTimeout>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d004      	beq.n	8002882 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2220      	movs	r2, #32
 800287c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e03b      	b.n	80028fa <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d10b      	bne.n	80028a0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	881a      	ldrh	r2, [r3, #0]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002894:	b292      	uxth	r2, r2
 8002896:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	3302      	adds	r3, #2
 800289c:	61bb      	str	r3, [r7, #24]
 800289e:	e007      	b.n	80028b0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	781a      	ldrb	r2, [r3, #0]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	3301      	adds	r3, #1
 80028ae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	3b01      	subs	r3, #1
 80028ba:	b29a      	uxth	r2, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d1c9      	bne.n	8002862 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	9300      	str	r3, [sp, #0]
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	2200      	movs	r2, #0
 80028d6:	2140      	movs	r1, #64	@ 0x40
 80028d8:	68f8      	ldr	r0, [r7, #12]
 80028da:	f000 fa93 	bl	8002e04 <UART_WaitOnFlagUntilTimeout>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d004      	beq.n	80028ee <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2220      	movs	r2, #32
 80028e8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e005      	b.n	80028fa <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2220      	movs	r2, #32
 80028f2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80028f4:	2300      	movs	r3, #0
 80028f6:	e000      	b.n	80028fa <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80028f8:	2302      	movs	r3, #2
  }
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3720      	adds	r7, #32
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
	...

08002904 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b088      	sub	sp, #32
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800290c:	2300      	movs	r3, #0
 800290e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	689a      	ldr	r2, [r3, #8]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	691b      	ldr	r3, [r3, #16]
 8002918:	431a      	orrs	r2, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	695b      	ldr	r3, [r3, #20]
 800291e:	431a      	orrs	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	69db      	ldr	r3, [r3, #28]
 8002924:	4313      	orrs	r3, r2
 8002926:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	4b8a      	ldr	r3, [pc, #552]	@ (8002b58 <UART_SetConfig+0x254>)
 8002930:	4013      	ands	r3, r2
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	6812      	ldr	r2, [r2, #0]
 8002936:	6979      	ldr	r1, [r7, #20]
 8002938:	430b      	orrs	r3, r1
 800293a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	68da      	ldr	r2, [r3, #12]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	430a      	orrs	r2, r1
 8002950:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	699b      	ldr	r3, [r3, #24]
 8002956:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a1b      	ldr	r3, [r3, #32]
 800295c:	697a      	ldr	r2, [r7, #20]
 800295e:	4313      	orrs	r3, r2
 8002960:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	697a      	ldr	r2, [r7, #20]
 8002972:	430a      	orrs	r2, r1
 8002974:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a78      	ldr	r2, [pc, #480]	@ (8002b5c <UART_SetConfig+0x258>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d120      	bne.n	80029c2 <UART_SetConfig+0xbe>
 8002980:	4b77      	ldr	r3, [pc, #476]	@ (8002b60 <UART_SetConfig+0x25c>)
 8002982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002984:	f003 0303 	and.w	r3, r3, #3
 8002988:	2b03      	cmp	r3, #3
 800298a:	d817      	bhi.n	80029bc <UART_SetConfig+0xb8>
 800298c:	a201      	add	r2, pc, #4	@ (adr r2, 8002994 <UART_SetConfig+0x90>)
 800298e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002992:	bf00      	nop
 8002994:	080029a5 	.word	0x080029a5
 8002998:	080029b1 	.word	0x080029b1
 800299c:	080029b7 	.word	0x080029b7
 80029a0:	080029ab 	.word	0x080029ab
 80029a4:	2300      	movs	r3, #0
 80029a6:	77fb      	strb	r3, [r7, #31]
 80029a8:	e01d      	b.n	80029e6 <UART_SetConfig+0xe2>
 80029aa:	2302      	movs	r3, #2
 80029ac:	77fb      	strb	r3, [r7, #31]
 80029ae:	e01a      	b.n	80029e6 <UART_SetConfig+0xe2>
 80029b0:	2304      	movs	r3, #4
 80029b2:	77fb      	strb	r3, [r7, #31]
 80029b4:	e017      	b.n	80029e6 <UART_SetConfig+0xe2>
 80029b6:	2308      	movs	r3, #8
 80029b8:	77fb      	strb	r3, [r7, #31]
 80029ba:	e014      	b.n	80029e6 <UART_SetConfig+0xe2>
 80029bc:	2310      	movs	r3, #16
 80029be:	77fb      	strb	r3, [r7, #31]
 80029c0:	e011      	b.n	80029e6 <UART_SetConfig+0xe2>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a67      	ldr	r2, [pc, #412]	@ (8002b64 <UART_SetConfig+0x260>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d102      	bne.n	80029d2 <UART_SetConfig+0xce>
 80029cc:	2300      	movs	r3, #0
 80029ce:	77fb      	strb	r3, [r7, #31]
 80029d0:	e009      	b.n	80029e6 <UART_SetConfig+0xe2>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a64      	ldr	r2, [pc, #400]	@ (8002b68 <UART_SetConfig+0x264>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d102      	bne.n	80029e2 <UART_SetConfig+0xde>
 80029dc:	2300      	movs	r3, #0
 80029de:	77fb      	strb	r3, [r7, #31]
 80029e0:	e001      	b.n	80029e6 <UART_SetConfig+0xe2>
 80029e2:	2310      	movs	r3, #16
 80029e4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	69db      	ldr	r3, [r3, #28]
 80029ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80029ee:	d15a      	bne.n	8002aa6 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80029f0:	7ffb      	ldrb	r3, [r7, #31]
 80029f2:	2b08      	cmp	r3, #8
 80029f4:	d827      	bhi.n	8002a46 <UART_SetConfig+0x142>
 80029f6:	a201      	add	r2, pc, #4	@ (adr r2, 80029fc <UART_SetConfig+0xf8>)
 80029f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029fc:	08002a21 	.word	0x08002a21
 8002a00:	08002a29 	.word	0x08002a29
 8002a04:	08002a31 	.word	0x08002a31
 8002a08:	08002a47 	.word	0x08002a47
 8002a0c:	08002a37 	.word	0x08002a37
 8002a10:	08002a47 	.word	0x08002a47
 8002a14:	08002a47 	.word	0x08002a47
 8002a18:	08002a47 	.word	0x08002a47
 8002a1c:	08002a3f 	.word	0x08002a3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a20:	f7ff fbaa 	bl	8002178 <HAL_RCC_GetPCLK1Freq>
 8002a24:	61b8      	str	r0, [r7, #24]
        break;
 8002a26:	e013      	b.n	8002a50 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a28:	f7ff fbc8 	bl	80021bc <HAL_RCC_GetPCLK2Freq>
 8002a2c:	61b8      	str	r0, [r7, #24]
        break;
 8002a2e:	e00f      	b.n	8002a50 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a30:	4b4e      	ldr	r3, [pc, #312]	@ (8002b6c <UART_SetConfig+0x268>)
 8002a32:	61bb      	str	r3, [r7, #24]
        break;
 8002a34:	e00c      	b.n	8002a50 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a36:	f7ff fb3f 	bl	80020b8 <HAL_RCC_GetSysClockFreq>
 8002a3a:	61b8      	str	r0, [r7, #24]
        break;
 8002a3c:	e008      	b.n	8002a50 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002a42:	61bb      	str	r3, [r7, #24]
        break;
 8002a44:	e004      	b.n	8002a50 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8002a46:	2300      	movs	r3, #0
 8002a48:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	77bb      	strb	r3, [r7, #30]
        break;
 8002a4e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d074      	beq.n	8002b40 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	005a      	lsls	r2, r3, #1
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	085b      	lsrs	r3, r3, #1
 8002a60:	441a      	add	r2, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a6a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	2b0f      	cmp	r3, #15
 8002a70:	d916      	bls.n	8002aa0 <UART_SetConfig+0x19c>
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a78:	d212      	bcs.n	8002aa0 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	f023 030f 	bic.w	r3, r3, #15
 8002a82:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	085b      	lsrs	r3, r3, #1
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	f003 0307 	and.w	r3, r3, #7
 8002a8e:	b29a      	uxth	r2, r3
 8002a90:	89fb      	ldrh	r3, [r7, #14]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	89fa      	ldrh	r2, [r7, #14]
 8002a9c:	60da      	str	r2, [r3, #12]
 8002a9e:	e04f      	b.n	8002b40 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	77bb      	strb	r3, [r7, #30]
 8002aa4:	e04c      	b.n	8002b40 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002aa6:	7ffb      	ldrb	r3, [r7, #31]
 8002aa8:	2b08      	cmp	r3, #8
 8002aaa:	d828      	bhi.n	8002afe <UART_SetConfig+0x1fa>
 8002aac:	a201      	add	r2, pc, #4	@ (adr r2, 8002ab4 <UART_SetConfig+0x1b0>)
 8002aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ab2:	bf00      	nop
 8002ab4:	08002ad9 	.word	0x08002ad9
 8002ab8:	08002ae1 	.word	0x08002ae1
 8002abc:	08002ae9 	.word	0x08002ae9
 8002ac0:	08002aff 	.word	0x08002aff
 8002ac4:	08002aef 	.word	0x08002aef
 8002ac8:	08002aff 	.word	0x08002aff
 8002acc:	08002aff 	.word	0x08002aff
 8002ad0:	08002aff 	.word	0x08002aff
 8002ad4:	08002af7 	.word	0x08002af7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ad8:	f7ff fb4e 	bl	8002178 <HAL_RCC_GetPCLK1Freq>
 8002adc:	61b8      	str	r0, [r7, #24]
        break;
 8002ade:	e013      	b.n	8002b08 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ae0:	f7ff fb6c 	bl	80021bc <HAL_RCC_GetPCLK2Freq>
 8002ae4:	61b8      	str	r0, [r7, #24]
        break;
 8002ae6:	e00f      	b.n	8002b08 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ae8:	4b20      	ldr	r3, [pc, #128]	@ (8002b6c <UART_SetConfig+0x268>)
 8002aea:	61bb      	str	r3, [r7, #24]
        break;
 8002aec:	e00c      	b.n	8002b08 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002aee:	f7ff fae3 	bl	80020b8 <HAL_RCC_GetSysClockFreq>
 8002af2:	61b8      	str	r0, [r7, #24]
        break;
 8002af4:	e008      	b.n	8002b08 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002af6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002afa:	61bb      	str	r3, [r7, #24]
        break;
 8002afc:	e004      	b.n	8002b08 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002afe:	2300      	movs	r3, #0
 8002b00:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	77bb      	strb	r3, [r7, #30]
        break;
 8002b06:	bf00      	nop
    }

    if (pclk != 0U)
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d018      	beq.n	8002b40 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	085a      	lsrs	r2, r3, #1
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	441a      	add	r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b20:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	2b0f      	cmp	r3, #15
 8002b26:	d909      	bls.n	8002b3c <UART_SetConfig+0x238>
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b2e:	d205      	bcs.n	8002b3c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	b29a      	uxth	r2, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	60da      	str	r2, [r3, #12]
 8002b3a:	e001      	b.n	8002b40 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002b4c:	7fbb      	ldrb	r3, [r7, #30]
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3720      	adds	r7, #32
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	efff69f3 	.word	0xefff69f3
 8002b5c:	40013800 	.word	0x40013800
 8002b60:	40021000 	.word	0x40021000
 8002b64:	40004400 	.word	0x40004400
 8002b68:	40004800 	.word	0x40004800
 8002b6c:	007a1200 	.word	0x007a1200

08002b70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b7c:	f003 0308 	and.w	r3, r3, #8
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d00a      	beq.n	8002b9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	430a      	orrs	r2, r1
 8002b98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d00a      	beq.n	8002bbc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	430a      	orrs	r2, r1
 8002bba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bc0:	f003 0302 	and.w	r3, r3, #2
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d00a      	beq.n	8002bde <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	430a      	orrs	r2, r1
 8002bdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be2:	f003 0304 	and.w	r3, r3, #4
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d00a      	beq.n	8002c00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	430a      	orrs	r2, r1
 8002bfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c04:	f003 0310 	and.w	r3, r3, #16
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d00a      	beq.n	8002c22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	430a      	orrs	r2, r1
 8002c20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c26:	f003 0320 	and.w	r3, r3, #32
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d00a      	beq.n	8002c44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	430a      	orrs	r2, r1
 8002c42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d01a      	beq.n	8002c86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	430a      	orrs	r2, r1
 8002c64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c6e:	d10a      	bne.n	8002c86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	430a      	orrs	r2, r1
 8002c84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d00a      	beq.n	8002ca8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	430a      	orrs	r2, r1
 8002ca6:	605a      	str	r2, [r3, #4]
  }
}
 8002ca8:	bf00      	nop
 8002caa:	370c      	adds	r7, #12
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b098      	sub	sp, #96	@ 0x60
 8002cb8:	af02      	add	r7, sp, #8
 8002cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002cc4:	f7fd fdac 	bl	8000820 <HAL_GetTick>
 8002cc8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0308 	and.w	r3, r3, #8
 8002cd4:	2b08      	cmp	r3, #8
 8002cd6:	d12e      	bne.n	8002d36 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002cd8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002cdc:	9300      	str	r3, [sp, #0]
 8002cde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f000 f88c 	bl	8002e04 <UART_WaitOnFlagUntilTimeout>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d021      	beq.n	8002d36 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cfa:	e853 3f00 	ldrex	r3, [r3]
 8002cfe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002d00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d06:	653b      	str	r3, [r7, #80]	@ 0x50
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d10:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d12:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d14:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002d16:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002d18:	e841 2300 	strex	r3, r2, [r1]
 8002d1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002d1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d1e6      	bne.n	8002cf2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2220      	movs	r2, #32
 8002d28:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e062      	b.n	8002dfc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0304 	and.w	r3, r3, #4
 8002d40:	2b04      	cmp	r3, #4
 8002d42:	d149      	bne.n	8002dd8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d44:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002d48:	9300      	str	r3, [sp, #0]
 8002d4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 f856 	bl	8002e04 <UART_WaitOnFlagUntilTimeout>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d03c      	beq.n	8002dd8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d66:	e853 3f00 	ldrex	r3, [r3]
 8002d6a:	623b      	str	r3, [r7, #32]
   return(result);
 8002d6c:	6a3b      	ldr	r3, [r7, #32]
 8002d6e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002d72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	461a      	mov	r2, r3
 8002d7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002d7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d7e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d80:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002d82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d84:	e841 2300 	strex	r3, r2, [r1]
 8002d88:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002d8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d1e6      	bne.n	8002d5e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	3308      	adds	r3, #8
 8002d96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	e853 3f00 	ldrex	r3, [r3]
 8002d9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f023 0301 	bic.w	r3, r3, #1
 8002da6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	3308      	adds	r3, #8
 8002dae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002db0:	61fa      	str	r2, [r7, #28]
 8002db2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002db4:	69b9      	ldr	r1, [r7, #24]
 8002db6:	69fa      	ldr	r2, [r7, #28]
 8002db8:	e841 2300 	strex	r3, r2, [r1]
 8002dbc:	617b      	str	r3, [r7, #20]
   return(result);
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d1e5      	bne.n	8002d90 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2220      	movs	r2, #32
 8002dc8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e011      	b.n	8002dfc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2220      	movs	r2, #32
 8002ddc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2220      	movs	r2, #32
 8002de2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8002dfa:	2300      	movs	r3, #0
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3758      	adds	r7, #88	@ 0x58
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	603b      	str	r3, [r7, #0]
 8002e10:	4613      	mov	r3, r2
 8002e12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e14:	e04f      	b.n	8002eb6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e1c:	d04b      	beq.n	8002eb6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e1e:	f7fd fcff 	bl	8000820 <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	69ba      	ldr	r2, [r7, #24]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d302      	bcc.n	8002e34 <UART_WaitOnFlagUntilTimeout+0x30>
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d101      	bne.n	8002e38 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e04e      	b.n	8002ed6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0304 	and.w	r3, r3, #4
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d037      	beq.n	8002eb6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	2b80      	cmp	r3, #128	@ 0x80
 8002e4a:	d034      	beq.n	8002eb6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	2b40      	cmp	r3, #64	@ 0x40
 8002e50:	d031      	beq.n	8002eb6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	69db      	ldr	r3, [r3, #28]
 8002e58:	f003 0308 	and.w	r3, r3, #8
 8002e5c:	2b08      	cmp	r3, #8
 8002e5e:	d110      	bne.n	8002e82 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2208      	movs	r2, #8
 8002e66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002e68:	68f8      	ldr	r0, [r7, #12]
 8002e6a:	f000 f838 	bl	8002ede <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2208      	movs	r2, #8
 8002e72:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e029      	b.n	8002ed6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	69db      	ldr	r3, [r3, #28]
 8002e88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e90:	d111      	bne.n	8002eb6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002e9a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002e9c:	68f8      	ldr	r0, [r7, #12]
 8002e9e:	f000 f81e 	bl	8002ede <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2220      	movs	r2, #32
 8002ea6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e00f      	b.n	8002ed6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	69da      	ldr	r2, [r3, #28]
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	68ba      	ldr	r2, [r7, #8]
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	bf0c      	ite	eq
 8002ec6:	2301      	moveq	r3, #1
 8002ec8:	2300      	movne	r3, #0
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	461a      	mov	r2, r3
 8002ece:	79fb      	ldrb	r3, [r7, #7]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d0a0      	beq.n	8002e16 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3710      	adds	r7, #16
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ede:	b480      	push	{r7}
 8002ee0:	b095      	sub	sp, #84	@ 0x54
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002eee:	e853 3f00 	ldrex	r3, [r3]
 8002ef2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ef6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002efa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	461a      	mov	r2, r3
 8002f02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f04:	643b      	str	r3, [r7, #64]	@ 0x40
 8002f06:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f08:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002f0a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002f0c:	e841 2300 	strex	r3, r2, [r1]
 8002f10:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002f12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d1e6      	bne.n	8002ee6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	3308      	adds	r3, #8
 8002f1e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f20:	6a3b      	ldr	r3, [r7, #32]
 8002f22:	e853 3f00 	ldrex	r3, [r3]
 8002f26:	61fb      	str	r3, [r7, #28]
   return(result);
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	f023 0301 	bic.w	r3, r3, #1
 8002f2e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	3308      	adds	r3, #8
 8002f36:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002f38:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002f3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f3c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f40:	e841 2300 	strex	r3, r2, [r1]
 8002f44:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d1e5      	bne.n	8002f18 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d118      	bne.n	8002f86 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	e853 3f00 	ldrex	r3, [r3]
 8002f60:	60bb      	str	r3, [r7, #8]
   return(result);
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	f023 0310 	bic.w	r3, r3, #16
 8002f68:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	461a      	mov	r2, r3
 8002f70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f72:	61bb      	str	r3, [r7, #24]
 8002f74:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f76:	6979      	ldr	r1, [r7, #20]
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	e841 2300 	strex	r3, r2, [r1]
 8002f7e:	613b      	str	r3, [r7, #16]
   return(result);
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1e6      	bne.n	8002f54 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2220      	movs	r2, #32
 8002f8a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002f9a:	bf00      	nop
 8002f9c:	3754      	adds	r7, #84	@ 0x54
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
	...

08002fa8 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002fa8:	b480      	push	{r7}
 8002faa:	b085      	sub	sp, #20
 8002fac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002fae:	f3ef 8305 	mrs	r3, IPSR
 8002fb2:	60bb      	str	r3, [r7, #8]
  return(result);
 8002fb4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d10f      	bne.n	8002fda <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fba:	f3ef 8310 	mrs	r3, PRIMASK
 8002fbe:	607b      	str	r3, [r7, #4]
  return(result);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d109      	bne.n	8002fda <osKernelInitialize+0x32>
 8002fc6:	4b11      	ldr	r3, [pc, #68]	@ (800300c <osKernelInitialize+0x64>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d109      	bne.n	8002fe2 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002fce:	f3ef 8311 	mrs	r3, BASEPRI
 8002fd2:	603b      	str	r3, [r7, #0]
  return(result);
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d003      	beq.n	8002fe2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8002fda:	f06f 0305 	mvn.w	r3, #5
 8002fde:	60fb      	str	r3, [r7, #12]
 8002fe0:	e00c      	b.n	8002ffc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002fe2:	4b0a      	ldr	r3, [pc, #40]	@ (800300c <osKernelInitialize+0x64>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d105      	bne.n	8002ff6 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8002fea:	4b08      	ldr	r3, [pc, #32]	@ (800300c <osKernelInitialize+0x64>)
 8002fec:	2201      	movs	r2, #1
 8002fee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	60fb      	str	r3, [r7, #12]
 8002ff4:	e002      	b.n	8002ffc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8002ffa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3714      	adds	r7, #20
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	2000015c 	.word	0x2000015c

08003010 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003016:	f3ef 8305 	mrs	r3, IPSR
 800301a:	60bb      	str	r3, [r7, #8]
  return(result);
 800301c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800301e:	2b00      	cmp	r3, #0
 8003020:	d10f      	bne.n	8003042 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003022:	f3ef 8310 	mrs	r3, PRIMASK
 8003026:	607b      	str	r3, [r7, #4]
  return(result);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d109      	bne.n	8003042 <osKernelStart+0x32>
 800302e:	4b11      	ldr	r3, [pc, #68]	@ (8003074 <osKernelStart+0x64>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2b02      	cmp	r3, #2
 8003034:	d109      	bne.n	800304a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003036:	f3ef 8311 	mrs	r3, BASEPRI
 800303a:	603b      	str	r3, [r7, #0]
  return(result);
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d003      	beq.n	800304a <osKernelStart+0x3a>
    stat = osErrorISR;
 8003042:	f06f 0305 	mvn.w	r3, #5
 8003046:	60fb      	str	r3, [r7, #12]
 8003048:	e00e      	b.n	8003068 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800304a:	4b0a      	ldr	r3, [pc, #40]	@ (8003074 <osKernelStart+0x64>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2b01      	cmp	r3, #1
 8003050:	d107      	bne.n	8003062 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8003052:	4b08      	ldr	r3, [pc, #32]	@ (8003074 <osKernelStart+0x64>)
 8003054:	2202      	movs	r2, #2
 8003056:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003058:	f001 f8e2 	bl	8004220 <vTaskStartScheduler>
      stat = osOK;
 800305c:	2300      	movs	r3, #0
 800305e:	60fb      	str	r3, [r7, #12]
 8003060:	e002      	b.n	8003068 <osKernelStart+0x58>
    } else {
      stat = osError;
 8003062:	f04f 33ff 	mov.w	r3, #4294967295
 8003066:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003068:	68fb      	ldr	r3, [r7, #12]
}
 800306a:	4618      	mov	r0, r3
 800306c:	3710      	adds	r7, #16
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	2000015c 	.word	0x2000015c

08003078 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800307e:	f3ef 8305 	mrs	r3, IPSR
 8003082:	60bb      	str	r3, [r7, #8]
  return(result);
 8003084:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8003086:	2b00      	cmp	r3, #0
 8003088:	d10f      	bne.n	80030aa <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800308a:	f3ef 8310 	mrs	r3, PRIMASK
 800308e:	607b      	str	r3, [r7, #4]
  return(result);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d109      	bne.n	80030aa <osKernelGetTickCount+0x32>
 8003096:	4b0b      	ldr	r3, [pc, #44]	@ (80030c4 <osKernelGetTickCount+0x4c>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2b02      	cmp	r3, #2
 800309c:	d109      	bne.n	80030b2 <osKernelGetTickCount+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800309e:	f3ef 8311 	mrs	r3, BASEPRI
 80030a2:	603b      	str	r3, [r7, #0]
  return(result);
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d003      	beq.n	80030b2 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 80030aa:	f001 f9e5 	bl	8004478 <xTaskGetTickCountFromISR>
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	e002      	b.n	80030b8 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 80030b2:	f001 f9d1 	bl	8004458 <xTaskGetTickCount>
 80030b6:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 80030b8:	68fb      	ldr	r3, [r7, #12]
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3710      	adds	r7, #16
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	2000015c 	.word	0x2000015c

080030c8 <osKernelGetTickFreq>:

uint32_t osKernelGetTickFreq (void) {
 80030c8:	b480      	push	{r7}
 80030ca:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 80030cc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
	...

080030dc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80030dc:	b580      	push	{r7, lr}
 80030de:	b092      	sub	sp, #72	@ 0x48
 80030e0:	af04      	add	r7, sp, #16
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80030e8:	2300      	movs	r3, #0
 80030ea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80030ec:	f3ef 8305 	mrs	r3, IPSR
 80030f0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80030f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	f040 8094 	bne.w	8003222 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030fa:	f3ef 8310 	mrs	r3, PRIMASK
 80030fe:	623b      	str	r3, [r7, #32]
  return(result);
 8003100:	6a3b      	ldr	r3, [r7, #32]
 8003102:	2b00      	cmp	r3, #0
 8003104:	f040 808d 	bne.w	8003222 <osThreadNew+0x146>
 8003108:	4b48      	ldr	r3, [pc, #288]	@ (800322c <osThreadNew+0x150>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2b02      	cmp	r3, #2
 800310e:	d106      	bne.n	800311e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003110:	f3ef 8311 	mrs	r3, BASEPRI
 8003114:	61fb      	str	r3, [r7, #28]
  return(result);
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	2b00      	cmp	r3, #0
 800311a:	f040 8082 	bne.w	8003222 <osThreadNew+0x146>
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d07e      	beq.n	8003222 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8003124:	2380      	movs	r3, #128	@ 0x80
 8003126:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8003128:	2318      	movs	r3, #24
 800312a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 800312c:	2300      	movs	r3, #0
 800312e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8003130:	f107 031b 	add.w	r3, r7, #27
 8003134:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 8003136:	f04f 33ff 	mov.w	r3, #4294967295
 800313a:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d045      	beq.n	80031ce <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d002      	beq.n	8003150 <osThreadNew+0x74>
        name = attr->name;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	699b      	ldr	r3, [r3, #24]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d002      	beq.n	800315e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	699b      	ldr	r3, [r3, #24]
 800315c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800315e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003160:	2b00      	cmp	r3, #0
 8003162:	d008      	beq.n	8003176 <osThreadNew+0x9a>
 8003164:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003166:	2b38      	cmp	r3, #56	@ 0x38
 8003168:	d805      	bhi.n	8003176 <osThreadNew+0x9a>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f003 0301 	and.w	r3, r3, #1
 8003172:	2b00      	cmp	r3, #0
 8003174:	d001      	beq.n	800317a <osThreadNew+0x9e>
        return (NULL);
 8003176:	2300      	movs	r3, #0
 8003178:	e054      	b.n	8003224 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	695b      	ldr	r3, [r3, #20]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d003      	beq.n	800318a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	695b      	ldr	r3, [r3, #20]
 8003186:	089b      	lsrs	r3, r3, #2
 8003188:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d00e      	beq.n	80031b0 <osThreadNew+0xd4>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	2ba7      	cmp	r3, #167	@ 0xa7
 8003198:	d90a      	bls.n	80031b0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d006      	beq.n	80031b0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	695b      	ldr	r3, [r3, #20]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d002      	beq.n	80031b0 <osThreadNew+0xd4>
        mem = 1;
 80031aa:	2301      	movs	r3, #1
 80031ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80031ae:	e010      	b.n	80031d2 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d10c      	bne.n	80031d2 <osThreadNew+0xf6>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d108      	bne.n	80031d2 <osThreadNew+0xf6>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	691b      	ldr	r3, [r3, #16]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d104      	bne.n	80031d2 <osThreadNew+0xf6>
          mem = 0;
 80031c8:	2300      	movs	r3, #0
 80031ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 80031cc:	e001      	b.n	80031d2 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80031ce:	2300      	movs	r3, #0
 80031d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 80031d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d110      	bne.n	80031fa <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80031e0:	9202      	str	r2, [sp, #8]
 80031e2:	9301      	str	r3, [sp, #4]
 80031e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031e6:	9300      	str	r3, [sp, #0]
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031ec:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80031ee:	68f8      	ldr	r0, [r7, #12]
 80031f0:	f000 fe2c 	bl	8003e4c <xTaskCreateStatic>
 80031f4:	4603      	mov	r3, r0
 80031f6:	617b      	str	r3, [r7, #20]
 80031f8:	e013      	b.n	8003222 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80031fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d110      	bne.n	8003222 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003202:	b29a      	uxth	r2, r3
 8003204:	f107 0314 	add.w	r3, r7, #20
 8003208:	9301      	str	r3, [sp, #4]
 800320a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800320c:	9300      	str	r3, [sp, #0]
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003212:	68f8      	ldr	r0, [r7, #12]
 8003214:	f000 fe79 	bl	8003f0a <xTaskCreate>
 8003218:	4603      	mov	r3, r0
 800321a:	2b01      	cmp	r3, #1
 800321c:	d001      	beq.n	8003222 <osThreadNew+0x146>
          hTask = NULL;
 800321e:	2300      	movs	r3, #0
 8003220:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003222:	697b      	ldr	r3, [r7, #20]
}
 8003224:	4618      	mov	r0, r3
 8003226:	3738      	adds	r7, #56	@ 0x38
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	2000015c 	.word	0x2000015c

08003230 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003230:	b580      	push	{r7, lr}
 8003232:	b086      	sub	sp, #24
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003238:	f3ef 8305 	mrs	r3, IPSR
 800323c:	613b      	str	r3, [r7, #16]
  return(result);
 800323e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003240:	2b00      	cmp	r3, #0
 8003242:	d10f      	bne.n	8003264 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003244:	f3ef 8310 	mrs	r3, PRIMASK
 8003248:	60fb      	str	r3, [r7, #12]
  return(result);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d109      	bne.n	8003264 <osDelay+0x34>
 8003250:	4b0d      	ldr	r3, [pc, #52]	@ (8003288 <osDelay+0x58>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2b02      	cmp	r3, #2
 8003256:	d109      	bne.n	800326c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003258:	f3ef 8311 	mrs	r3, BASEPRI
 800325c:	60bb      	str	r3, [r7, #8]
  return(result);
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d003      	beq.n	800326c <osDelay+0x3c>
    stat = osErrorISR;
 8003264:	f06f 0305 	mvn.w	r3, #5
 8003268:	617b      	str	r3, [r7, #20]
 800326a:	e007      	b.n	800327c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800326c:	2300      	movs	r3, #0
 800326e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d002      	beq.n	800327c <osDelay+0x4c>
      vTaskDelay(ticks);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f000 ff9c 	bl	80041b4 <vTaskDelay>
    }
  }

  return (stat);
 800327c:	697b      	ldr	r3, [r7, #20]
}
 800327e:	4618      	mov	r0, r3
 8003280:	3718      	adds	r7, #24
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	2000015c 	.word	0x2000015c

0800328c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800328c:	b480      	push	{r7}
 800328e:	b085      	sub	sp, #20
 8003290:	af00      	add	r7, sp, #0
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	4a07      	ldr	r2, [pc, #28]	@ (80032b8 <vApplicationGetIdleTaskMemory+0x2c>)
 800329c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	4a06      	ldr	r2, [pc, #24]	@ (80032bc <vApplicationGetIdleTaskMemory+0x30>)
 80032a2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2280      	movs	r2, #128	@ 0x80
 80032a8:	601a      	str	r2, [r3, #0]
}
 80032aa:	bf00      	nop
 80032ac:	3714      	adds	r7, #20
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	20000160 	.word	0x20000160
 80032bc:	20000208 	.word	0x20000208

080032c0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80032c0:	b480      	push	{r7}
 80032c2:	b085      	sub	sp, #20
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	4a07      	ldr	r2, [pc, #28]	@ (80032ec <vApplicationGetTimerTaskMemory+0x2c>)
 80032d0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	4a06      	ldr	r2, [pc, #24]	@ (80032f0 <vApplicationGetTimerTaskMemory+0x30>)
 80032d6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80032de:	601a      	str	r2, [r3, #0]
}
 80032e0:	bf00      	nop
 80032e2:	3714      	adds	r7, #20
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr
 80032ec:	20000408 	.word	0x20000408
 80032f0:	200004b0 	.word	0x200004b0

080032f4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f103 0208 	add.w	r2, r3, #8
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f04f 32ff 	mov.w	r2, #4294967295
 800330c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f103 0208 	add.w	r2, r3, #8
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f103 0208 	add.w	r2, r3, #8
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003328:	bf00      	nop
 800332a:	370c      	adds	r7, #12
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003342:	bf00      	nop
 8003344:	370c      	adds	r7, #12
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr

0800334e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800334e:	b480      	push	{r7}
 8003350:	b085      	sub	sp, #20
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
 8003356:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	68fa      	ldr	r2, [r7, #12]
 8003362:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	689a      	ldr	r2, [r3, #8]
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	683a      	ldr	r2, [r7, #0]
 8003372:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	683a      	ldr	r2, [r7, #0]
 8003378:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	1c5a      	adds	r2, r3, #1
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	601a      	str	r2, [r3, #0]
}
 800338a:	bf00      	nop
 800338c:	3714      	adds	r7, #20
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr

08003396 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003396:	b480      	push	{r7}
 8003398:	b085      	sub	sp, #20
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
 800339e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ac:	d103      	bne.n	80033b6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	691b      	ldr	r3, [r3, #16]
 80033b2:	60fb      	str	r3, [r7, #12]
 80033b4:	e00c      	b.n	80033d0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	3308      	adds	r3, #8
 80033ba:	60fb      	str	r3, [r7, #12]
 80033bc:	e002      	b.n	80033c4 <vListInsert+0x2e>
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	60fb      	str	r3, [r7, #12]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	68ba      	ldr	r2, [r7, #8]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d2f6      	bcs.n	80033be <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	685a      	ldr	r2, [r3, #4]
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	683a      	ldr	r2, [r7, #0]
 80033de:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	68fa      	ldr	r2, [r7, #12]
 80033e4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	683a      	ldr	r2, [r7, #0]
 80033ea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	1c5a      	adds	r2, r3, #1
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	601a      	str	r2, [r3, #0]
}
 80033fc:	bf00      	nop
 80033fe:	3714      	adds	r7, #20
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003408:	b480      	push	{r7}
 800340a:	b085      	sub	sp, #20
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	691b      	ldr	r3, [r3, #16]
 8003414:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	6892      	ldr	r2, [r2, #8]
 800341e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	6852      	ldr	r2, [r2, #4]
 8003428:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	429a      	cmp	r2, r3
 8003432:	d103      	bne.n	800343c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	689a      	ldr	r2, [r3, #8]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	1e5a      	subs	r2, r3, #1
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
}
 8003450:	4618      	mov	r0, r3
 8003452:	3714      	adds	r7, #20
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d10b      	bne.n	8003488 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003470:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003474:	f383 8811 	msr	BASEPRI, r3
 8003478:	f3bf 8f6f 	isb	sy
 800347c:	f3bf 8f4f 	dsb	sy
 8003480:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003482:	bf00      	nop
 8003484:	bf00      	nop
 8003486:	e7fd      	b.n	8003484 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003488:	f002 f87e 	bl	8005588 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003494:	68f9      	ldr	r1, [r7, #12]
 8003496:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003498:	fb01 f303 	mul.w	r3, r1, r3
 800349c:	441a      	add	r2, r3
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2200      	movs	r2, #0
 80034a6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034b8:	3b01      	subs	r3, #1
 80034ba:	68f9      	ldr	r1, [r7, #12]
 80034bc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80034be:	fb01 f303 	mul.w	r3, r1, r3
 80034c2:	441a      	add	r2, r3
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	22ff      	movs	r2, #255	@ 0xff
 80034cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	22ff      	movs	r2, #255	@ 0xff
 80034d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d114      	bne.n	8003508 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	691b      	ldr	r3, [r3, #16]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d01a      	beq.n	800351c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	3310      	adds	r3, #16
 80034ea:	4618      	mov	r0, r3
 80034ec:	f001 f94e 	bl	800478c <xTaskRemoveFromEventList>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d012      	beq.n	800351c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80034f6:	4b0d      	ldr	r3, [pc, #52]	@ (800352c <xQueueGenericReset+0xd0>)
 80034f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80034fc:	601a      	str	r2, [r3, #0]
 80034fe:	f3bf 8f4f 	dsb	sy
 8003502:	f3bf 8f6f 	isb	sy
 8003506:	e009      	b.n	800351c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	3310      	adds	r3, #16
 800350c:	4618      	mov	r0, r3
 800350e:	f7ff fef1 	bl	80032f4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	3324      	adds	r3, #36	@ 0x24
 8003516:	4618      	mov	r0, r3
 8003518:	f7ff feec 	bl	80032f4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800351c:	f002 f866 	bl	80055ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003520:	2301      	movs	r3, #1
}
 8003522:	4618      	mov	r0, r3
 8003524:	3710      	adds	r7, #16
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	e000ed04 	.word	0xe000ed04

08003530 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003530:	b580      	push	{r7, lr}
 8003532:	b08e      	sub	sp, #56	@ 0x38
 8003534:	af02      	add	r7, sp, #8
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	60b9      	str	r1, [r7, #8]
 800353a:	607a      	str	r2, [r7, #4]
 800353c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d10b      	bne.n	800355c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003548:	f383 8811 	msr	BASEPRI, r3
 800354c:	f3bf 8f6f 	isb	sy
 8003550:	f3bf 8f4f 	dsb	sy
 8003554:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003556:	bf00      	nop
 8003558:	bf00      	nop
 800355a:	e7fd      	b.n	8003558 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d10b      	bne.n	800357a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003566:	f383 8811 	msr	BASEPRI, r3
 800356a:	f3bf 8f6f 	isb	sy
 800356e:	f3bf 8f4f 	dsb	sy
 8003572:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003574:	bf00      	nop
 8003576:	bf00      	nop
 8003578:	e7fd      	b.n	8003576 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d002      	beq.n	8003586 <xQueueGenericCreateStatic+0x56>
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d001      	beq.n	800358a <xQueueGenericCreateStatic+0x5a>
 8003586:	2301      	movs	r3, #1
 8003588:	e000      	b.n	800358c <xQueueGenericCreateStatic+0x5c>
 800358a:	2300      	movs	r3, #0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d10b      	bne.n	80035a8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003594:	f383 8811 	msr	BASEPRI, r3
 8003598:	f3bf 8f6f 	isb	sy
 800359c:	f3bf 8f4f 	dsb	sy
 80035a0:	623b      	str	r3, [r7, #32]
}
 80035a2:	bf00      	nop
 80035a4:	bf00      	nop
 80035a6:	e7fd      	b.n	80035a4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d102      	bne.n	80035b4 <xQueueGenericCreateStatic+0x84>
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d101      	bne.n	80035b8 <xQueueGenericCreateStatic+0x88>
 80035b4:	2301      	movs	r3, #1
 80035b6:	e000      	b.n	80035ba <xQueueGenericCreateStatic+0x8a>
 80035b8:	2300      	movs	r3, #0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d10b      	bne.n	80035d6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80035be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035c2:	f383 8811 	msr	BASEPRI, r3
 80035c6:	f3bf 8f6f 	isb	sy
 80035ca:	f3bf 8f4f 	dsb	sy
 80035ce:	61fb      	str	r3, [r7, #28]
}
 80035d0:	bf00      	nop
 80035d2:	bf00      	nop
 80035d4:	e7fd      	b.n	80035d2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80035d6:	2350      	movs	r3, #80	@ 0x50
 80035d8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	2b50      	cmp	r3, #80	@ 0x50
 80035de:	d00b      	beq.n	80035f8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80035e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035e4:	f383 8811 	msr	BASEPRI, r3
 80035e8:	f3bf 8f6f 	isb	sy
 80035ec:	f3bf 8f4f 	dsb	sy
 80035f0:	61bb      	str	r3, [r7, #24]
}
 80035f2:	bf00      	nop
 80035f4:	bf00      	nop
 80035f6:	e7fd      	b.n	80035f4 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80035fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00d      	beq.n	800361e <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003602:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003604:	2201      	movs	r2, #1
 8003606:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800360a:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800360e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003610:	9300      	str	r3, [sp, #0]
 8003612:	4613      	mov	r3, r2
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	68b9      	ldr	r1, [r7, #8]
 8003618:	68f8      	ldr	r0, [r7, #12]
 800361a:	f000 f805 	bl	8003628 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800361e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003620:	4618      	mov	r0, r3
 8003622:	3730      	adds	r7, #48	@ 0x30
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	607a      	str	r2, [r7, #4]
 8003634:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d103      	bne.n	8003644 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	69ba      	ldr	r2, [r7, #24]
 8003640:	601a      	str	r2, [r3, #0]
 8003642:	e002      	b.n	800364a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	68fa      	ldr	r2, [r7, #12]
 800364e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	68ba      	ldr	r2, [r7, #8]
 8003654:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003656:	2101      	movs	r1, #1
 8003658:	69b8      	ldr	r0, [r7, #24]
 800365a:	f7ff feff 	bl	800345c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	78fa      	ldrb	r2, [r7, #3]
 8003662:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003666:	bf00      	nop
 8003668:	3710      	adds	r7, #16
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
	...

08003670 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b08e      	sub	sp, #56	@ 0x38
 8003674:	af00      	add	r7, sp, #0
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	607a      	str	r2, [r7, #4]
 800367c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800367e:	2300      	movs	r3, #0
 8003680:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003688:	2b00      	cmp	r3, #0
 800368a:	d10b      	bne.n	80036a4 <xQueueGenericSend+0x34>
	__asm volatile
 800368c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003690:	f383 8811 	msr	BASEPRI, r3
 8003694:	f3bf 8f6f 	isb	sy
 8003698:	f3bf 8f4f 	dsb	sy
 800369c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800369e:	bf00      	nop
 80036a0:	bf00      	nop
 80036a2:	e7fd      	b.n	80036a0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d103      	bne.n	80036b2 <xQueueGenericSend+0x42>
 80036aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d101      	bne.n	80036b6 <xQueueGenericSend+0x46>
 80036b2:	2301      	movs	r3, #1
 80036b4:	e000      	b.n	80036b8 <xQueueGenericSend+0x48>
 80036b6:	2300      	movs	r3, #0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d10b      	bne.n	80036d4 <xQueueGenericSend+0x64>
	__asm volatile
 80036bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036c0:	f383 8811 	msr	BASEPRI, r3
 80036c4:	f3bf 8f6f 	isb	sy
 80036c8:	f3bf 8f4f 	dsb	sy
 80036cc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80036ce:	bf00      	nop
 80036d0:	bf00      	nop
 80036d2:	e7fd      	b.n	80036d0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d103      	bne.n	80036e2 <xQueueGenericSend+0x72>
 80036da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d101      	bne.n	80036e6 <xQueueGenericSend+0x76>
 80036e2:	2301      	movs	r3, #1
 80036e4:	e000      	b.n	80036e8 <xQueueGenericSend+0x78>
 80036e6:	2300      	movs	r3, #0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d10b      	bne.n	8003704 <xQueueGenericSend+0x94>
	__asm volatile
 80036ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036f0:	f383 8811 	msr	BASEPRI, r3
 80036f4:	f3bf 8f6f 	isb	sy
 80036f8:	f3bf 8f4f 	dsb	sy
 80036fc:	623b      	str	r3, [r7, #32]
}
 80036fe:	bf00      	nop
 8003700:	bf00      	nop
 8003702:	e7fd      	b.n	8003700 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003704:	f001 fa0e 	bl	8004b24 <xTaskGetSchedulerState>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d102      	bne.n	8003714 <xQueueGenericSend+0xa4>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d101      	bne.n	8003718 <xQueueGenericSend+0xa8>
 8003714:	2301      	movs	r3, #1
 8003716:	e000      	b.n	800371a <xQueueGenericSend+0xaa>
 8003718:	2300      	movs	r3, #0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d10b      	bne.n	8003736 <xQueueGenericSend+0xc6>
	__asm volatile
 800371e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003722:	f383 8811 	msr	BASEPRI, r3
 8003726:	f3bf 8f6f 	isb	sy
 800372a:	f3bf 8f4f 	dsb	sy
 800372e:	61fb      	str	r3, [r7, #28]
}
 8003730:	bf00      	nop
 8003732:	bf00      	nop
 8003734:	e7fd      	b.n	8003732 <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003736:	f001 ff27 	bl	8005588 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800373a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800373c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800373e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003740:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003742:	429a      	cmp	r2, r3
 8003744:	d302      	bcc.n	800374c <xQueueGenericSend+0xdc>
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	2b02      	cmp	r3, #2
 800374a:	d129      	bne.n	80037a0 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800374c:	683a      	ldr	r2, [r7, #0]
 800374e:	68b9      	ldr	r1, [r7, #8]
 8003750:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003752:	f000 fa0d 	bl	8003b70 <prvCopyDataToQueue>
 8003756:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800375a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800375c:	2b00      	cmp	r3, #0
 800375e:	d010      	beq.n	8003782 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003762:	3324      	adds	r3, #36	@ 0x24
 8003764:	4618      	mov	r0, r3
 8003766:	f001 f811 	bl	800478c <xTaskRemoveFromEventList>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d013      	beq.n	8003798 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003770:	4b3f      	ldr	r3, [pc, #252]	@ (8003870 <xQueueGenericSend+0x200>)
 8003772:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003776:	601a      	str	r2, [r3, #0]
 8003778:	f3bf 8f4f 	dsb	sy
 800377c:	f3bf 8f6f 	isb	sy
 8003780:	e00a      	b.n	8003798 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003782:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003784:	2b00      	cmp	r3, #0
 8003786:	d007      	beq.n	8003798 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003788:	4b39      	ldr	r3, [pc, #228]	@ (8003870 <xQueueGenericSend+0x200>)
 800378a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800378e:	601a      	str	r2, [r3, #0]
 8003790:	f3bf 8f4f 	dsb	sy
 8003794:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003798:	f001 ff28 	bl	80055ec <vPortExitCritical>
				return pdPASS;
 800379c:	2301      	movs	r3, #1
 800379e:	e063      	b.n	8003868 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d103      	bne.n	80037ae <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80037a6:	f001 ff21 	bl	80055ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80037aa:	2300      	movs	r3, #0
 80037ac:	e05c      	b.n	8003868 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80037ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d106      	bne.n	80037c2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80037b4:	f107 0314 	add.w	r3, r7, #20
 80037b8:	4618      	mov	r0, r3
 80037ba:	f001 f84b 	bl	8004854 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80037be:	2301      	movs	r3, #1
 80037c0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80037c2:	f001 ff13 	bl	80055ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80037c6:	f000 fd9b 	bl	8004300 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80037ca:	f001 fedd 	bl	8005588 <vPortEnterCritical>
 80037ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80037d4:	b25b      	sxtb	r3, r3
 80037d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037da:	d103      	bne.n	80037e4 <xQueueGenericSend+0x174>
 80037dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80037e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037e6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80037ea:	b25b      	sxtb	r3, r3
 80037ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037f0:	d103      	bne.n	80037fa <xQueueGenericSend+0x18a>
 80037f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80037fa:	f001 fef7 	bl	80055ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80037fe:	1d3a      	adds	r2, r7, #4
 8003800:	f107 0314 	add.w	r3, r7, #20
 8003804:	4611      	mov	r1, r2
 8003806:	4618      	mov	r0, r3
 8003808:	f001 f83a 	bl	8004880 <xTaskCheckForTimeOut>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d124      	bne.n	800385c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003812:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003814:	f000 faa4 	bl	8003d60 <prvIsQueueFull>
 8003818:	4603      	mov	r3, r0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d018      	beq.n	8003850 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800381e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003820:	3310      	adds	r3, #16
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	4611      	mov	r1, r2
 8003826:	4618      	mov	r0, r3
 8003828:	f000 ff5e 	bl	80046e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800382c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800382e:	f000 fa2f 	bl	8003c90 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003832:	f000 fd73 	bl	800431c <xTaskResumeAll>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	f47f af7c 	bne.w	8003736 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800383e:	4b0c      	ldr	r3, [pc, #48]	@ (8003870 <xQueueGenericSend+0x200>)
 8003840:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003844:	601a      	str	r2, [r3, #0]
 8003846:	f3bf 8f4f 	dsb	sy
 800384a:	f3bf 8f6f 	isb	sy
 800384e:	e772      	b.n	8003736 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003850:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003852:	f000 fa1d 	bl	8003c90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003856:	f000 fd61 	bl	800431c <xTaskResumeAll>
 800385a:	e76c      	b.n	8003736 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800385c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800385e:	f000 fa17 	bl	8003c90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003862:	f000 fd5b 	bl	800431c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003866:	2300      	movs	r3, #0
		}
	}
}
 8003868:	4618      	mov	r0, r3
 800386a:	3738      	adds	r7, #56	@ 0x38
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}
 8003870:	e000ed04 	.word	0xe000ed04

08003874 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b08e      	sub	sp, #56	@ 0x38
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	607a      	str	r2, [r7, #4]
 8003880:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003888:	2b00      	cmp	r3, #0
 800388a:	d10b      	bne.n	80038a4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800388c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003890:	f383 8811 	msr	BASEPRI, r3
 8003894:	f3bf 8f6f 	isb	sy
 8003898:	f3bf 8f4f 	dsb	sy
 800389c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800389e:	bf00      	nop
 80038a0:	bf00      	nop
 80038a2:	e7fd      	b.n	80038a0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d103      	bne.n	80038b2 <xQueueGenericSendFromISR+0x3e>
 80038aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d101      	bne.n	80038b6 <xQueueGenericSendFromISR+0x42>
 80038b2:	2301      	movs	r3, #1
 80038b4:	e000      	b.n	80038b8 <xQueueGenericSendFromISR+0x44>
 80038b6:	2300      	movs	r3, #0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d10b      	bne.n	80038d4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80038bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038c0:	f383 8811 	msr	BASEPRI, r3
 80038c4:	f3bf 8f6f 	isb	sy
 80038c8:	f3bf 8f4f 	dsb	sy
 80038cc:	623b      	str	r3, [r7, #32]
}
 80038ce:	bf00      	nop
 80038d0:	bf00      	nop
 80038d2:	e7fd      	b.n	80038d0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d103      	bne.n	80038e2 <xQueueGenericSendFromISR+0x6e>
 80038da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d101      	bne.n	80038e6 <xQueueGenericSendFromISR+0x72>
 80038e2:	2301      	movs	r3, #1
 80038e4:	e000      	b.n	80038e8 <xQueueGenericSendFromISR+0x74>
 80038e6:	2300      	movs	r3, #0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d10b      	bne.n	8003904 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80038ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038f0:	f383 8811 	msr	BASEPRI, r3
 80038f4:	f3bf 8f6f 	isb	sy
 80038f8:	f3bf 8f4f 	dsb	sy
 80038fc:	61fb      	str	r3, [r7, #28]
}
 80038fe:	bf00      	nop
 8003900:	bf00      	nop
 8003902:	e7fd      	b.n	8003900 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003904:	f001 ff20 	bl	8005748 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003908:	f3ef 8211 	mrs	r2, BASEPRI
 800390c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003910:	f383 8811 	msr	BASEPRI, r3
 8003914:	f3bf 8f6f 	isb	sy
 8003918:	f3bf 8f4f 	dsb	sy
 800391c:	61ba      	str	r2, [r7, #24]
 800391e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003920:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003922:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003926:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800392a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800392c:	429a      	cmp	r2, r3
 800392e:	d302      	bcc.n	8003936 <xQueueGenericSendFromISR+0xc2>
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	2b02      	cmp	r3, #2
 8003934:	d12c      	bne.n	8003990 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003938:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800393c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003940:	683a      	ldr	r2, [r7, #0]
 8003942:	68b9      	ldr	r1, [r7, #8]
 8003944:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003946:	f000 f913 	bl	8003b70 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800394a:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800394e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003952:	d112      	bne.n	800397a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003958:	2b00      	cmp	r3, #0
 800395a:	d016      	beq.n	800398a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800395c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800395e:	3324      	adds	r3, #36	@ 0x24
 8003960:	4618      	mov	r0, r3
 8003962:	f000 ff13 	bl	800478c <xTaskRemoveFromEventList>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d00e      	beq.n	800398a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d00b      	beq.n	800398a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2201      	movs	r2, #1
 8003976:	601a      	str	r2, [r3, #0]
 8003978:	e007      	b.n	800398a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800397a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800397e:	3301      	adds	r3, #1
 8003980:	b2db      	uxtb	r3, r3
 8003982:	b25a      	sxtb	r2, r3
 8003984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003986:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800398a:	2301      	movs	r3, #1
 800398c:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800398e:	e001      	b.n	8003994 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003990:	2300      	movs	r3, #0
 8003992:	637b      	str	r3, [r7, #52]	@ 0x34
 8003994:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003996:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800399e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80039a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3738      	adds	r7, #56	@ 0x38
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
	...

080039ac <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b08c      	sub	sp, #48	@ 0x30
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80039b8:	2300      	movs	r3, #0
 80039ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80039c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d10b      	bne.n	80039de <xQueueReceive+0x32>
	__asm volatile
 80039c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039ca:	f383 8811 	msr	BASEPRI, r3
 80039ce:	f3bf 8f6f 	isb	sy
 80039d2:	f3bf 8f4f 	dsb	sy
 80039d6:	623b      	str	r3, [r7, #32]
}
 80039d8:	bf00      	nop
 80039da:	bf00      	nop
 80039dc:	e7fd      	b.n	80039da <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d103      	bne.n	80039ec <xQueueReceive+0x40>
 80039e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d101      	bne.n	80039f0 <xQueueReceive+0x44>
 80039ec:	2301      	movs	r3, #1
 80039ee:	e000      	b.n	80039f2 <xQueueReceive+0x46>
 80039f0:	2300      	movs	r3, #0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d10b      	bne.n	8003a0e <xQueueReceive+0x62>
	__asm volatile
 80039f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039fa:	f383 8811 	msr	BASEPRI, r3
 80039fe:	f3bf 8f6f 	isb	sy
 8003a02:	f3bf 8f4f 	dsb	sy
 8003a06:	61fb      	str	r3, [r7, #28]
}
 8003a08:	bf00      	nop
 8003a0a:	bf00      	nop
 8003a0c:	e7fd      	b.n	8003a0a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a0e:	f001 f889 	bl	8004b24 <xTaskGetSchedulerState>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d102      	bne.n	8003a1e <xQueueReceive+0x72>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d101      	bne.n	8003a22 <xQueueReceive+0x76>
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e000      	b.n	8003a24 <xQueueReceive+0x78>
 8003a22:	2300      	movs	r3, #0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d10b      	bne.n	8003a40 <xQueueReceive+0x94>
	__asm volatile
 8003a28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a2c:	f383 8811 	msr	BASEPRI, r3
 8003a30:	f3bf 8f6f 	isb	sy
 8003a34:	f3bf 8f4f 	dsb	sy
 8003a38:	61bb      	str	r3, [r7, #24]
}
 8003a3a:	bf00      	nop
 8003a3c:	bf00      	nop
 8003a3e:	e7fd      	b.n	8003a3c <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003a40:	f001 fda2 	bl	8005588 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a48:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d01f      	beq.n	8003a90 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003a50:	68b9      	ldr	r1, [r7, #8]
 8003a52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003a54:	f000 f8f6 	bl	8003c44 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a5a:	1e5a      	subs	r2, r3, #1
 8003a5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a5e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a62:	691b      	ldr	r3, [r3, #16]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d00f      	beq.n	8003a88 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a6a:	3310      	adds	r3, #16
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f000 fe8d 	bl	800478c <xTaskRemoveFromEventList>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d007      	beq.n	8003a88 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003a78:	4b3c      	ldr	r3, [pc, #240]	@ (8003b6c <xQueueReceive+0x1c0>)
 8003a7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a7e:	601a      	str	r2, [r3, #0]
 8003a80:	f3bf 8f4f 	dsb	sy
 8003a84:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003a88:	f001 fdb0 	bl	80055ec <vPortExitCritical>
				return pdPASS;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e069      	b.n	8003b64 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d103      	bne.n	8003a9e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003a96:	f001 fda9 	bl	80055ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	e062      	b.n	8003b64 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003a9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d106      	bne.n	8003ab2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003aa4:	f107 0310 	add.w	r3, r7, #16
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f000 fed3 	bl	8004854 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003ab2:	f001 fd9b 	bl	80055ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003ab6:	f000 fc23 	bl	8004300 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003aba:	f001 fd65 	bl	8005588 <vPortEnterCritical>
 8003abe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ac0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003ac4:	b25b      	sxtb	r3, r3
 8003ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aca:	d103      	bne.n	8003ad4 <xQueueReceive+0x128>
 8003acc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ad6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003ada:	b25b      	sxtb	r3, r3
 8003adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ae0:	d103      	bne.n	8003aea <xQueueReceive+0x13e>
 8003ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003aea:	f001 fd7f 	bl	80055ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003aee:	1d3a      	adds	r2, r7, #4
 8003af0:	f107 0310 	add.w	r3, r7, #16
 8003af4:	4611      	mov	r1, r2
 8003af6:	4618      	mov	r0, r3
 8003af8:	f000 fec2 	bl	8004880 <xTaskCheckForTimeOut>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d123      	bne.n	8003b4a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003b02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003b04:	f000 f916 	bl	8003d34 <prvIsQueueEmpty>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d017      	beq.n	8003b3e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003b0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b10:	3324      	adds	r3, #36	@ 0x24
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	4611      	mov	r1, r2
 8003b16:	4618      	mov	r0, r3
 8003b18:	f000 fde6 	bl	80046e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003b1c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003b1e:	f000 f8b7 	bl	8003c90 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003b22:	f000 fbfb 	bl	800431c <xTaskResumeAll>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d189      	bne.n	8003a40 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003b2c:	4b0f      	ldr	r3, [pc, #60]	@ (8003b6c <xQueueReceive+0x1c0>)
 8003b2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b32:	601a      	str	r2, [r3, #0]
 8003b34:	f3bf 8f4f 	dsb	sy
 8003b38:	f3bf 8f6f 	isb	sy
 8003b3c:	e780      	b.n	8003a40 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003b3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003b40:	f000 f8a6 	bl	8003c90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003b44:	f000 fbea 	bl	800431c <xTaskResumeAll>
 8003b48:	e77a      	b.n	8003a40 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003b4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003b4c:	f000 f8a0 	bl	8003c90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003b50:	f000 fbe4 	bl	800431c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003b54:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003b56:	f000 f8ed 	bl	8003d34 <prvIsQueueEmpty>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	f43f af6f 	beq.w	8003a40 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003b62:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3730      	adds	r7, #48	@ 0x30
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	e000ed04 	.word	0xe000ed04

08003b70 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b086      	sub	sp, #24
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b84:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d10d      	bne.n	8003baa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d14d      	bne.n	8003c32 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f000 ffe0 	bl	8004b60 <xTaskPriorityDisinherit>
 8003ba0:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	605a      	str	r2, [r3, #4]
 8003ba8:	e043      	b.n	8003c32 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d119      	bne.n	8003be4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6898      	ldr	r0, [r3, #8]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb8:	461a      	mov	r2, r3
 8003bba:	68b9      	ldr	r1, [r7, #8]
 8003bbc:	f002 f8a4 	bl	8005d08 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	689a      	ldr	r2, [r3, #8]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bc8:	441a      	add	r2, r3
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	689a      	ldr	r2, [r3, #8]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d32b      	bcc.n	8003c32 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	609a      	str	r2, [r3, #8]
 8003be2:	e026      	b.n	8003c32 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	68d8      	ldr	r0, [r3, #12]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bec:	461a      	mov	r2, r3
 8003bee:	68b9      	ldr	r1, [r7, #8]
 8003bf0:	f002 f88a 	bl	8005d08 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	68da      	ldr	r2, [r3, #12]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bfc:	425b      	negs	r3, r3
 8003bfe:	441a      	add	r2, r3
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	68da      	ldr	r2, [r3, #12]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d207      	bcs.n	8003c20 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	685a      	ldr	r2, [r3, #4]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c18:	425b      	negs	r3, r3
 8003c1a:	441a      	add	r2, r3
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d105      	bne.n	8003c32 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d002      	beq.n	8003c32 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	1c5a      	adds	r2, r3, #1
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003c3a:	697b      	ldr	r3, [r7, #20]
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3718      	adds	r7, #24
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d018      	beq.n	8003c88 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	68da      	ldr	r2, [r3, #12]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c5e:	441a      	add	r2, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	68da      	ldr	r2, [r3, #12]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d303      	bcc.n	8003c78 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	68d9      	ldr	r1, [r3, #12]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c80:	461a      	mov	r2, r3
 8003c82:	6838      	ldr	r0, [r7, #0]
 8003c84:	f002 f840 	bl	8005d08 <memcpy>
	}
}
 8003c88:	bf00      	nop
 8003c8a:	3708      	adds	r7, #8
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003c98:	f001 fc76 	bl	8005588 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003ca2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003ca4:	e011      	b.n	8003cca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d012      	beq.n	8003cd4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	3324      	adds	r3, #36	@ 0x24
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f000 fd6a 	bl	800478c <xTaskRemoveFromEventList>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d001      	beq.n	8003cc2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003cbe:	f000 fe43 	bl	8004948 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003cc2:	7bfb      	ldrb	r3, [r7, #15]
 8003cc4:	3b01      	subs	r3, #1
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003cca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	dce9      	bgt.n	8003ca6 <prvUnlockQueue+0x16>
 8003cd2:	e000      	b.n	8003cd6 <prvUnlockQueue+0x46>
					break;
 8003cd4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	22ff      	movs	r2, #255	@ 0xff
 8003cda:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003cde:	f001 fc85 	bl	80055ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003ce2:	f001 fc51 	bl	8005588 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003cec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003cee:	e011      	b.n	8003d14 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	691b      	ldr	r3, [r3, #16]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d012      	beq.n	8003d1e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	3310      	adds	r3, #16
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f000 fd45 	bl	800478c <xTaskRemoveFromEventList>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d001      	beq.n	8003d0c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003d08:	f000 fe1e 	bl	8004948 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003d0c:	7bbb      	ldrb	r3, [r7, #14]
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003d14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	dce9      	bgt.n	8003cf0 <prvUnlockQueue+0x60>
 8003d1c:	e000      	b.n	8003d20 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003d1e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	22ff      	movs	r2, #255	@ 0xff
 8003d24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003d28:	f001 fc60 	bl	80055ec <vPortExitCritical>
}
 8003d2c:	bf00      	nop
 8003d2e:	3710      	adds	r7, #16
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003d3c:	f001 fc24 	bl	8005588 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d102      	bne.n	8003d4e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	60fb      	str	r3, [r7, #12]
 8003d4c:	e001      	b.n	8003d52 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003d52:	f001 fc4b 	bl	80055ec <vPortExitCritical>

	return xReturn;
 8003d56:	68fb      	ldr	r3, [r7, #12]
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3710      	adds	r7, #16
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003d68:	f001 fc0e 	bl	8005588 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d102      	bne.n	8003d7e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	60fb      	str	r3, [r7, #12]
 8003d7c:	e001      	b.n	8003d82 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003d82:	f001 fc33 	bl	80055ec <vPortExitCritical>

	return xReturn;
 8003d86:	68fb      	ldr	r3, [r7, #12]
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3710      	adds	r7, #16
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003d90:	b480      	push	{r7}
 8003d92:	b085      	sub	sp, #20
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	60fb      	str	r3, [r7, #12]
 8003d9e:	e014      	b.n	8003dca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003da0:	4a0f      	ldr	r2, [pc, #60]	@ (8003de0 <vQueueAddToRegistry+0x50>)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d10b      	bne.n	8003dc4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003dac:	490c      	ldr	r1, [pc, #48]	@ (8003de0 <vQueueAddToRegistry+0x50>)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	683a      	ldr	r2, [r7, #0]
 8003db2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003db6:	4a0a      	ldr	r2, [pc, #40]	@ (8003de0 <vQueueAddToRegistry+0x50>)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	00db      	lsls	r3, r3, #3
 8003dbc:	4413      	add	r3, r2
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003dc2:	e006      	b.n	8003dd2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	3301      	adds	r3, #1
 8003dc8:	60fb      	str	r3, [r7, #12]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2b07      	cmp	r3, #7
 8003dce:	d9e7      	bls.n	8003da0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003dd0:	bf00      	nop
 8003dd2:	bf00      	nop
 8003dd4:	3714      	adds	r7, #20
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
 8003dde:	bf00      	nop
 8003de0:	200008b0 	.word	0x200008b0

08003de4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b086      	sub	sp, #24
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003df4:	f001 fbc8 	bl	8005588 <vPortEnterCritical>
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003dfe:	b25b      	sxtb	r3, r3
 8003e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e04:	d103      	bne.n	8003e0e <vQueueWaitForMessageRestricted+0x2a>
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003e14:	b25b      	sxtb	r3, r3
 8003e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e1a:	d103      	bne.n	8003e24 <vQueueWaitForMessageRestricted+0x40>
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003e24:	f001 fbe2 	bl	80055ec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d106      	bne.n	8003e3e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	3324      	adds	r3, #36	@ 0x24
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	68b9      	ldr	r1, [r7, #8]
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f000 fc7b 	bl	8004734 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003e3e:	6978      	ldr	r0, [r7, #20]
 8003e40:	f7ff ff26 	bl	8003c90 <prvUnlockQueue>
	}
 8003e44:	bf00      	nop
 8003e46:	3718      	adds	r7, #24
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b08e      	sub	sp, #56	@ 0x38
 8003e50:	af04      	add	r7, sp, #16
 8003e52:	60f8      	str	r0, [r7, #12]
 8003e54:	60b9      	str	r1, [r7, #8]
 8003e56:	607a      	str	r2, [r7, #4]
 8003e58:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003e5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d10b      	bne.n	8003e78 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003e60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e64:	f383 8811 	msr	BASEPRI, r3
 8003e68:	f3bf 8f6f 	isb	sy
 8003e6c:	f3bf 8f4f 	dsb	sy
 8003e70:	623b      	str	r3, [r7, #32]
}
 8003e72:	bf00      	nop
 8003e74:	bf00      	nop
 8003e76:	e7fd      	b.n	8003e74 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003e78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d10b      	bne.n	8003e96 <xTaskCreateStatic+0x4a>
	__asm volatile
 8003e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e82:	f383 8811 	msr	BASEPRI, r3
 8003e86:	f3bf 8f6f 	isb	sy
 8003e8a:	f3bf 8f4f 	dsb	sy
 8003e8e:	61fb      	str	r3, [r7, #28]
}
 8003e90:	bf00      	nop
 8003e92:	bf00      	nop
 8003e94:	e7fd      	b.n	8003e92 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003e96:	23a8      	movs	r3, #168	@ 0xa8
 8003e98:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	2ba8      	cmp	r3, #168	@ 0xa8
 8003e9e:	d00b      	beq.n	8003eb8 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003ea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ea4:	f383 8811 	msr	BASEPRI, r3
 8003ea8:	f3bf 8f6f 	isb	sy
 8003eac:	f3bf 8f4f 	dsb	sy
 8003eb0:	61bb      	str	r3, [r7, #24]
}
 8003eb2:	bf00      	nop
 8003eb4:	bf00      	nop
 8003eb6:	e7fd      	b.n	8003eb4 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003eb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d01e      	beq.n	8003efc <xTaskCreateStatic+0xb0>
 8003ebe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d01b      	beq.n	8003efc <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003ec4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ec6:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003ecc:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed0:	2202      	movs	r2, #2
 8003ed2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	9303      	str	r3, [sp, #12]
 8003eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003edc:	9302      	str	r3, [sp, #8]
 8003ede:	f107 0314 	add.w	r3, r7, #20
 8003ee2:	9301      	str	r3, [sp, #4]
 8003ee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ee6:	9300      	str	r3, [sp, #0]
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	68b9      	ldr	r1, [r7, #8]
 8003eee:	68f8      	ldr	r0, [r7, #12]
 8003ef0:	f000 f850 	bl	8003f94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003ef4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003ef6:	f000 f8ed 	bl	80040d4 <prvAddNewTaskToReadyList>
 8003efa:	e001      	b.n	8003f00 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8003efc:	2300      	movs	r3, #0
 8003efe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003f00:	697b      	ldr	r3, [r7, #20]
	}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3728      	adds	r7, #40	@ 0x28
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}

08003f0a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003f0a:	b580      	push	{r7, lr}
 8003f0c:	b08c      	sub	sp, #48	@ 0x30
 8003f0e:	af04      	add	r7, sp, #16
 8003f10:	60f8      	str	r0, [r7, #12]
 8003f12:	60b9      	str	r1, [r7, #8]
 8003f14:	603b      	str	r3, [r7, #0]
 8003f16:	4613      	mov	r3, r2
 8003f18:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f1a:	88fb      	ldrh	r3, [r7, #6]
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f001 fc54 	bl	80057cc <pvPortMalloc>
 8003f24:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d00e      	beq.n	8003f4a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003f2c:	20a8      	movs	r0, #168	@ 0xa8
 8003f2e:	f001 fc4d 	bl	80057cc <pvPortMalloc>
 8003f32:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d003      	beq.n	8003f42 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	697a      	ldr	r2, [r7, #20]
 8003f3e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003f40:	e005      	b.n	8003f4e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003f42:	6978      	ldr	r0, [r7, #20]
 8003f44:	f001 fd0a 	bl	800595c <vPortFree>
 8003f48:	e001      	b.n	8003f4e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d017      	beq.n	8003f84 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003f5c:	88fa      	ldrh	r2, [r7, #6]
 8003f5e:	2300      	movs	r3, #0
 8003f60:	9303      	str	r3, [sp, #12]
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	9302      	str	r3, [sp, #8]
 8003f66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f68:	9301      	str	r3, [sp, #4]
 8003f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f6c:	9300      	str	r3, [sp, #0]
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	68b9      	ldr	r1, [r7, #8]
 8003f72:	68f8      	ldr	r0, [r7, #12]
 8003f74:	f000 f80e 	bl	8003f94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003f78:	69f8      	ldr	r0, [r7, #28]
 8003f7a:	f000 f8ab 	bl	80040d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	61bb      	str	r3, [r7, #24]
 8003f82:	e002      	b.n	8003f8a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003f84:	f04f 33ff 	mov.w	r3, #4294967295
 8003f88:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003f8a:	69bb      	ldr	r3, [r7, #24]
	}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3720      	adds	r7, #32
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b088      	sub	sp, #32
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	607a      	str	r2, [r7, #4]
 8003fa0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fa4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	461a      	mov	r2, r3
 8003fac:	21a5      	movs	r1, #165	@ 0xa5
 8003fae:	f001 fe21 	bl	8005bf4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fb4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003fbc:	3b01      	subs	r3, #1
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	4413      	add	r3, r2
 8003fc2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003fc4:	69bb      	ldr	r3, [r7, #24]
 8003fc6:	f023 0307 	bic.w	r3, r3, #7
 8003fca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	f003 0307 	and.w	r3, r3, #7
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d00b      	beq.n	8003fee <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003fd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fda:	f383 8811 	msr	BASEPRI, r3
 8003fde:	f3bf 8f6f 	isb	sy
 8003fe2:	f3bf 8f4f 	dsb	sy
 8003fe6:	617b      	str	r3, [r7, #20]
}
 8003fe8:	bf00      	nop
 8003fea:	bf00      	nop
 8003fec:	e7fd      	b.n	8003fea <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003fee:	2300      	movs	r3, #0
 8003ff0:	61fb      	str	r3, [r7, #28]
 8003ff2:	e012      	b.n	800401a <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003ff4:	68ba      	ldr	r2, [r7, #8]
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	4413      	add	r3, r2
 8003ffa:	7819      	ldrb	r1, [r3, #0]
 8003ffc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	4413      	add	r3, r2
 8004002:	3334      	adds	r3, #52	@ 0x34
 8004004:	460a      	mov	r2, r1
 8004006:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004008:	68ba      	ldr	r2, [r7, #8]
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	4413      	add	r3, r2
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d006      	beq.n	8004022 <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	3301      	adds	r3, #1
 8004018:	61fb      	str	r3, [r7, #28]
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	2b0f      	cmp	r3, #15
 800401e:	d9e9      	bls.n	8003ff4 <prvInitialiseNewTask+0x60>
 8004020:	e000      	b.n	8004024 <prvInitialiseNewTask+0x90>
		{
			break;
 8004022:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004026:	2200      	movs	r2, #0
 8004028:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800402c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800402e:	2b37      	cmp	r3, #55	@ 0x37
 8004030:	d901      	bls.n	8004036 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004032:	2337      	movs	r3, #55	@ 0x37
 8004034:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004038:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800403a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800403c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800403e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004040:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004044:	2200      	movs	r2, #0
 8004046:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800404a:	3304      	adds	r3, #4
 800404c:	4618      	mov	r0, r3
 800404e:	f7ff f971 	bl	8003334 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004054:	3318      	adds	r3, #24
 8004056:	4618      	mov	r0, r3
 8004058:	f7ff f96c 	bl	8003334 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800405c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800405e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004060:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004064:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800406a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800406c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800406e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004070:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004074:	2200      	movs	r2, #0
 8004076:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800407a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800407c:	2200      	movs	r2, #0
 800407e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004084:	3354      	adds	r3, #84	@ 0x54
 8004086:	224c      	movs	r2, #76	@ 0x4c
 8004088:	2100      	movs	r1, #0
 800408a:	4618      	mov	r0, r3
 800408c:	f001 fdb2 	bl	8005bf4 <memset>
 8004090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004092:	4a0d      	ldr	r2, [pc, #52]	@ (80040c8 <prvInitialiseNewTask+0x134>)
 8004094:	659a      	str	r2, [r3, #88]	@ 0x58
 8004096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004098:	4a0c      	ldr	r2, [pc, #48]	@ (80040cc <prvInitialiseNewTask+0x138>)
 800409a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800409c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800409e:	4a0c      	ldr	r2, [pc, #48]	@ (80040d0 <prvInitialiseNewTask+0x13c>)
 80040a0:	661a      	str	r2, [r3, #96]	@ 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80040a2:	683a      	ldr	r2, [r7, #0]
 80040a4:	68f9      	ldr	r1, [r7, #12]
 80040a6:	69b8      	ldr	r0, [r7, #24]
 80040a8:	f001 f93e 	bl	8005328 <pxPortInitialiseStack>
 80040ac:	4602      	mov	r2, r0
 80040ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040b0:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80040b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d002      	beq.n	80040be <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80040b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80040be:	bf00      	nop
 80040c0:	3720      	adds	r7, #32
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	20001b3c 	.word	0x20001b3c
 80040cc:	20001ba4 	.word	0x20001ba4
 80040d0:	20001c0c 	.word	0x20001c0c

080040d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b082      	sub	sp, #8
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80040dc:	f001 fa54 	bl	8005588 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80040e0:	4b2d      	ldr	r3, [pc, #180]	@ (8004198 <prvAddNewTaskToReadyList+0xc4>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	3301      	adds	r3, #1
 80040e6:	4a2c      	ldr	r2, [pc, #176]	@ (8004198 <prvAddNewTaskToReadyList+0xc4>)
 80040e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80040ea:	4b2c      	ldr	r3, [pc, #176]	@ (800419c <prvAddNewTaskToReadyList+0xc8>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d109      	bne.n	8004106 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80040f2:	4a2a      	ldr	r2, [pc, #168]	@ (800419c <prvAddNewTaskToReadyList+0xc8>)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80040f8:	4b27      	ldr	r3, [pc, #156]	@ (8004198 <prvAddNewTaskToReadyList+0xc4>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d110      	bne.n	8004122 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004100:	f000 fc46 	bl	8004990 <prvInitialiseTaskLists>
 8004104:	e00d      	b.n	8004122 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004106:	4b26      	ldr	r3, [pc, #152]	@ (80041a0 <prvAddNewTaskToReadyList+0xcc>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d109      	bne.n	8004122 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800410e:	4b23      	ldr	r3, [pc, #140]	@ (800419c <prvAddNewTaskToReadyList+0xc8>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004118:	429a      	cmp	r2, r3
 800411a:	d802      	bhi.n	8004122 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800411c:	4a1f      	ldr	r2, [pc, #124]	@ (800419c <prvAddNewTaskToReadyList+0xc8>)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004122:	4b20      	ldr	r3, [pc, #128]	@ (80041a4 <prvAddNewTaskToReadyList+0xd0>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	3301      	adds	r3, #1
 8004128:	4a1e      	ldr	r2, [pc, #120]	@ (80041a4 <prvAddNewTaskToReadyList+0xd0>)
 800412a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800412c:	4b1d      	ldr	r3, [pc, #116]	@ (80041a4 <prvAddNewTaskToReadyList+0xd0>)
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004138:	4b1b      	ldr	r3, [pc, #108]	@ (80041a8 <prvAddNewTaskToReadyList+0xd4>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	429a      	cmp	r2, r3
 800413e:	d903      	bls.n	8004148 <prvAddNewTaskToReadyList+0x74>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004144:	4a18      	ldr	r2, [pc, #96]	@ (80041a8 <prvAddNewTaskToReadyList+0xd4>)
 8004146:	6013      	str	r3, [r2, #0]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800414c:	4613      	mov	r3, r2
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	4413      	add	r3, r2
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	4a15      	ldr	r2, [pc, #84]	@ (80041ac <prvAddNewTaskToReadyList+0xd8>)
 8004156:	441a      	add	r2, r3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	3304      	adds	r3, #4
 800415c:	4619      	mov	r1, r3
 800415e:	4610      	mov	r0, r2
 8004160:	f7ff f8f5 	bl	800334e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004164:	f001 fa42 	bl	80055ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004168:	4b0d      	ldr	r3, [pc, #52]	@ (80041a0 <prvAddNewTaskToReadyList+0xcc>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d00e      	beq.n	800418e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004170:	4b0a      	ldr	r3, [pc, #40]	@ (800419c <prvAddNewTaskToReadyList+0xc8>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800417a:	429a      	cmp	r2, r3
 800417c:	d207      	bcs.n	800418e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800417e:	4b0c      	ldr	r3, [pc, #48]	@ (80041b0 <prvAddNewTaskToReadyList+0xdc>)
 8004180:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004184:	601a      	str	r2, [r3, #0]
 8004186:	f3bf 8f4f 	dsb	sy
 800418a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800418e:	bf00      	nop
 8004190:	3708      	adds	r7, #8
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	20000dc4 	.word	0x20000dc4
 800419c:	200008f0 	.word	0x200008f0
 80041a0:	20000dd0 	.word	0x20000dd0
 80041a4:	20000de0 	.word	0x20000de0
 80041a8:	20000dcc 	.word	0x20000dcc
 80041ac:	200008f4 	.word	0x200008f4
 80041b0:	e000ed04 	.word	0xe000ed04

080041b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80041bc:	2300      	movs	r3, #0
 80041be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d018      	beq.n	80041f8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80041c6:	4b14      	ldr	r3, [pc, #80]	@ (8004218 <vTaskDelay+0x64>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d00b      	beq.n	80041e6 <vTaskDelay+0x32>
	__asm volatile
 80041ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041d2:	f383 8811 	msr	BASEPRI, r3
 80041d6:	f3bf 8f6f 	isb	sy
 80041da:	f3bf 8f4f 	dsb	sy
 80041de:	60bb      	str	r3, [r7, #8]
}
 80041e0:	bf00      	nop
 80041e2:	bf00      	nop
 80041e4:	e7fd      	b.n	80041e2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80041e6:	f000 f88b 	bl	8004300 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80041ea:	2100      	movs	r1, #0
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f000 fd27 	bl	8004c40 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80041f2:	f000 f893 	bl	800431c <xTaskResumeAll>
 80041f6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d107      	bne.n	800420e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80041fe:	4b07      	ldr	r3, [pc, #28]	@ (800421c <vTaskDelay+0x68>)
 8004200:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004204:	601a      	str	r2, [r3, #0]
 8004206:	f3bf 8f4f 	dsb	sy
 800420a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800420e:	bf00      	nop
 8004210:	3710      	adds	r7, #16
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	20000dec 	.word	0x20000dec
 800421c:	e000ed04 	.word	0xe000ed04

08004220 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b08a      	sub	sp, #40	@ 0x28
 8004224:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004226:	2300      	movs	r3, #0
 8004228:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800422a:	2300      	movs	r3, #0
 800422c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800422e:	463a      	mov	r2, r7
 8004230:	1d39      	adds	r1, r7, #4
 8004232:	f107 0308 	add.w	r3, r7, #8
 8004236:	4618      	mov	r0, r3
 8004238:	f7ff f828 	bl	800328c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800423c:	6839      	ldr	r1, [r7, #0]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	68ba      	ldr	r2, [r7, #8]
 8004242:	9202      	str	r2, [sp, #8]
 8004244:	9301      	str	r3, [sp, #4]
 8004246:	2300      	movs	r3, #0
 8004248:	9300      	str	r3, [sp, #0]
 800424a:	2300      	movs	r3, #0
 800424c:	460a      	mov	r2, r1
 800424e:	4924      	ldr	r1, [pc, #144]	@ (80042e0 <vTaskStartScheduler+0xc0>)
 8004250:	4824      	ldr	r0, [pc, #144]	@ (80042e4 <vTaskStartScheduler+0xc4>)
 8004252:	f7ff fdfb 	bl	8003e4c <xTaskCreateStatic>
 8004256:	4603      	mov	r3, r0
 8004258:	4a23      	ldr	r2, [pc, #140]	@ (80042e8 <vTaskStartScheduler+0xc8>)
 800425a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800425c:	4b22      	ldr	r3, [pc, #136]	@ (80042e8 <vTaskStartScheduler+0xc8>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d002      	beq.n	800426a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004264:	2301      	movs	r3, #1
 8004266:	617b      	str	r3, [r7, #20]
 8004268:	e001      	b.n	800426e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800426a:	2300      	movs	r3, #0
 800426c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	2b01      	cmp	r3, #1
 8004272:	d102      	bne.n	800427a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004274:	f000 fd38 	bl	8004ce8 <xTimerCreateTimerTask>
 8004278:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	2b01      	cmp	r3, #1
 800427e:	d11b      	bne.n	80042b8 <vTaskStartScheduler+0x98>
	__asm volatile
 8004280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004284:	f383 8811 	msr	BASEPRI, r3
 8004288:	f3bf 8f6f 	isb	sy
 800428c:	f3bf 8f4f 	dsb	sy
 8004290:	613b      	str	r3, [r7, #16]
}
 8004292:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004294:	4b15      	ldr	r3, [pc, #84]	@ (80042ec <vTaskStartScheduler+0xcc>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	3354      	adds	r3, #84	@ 0x54
 800429a:	4a15      	ldr	r2, [pc, #84]	@ (80042f0 <vTaskStartScheduler+0xd0>)
 800429c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800429e:	4b15      	ldr	r3, [pc, #84]	@ (80042f4 <vTaskStartScheduler+0xd4>)
 80042a0:	f04f 32ff 	mov.w	r2, #4294967295
 80042a4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80042a6:	4b14      	ldr	r3, [pc, #80]	@ (80042f8 <vTaskStartScheduler+0xd8>)
 80042a8:	2201      	movs	r2, #1
 80042aa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80042ac:	4b13      	ldr	r3, [pc, #76]	@ (80042fc <vTaskStartScheduler+0xdc>)
 80042ae:	2200      	movs	r2, #0
 80042b0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80042b2:	f001 f8c5 	bl	8005440 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80042b6:	e00f      	b.n	80042d8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042be:	d10b      	bne.n	80042d8 <vTaskStartScheduler+0xb8>
	__asm volatile
 80042c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042c4:	f383 8811 	msr	BASEPRI, r3
 80042c8:	f3bf 8f6f 	isb	sy
 80042cc:	f3bf 8f4f 	dsb	sy
 80042d0:	60fb      	str	r3, [r7, #12]
}
 80042d2:	bf00      	nop
 80042d4:	bf00      	nop
 80042d6:	e7fd      	b.n	80042d4 <vTaskStartScheduler+0xb4>
}
 80042d8:	bf00      	nop
 80042da:	3718      	adds	r7, #24
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	080065e4 	.word	0x080065e4
 80042e4:	08004961 	.word	0x08004961
 80042e8:	20000de8 	.word	0x20000de8
 80042ec:	200008f0 	.word	0x200008f0
 80042f0:	20000010 	.word	0x20000010
 80042f4:	20000de4 	.word	0x20000de4
 80042f8:	20000dd0 	.word	0x20000dd0
 80042fc:	20000dc8 	.word	0x20000dc8

08004300 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004300:	b480      	push	{r7}
 8004302:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004304:	4b04      	ldr	r3, [pc, #16]	@ (8004318 <vTaskSuspendAll+0x18>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	3301      	adds	r3, #1
 800430a:	4a03      	ldr	r2, [pc, #12]	@ (8004318 <vTaskSuspendAll+0x18>)
 800430c:	6013      	str	r3, [r2, #0]
}
 800430e:	bf00      	nop
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr
 8004318:	20000dec 	.word	0x20000dec

0800431c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004322:	2300      	movs	r3, #0
 8004324:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004326:	2300      	movs	r3, #0
 8004328:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800432a:	4b42      	ldr	r3, [pc, #264]	@ (8004434 <xTaskResumeAll+0x118>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d10b      	bne.n	800434a <xTaskResumeAll+0x2e>
	__asm volatile
 8004332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004336:	f383 8811 	msr	BASEPRI, r3
 800433a:	f3bf 8f6f 	isb	sy
 800433e:	f3bf 8f4f 	dsb	sy
 8004342:	603b      	str	r3, [r7, #0]
}
 8004344:	bf00      	nop
 8004346:	bf00      	nop
 8004348:	e7fd      	b.n	8004346 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800434a:	f001 f91d 	bl	8005588 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800434e:	4b39      	ldr	r3, [pc, #228]	@ (8004434 <xTaskResumeAll+0x118>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	3b01      	subs	r3, #1
 8004354:	4a37      	ldr	r2, [pc, #220]	@ (8004434 <xTaskResumeAll+0x118>)
 8004356:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004358:	4b36      	ldr	r3, [pc, #216]	@ (8004434 <xTaskResumeAll+0x118>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d162      	bne.n	8004426 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004360:	4b35      	ldr	r3, [pc, #212]	@ (8004438 <xTaskResumeAll+0x11c>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d05e      	beq.n	8004426 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004368:	e02f      	b.n	80043ca <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800436a:	4b34      	ldr	r3, [pc, #208]	@ (800443c <xTaskResumeAll+0x120>)
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	3318      	adds	r3, #24
 8004376:	4618      	mov	r0, r3
 8004378:	f7ff f846 	bl	8003408 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	3304      	adds	r3, #4
 8004380:	4618      	mov	r0, r3
 8004382:	f7ff f841 	bl	8003408 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800438a:	4b2d      	ldr	r3, [pc, #180]	@ (8004440 <xTaskResumeAll+0x124>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	429a      	cmp	r2, r3
 8004390:	d903      	bls.n	800439a <xTaskResumeAll+0x7e>
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004396:	4a2a      	ldr	r2, [pc, #168]	@ (8004440 <xTaskResumeAll+0x124>)
 8004398:	6013      	str	r3, [r2, #0]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800439e:	4613      	mov	r3, r2
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	4413      	add	r3, r2
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	4a27      	ldr	r2, [pc, #156]	@ (8004444 <xTaskResumeAll+0x128>)
 80043a8:	441a      	add	r2, r3
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	3304      	adds	r3, #4
 80043ae:	4619      	mov	r1, r3
 80043b0:	4610      	mov	r0, r2
 80043b2:	f7fe ffcc 	bl	800334e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043ba:	4b23      	ldr	r3, [pc, #140]	@ (8004448 <xTaskResumeAll+0x12c>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d302      	bcc.n	80043ca <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80043c4:	4b21      	ldr	r3, [pc, #132]	@ (800444c <xTaskResumeAll+0x130>)
 80043c6:	2201      	movs	r2, #1
 80043c8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80043ca:	4b1c      	ldr	r3, [pc, #112]	@ (800443c <xTaskResumeAll+0x120>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d1cb      	bne.n	800436a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d001      	beq.n	80043dc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80043d8:	f000 fb7e 	bl	8004ad8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80043dc:	4b1c      	ldr	r3, [pc, #112]	@ (8004450 <xTaskResumeAll+0x134>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d010      	beq.n	800440a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80043e8:	f000 f858 	bl	800449c <xTaskIncrementTick>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d002      	beq.n	80043f8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80043f2:	4b16      	ldr	r3, [pc, #88]	@ (800444c <xTaskResumeAll+0x130>)
 80043f4:	2201      	movs	r2, #1
 80043f6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	3b01      	subs	r3, #1
 80043fc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d1f1      	bne.n	80043e8 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8004404:	4b12      	ldr	r3, [pc, #72]	@ (8004450 <xTaskResumeAll+0x134>)
 8004406:	2200      	movs	r2, #0
 8004408:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800440a:	4b10      	ldr	r3, [pc, #64]	@ (800444c <xTaskResumeAll+0x130>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d009      	beq.n	8004426 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004412:	2301      	movs	r3, #1
 8004414:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004416:	4b0f      	ldr	r3, [pc, #60]	@ (8004454 <xTaskResumeAll+0x138>)
 8004418:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800441c:	601a      	str	r2, [r3, #0]
 800441e:	f3bf 8f4f 	dsb	sy
 8004422:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004426:	f001 f8e1 	bl	80055ec <vPortExitCritical>

	return xAlreadyYielded;
 800442a:	68bb      	ldr	r3, [r7, #8]
}
 800442c:	4618      	mov	r0, r3
 800442e:	3710      	adds	r7, #16
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}
 8004434:	20000dec 	.word	0x20000dec
 8004438:	20000dc4 	.word	0x20000dc4
 800443c:	20000d84 	.word	0x20000d84
 8004440:	20000dcc 	.word	0x20000dcc
 8004444:	200008f4 	.word	0x200008f4
 8004448:	200008f0 	.word	0x200008f0
 800444c:	20000dd8 	.word	0x20000dd8
 8004450:	20000dd4 	.word	0x20000dd4
 8004454:	e000ed04 	.word	0xe000ed04

08004458 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800445e:	4b05      	ldr	r3, [pc, #20]	@ (8004474 <xTaskGetTickCount+0x1c>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004464:	687b      	ldr	r3, [r7, #4]
}
 8004466:	4618      	mov	r0, r3
 8004468:	370c      	adds	r7, #12
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr
 8004472:	bf00      	nop
 8004474:	20000dc8 	.word	0x20000dc8

08004478 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b082      	sub	sp, #8
 800447c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800447e:	f001 f963 	bl	8005748 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8004482:	2300      	movs	r3, #0
 8004484:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8004486:	4b04      	ldr	r3, [pc, #16]	@ (8004498 <xTaskGetTickCountFromISR+0x20>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800448c:	683b      	ldr	r3, [r7, #0]
}
 800448e:	4618      	mov	r0, r3
 8004490:	3708      	adds	r7, #8
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	20000dc8 	.word	0x20000dc8

0800449c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b086      	sub	sp, #24
 80044a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80044a2:	2300      	movs	r3, #0
 80044a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044a6:	4b52      	ldr	r3, [pc, #328]	@ (80045f0 <xTaskIncrementTick+0x154>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	f040 808f 	bne.w	80045ce <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80044b0:	4b50      	ldr	r3, [pc, #320]	@ (80045f4 <xTaskIncrementTick+0x158>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	3301      	adds	r3, #1
 80044b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80044b8:	4a4e      	ldr	r2, [pc, #312]	@ (80045f4 <xTaskIncrementTick+0x158>)
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d121      	bne.n	8004508 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80044c4:	4b4c      	ldr	r3, [pc, #304]	@ (80045f8 <xTaskIncrementTick+0x15c>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00b      	beq.n	80044e6 <xTaskIncrementTick+0x4a>
	__asm volatile
 80044ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044d2:	f383 8811 	msr	BASEPRI, r3
 80044d6:	f3bf 8f6f 	isb	sy
 80044da:	f3bf 8f4f 	dsb	sy
 80044de:	603b      	str	r3, [r7, #0]
}
 80044e0:	bf00      	nop
 80044e2:	bf00      	nop
 80044e4:	e7fd      	b.n	80044e2 <xTaskIncrementTick+0x46>
 80044e6:	4b44      	ldr	r3, [pc, #272]	@ (80045f8 <xTaskIncrementTick+0x15c>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	60fb      	str	r3, [r7, #12]
 80044ec:	4b43      	ldr	r3, [pc, #268]	@ (80045fc <xTaskIncrementTick+0x160>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a41      	ldr	r2, [pc, #260]	@ (80045f8 <xTaskIncrementTick+0x15c>)
 80044f2:	6013      	str	r3, [r2, #0]
 80044f4:	4a41      	ldr	r2, [pc, #260]	@ (80045fc <xTaskIncrementTick+0x160>)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6013      	str	r3, [r2, #0]
 80044fa:	4b41      	ldr	r3, [pc, #260]	@ (8004600 <xTaskIncrementTick+0x164>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	3301      	adds	r3, #1
 8004500:	4a3f      	ldr	r2, [pc, #252]	@ (8004600 <xTaskIncrementTick+0x164>)
 8004502:	6013      	str	r3, [r2, #0]
 8004504:	f000 fae8 	bl	8004ad8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004508:	4b3e      	ldr	r3, [pc, #248]	@ (8004604 <xTaskIncrementTick+0x168>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	693a      	ldr	r2, [r7, #16]
 800450e:	429a      	cmp	r2, r3
 8004510:	d34e      	bcc.n	80045b0 <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004512:	4b39      	ldr	r3, [pc, #228]	@ (80045f8 <xTaskIncrementTick+0x15c>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d101      	bne.n	8004520 <xTaskIncrementTick+0x84>
 800451c:	2301      	movs	r3, #1
 800451e:	e000      	b.n	8004522 <xTaskIncrementTick+0x86>
 8004520:	2300      	movs	r3, #0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d004      	beq.n	8004530 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004526:	4b37      	ldr	r3, [pc, #220]	@ (8004604 <xTaskIncrementTick+0x168>)
 8004528:	f04f 32ff 	mov.w	r2, #4294967295
 800452c:	601a      	str	r2, [r3, #0]
					break;
 800452e:	e03f      	b.n	80045b0 <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004530:	4b31      	ldr	r3, [pc, #196]	@ (80045f8 <xTaskIncrementTick+0x15c>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004540:	693a      	ldr	r2, [r7, #16]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	429a      	cmp	r2, r3
 8004546:	d203      	bcs.n	8004550 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004548:	4a2e      	ldr	r2, [pc, #184]	@ (8004604 <xTaskIncrementTick+0x168>)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6013      	str	r3, [r2, #0]
						break;
 800454e:	e02f      	b.n	80045b0 <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	3304      	adds	r3, #4
 8004554:	4618      	mov	r0, r3
 8004556:	f7fe ff57 	bl	8003408 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800455e:	2b00      	cmp	r3, #0
 8004560:	d004      	beq.n	800456c <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	3318      	adds	r3, #24
 8004566:	4618      	mov	r0, r3
 8004568:	f7fe ff4e 	bl	8003408 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004570:	4b25      	ldr	r3, [pc, #148]	@ (8004608 <xTaskIncrementTick+0x16c>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	429a      	cmp	r2, r3
 8004576:	d903      	bls.n	8004580 <xTaskIncrementTick+0xe4>
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800457c:	4a22      	ldr	r2, [pc, #136]	@ (8004608 <xTaskIncrementTick+0x16c>)
 800457e:	6013      	str	r3, [r2, #0]
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004584:	4613      	mov	r3, r2
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	4413      	add	r3, r2
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	4a1f      	ldr	r2, [pc, #124]	@ (800460c <xTaskIncrementTick+0x170>)
 800458e:	441a      	add	r2, r3
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	3304      	adds	r3, #4
 8004594:	4619      	mov	r1, r3
 8004596:	4610      	mov	r0, r2
 8004598:	f7fe fed9 	bl	800334e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045a0:	4b1b      	ldr	r3, [pc, #108]	@ (8004610 <xTaskIncrementTick+0x174>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d3b3      	bcc.n	8004512 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80045aa:	2301      	movs	r3, #1
 80045ac:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045ae:	e7b0      	b.n	8004512 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80045b0:	4b17      	ldr	r3, [pc, #92]	@ (8004610 <xTaskIncrementTick+0x174>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045b6:	4915      	ldr	r1, [pc, #84]	@ (800460c <xTaskIncrementTick+0x170>)
 80045b8:	4613      	mov	r3, r2
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	4413      	add	r3, r2
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	440b      	add	r3, r1
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d907      	bls.n	80045d8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80045c8:	2301      	movs	r3, #1
 80045ca:	617b      	str	r3, [r7, #20]
 80045cc:	e004      	b.n	80045d8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80045ce:	4b11      	ldr	r3, [pc, #68]	@ (8004614 <xTaskIncrementTick+0x178>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	3301      	adds	r3, #1
 80045d4:	4a0f      	ldr	r2, [pc, #60]	@ (8004614 <xTaskIncrementTick+0x178>)
 80045d6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80045d8:	4b0f      	ldr	r3, [pc, #60]	@ (8004618 <xTaskIncrementTick+0x17c>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d001      	beq.n	80045e4 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 80045e0:	2301      	movs	r3, #1
 80045e2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80045e4:	697b      	ldr	r3, [r7, #20]
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3718      	adds	r7, #24
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	20000dec 	.word	0x20000dec
 80045f4:	20000dc8 	.word	0x20000dc8
 80045f8:	20000d7c 	.word	0x20000d7c
 80045fc:	20000d80 	.word	0x20000d80
 8004600:	20000ddc 	.word	0x20000ddc
 8004604:	20000de4 	.word	0x20000de4
 8004608:	20000dcc 	.word	0x20000dcc
 800460c:	200008f4 	.word	0x200008f4
 8004610:	200008f0 	.word	0x200008f0
 8004614:	20000dd4 	.word	0x20000dd4
 8004618:	20000dd8 	.word	0x20000dd8

0800461c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800461c:	b480      	push	{r7}
 800461e:	b085      	sub	sp, #20
 8004620:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004622:	4b2b      	ldr	r3, [pc, #172]	@ (80046d0 <vTaskSwitchContext+0xb4>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d003      	beq.n	8004632 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800462a:	4b2a      	ldr	r3, [pc, #168]	@ (80046d4 <vTaskSwitchContext+0xb8>)
 800462c:	2201      	movs	r2, #1
 800462e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004630:	e047      	b.n	80046c2 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8004632:	4b28      	ldr	r3, [pc, #160]	@ (80046d4 <vTaskSwitchContext+0xb8>)
 8004634:	2200      	movs	r2, #0
 8004636:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004638:	4b27      	ldr	r3, [pc, #156]	@ (80046d8 <vTaskSwitchContext+0xbc>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	60fb      	str	r3, [r7, #12]
 800463e:	e011      	b.n	8004664 <vTaskSwitchContext+0x48>
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d10b      	bne.n	800465e <vTaskSwitchContext+0x42>
	__asm volatile
 8004646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800464a:	f383 8811 	msr	BASEPRI, r3
 800464e:	f3bf 8f6f 	isb	sy
 8004652:	f3bf 8f4f 	dsb	sy
 8004656:	607b      	str	r3, [r7, #4]
}
 8004658:	bf00      	nop
 800465a:	bf00      	nop
 800465c:	e7fd      	b.n	800465a <vTaskSwitchContext+0x3e>
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	3b01      	subs	r3, #1
 8004662:	60fb      	str	r3, [r7, #12]
 8004664:	491d      	ldr	r1, [pc, #116]	@ (80046dc <vTaskSwitchContext+0xc0>)
 8004666:	68fa      	ldr	r2, [r7, #12]
 8004668:	4613      	mov	r3, r2
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	4413      	add	r3, r2
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	440b      	add	r3, r1
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d0e3      	beq.n	8004640 <vTaskSwitchContext+0x24>
 8004678:	68fa      	ldr	r2, [r7, #12]
 800467a:	4613      	mov	r3, r2
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	4413      	add	r3, r2
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	4a16      	ldr	r2, [pc, #88]	@ (80046dc <vTaskSwitchContext+0xc0>)
 8004684:	4413      	add	r3, r2
 8004686:	60bb      	str	r3, [r7, #8]
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	685a      	ldr	r2, [r3, #4]
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	605a      	str	r2, [r3, #4]
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	685a      	ldr	r2, [r3, #4]
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	3308      	adds	r3, #8
 800469a:	429a      	cmp	r2, r3
 800469c:	d104      	bne.n	80046a8 <vTaskSwitchContext+0x8c>
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	685a      	ldr	r2, [r3, #4]
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	605a      	str	r2, [r3, #4]
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	4a0c      	ldr	r2, [pc, #48]	@ (80046e0 <vTaskSwitchContext+0xc4>)
 80046b0:	6013      	str	r3, [r2, #0]
 80046b2:	4a09      	ldr	r2, [pc, #36]	@ (80046d8 <vTaskSwitchContext+0xbc>)
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80046b8:	4b09      	ldr	r3, [pc, #36]	@ (80046e0 <vTaskSwitchContext+0xc4>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	3354      	adds	r3, #84	@ 0x54
 80046be:	4a09      	ldr	r2, [pc, #36]	@ (80046e4 <vTaskSwitchContext+0xc8>)
 80046c0:	6013      	str	r3, [r2, #0]
}
 80046c2:	bf00      	nop
 80046c4:	3714      	adds	r7, #20
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr
 80046ce:	bf00      	nop
 80046d0:	20000dec 	.word	0x20000dec
 80046d4:	20000dd8 	.word	0x20000dd8
 80046d8:	20000dcc 	.word	0x20000dcc
 80046dc:	200008f4 	.word	0x200008f4
 80046e0:	200008f0 	.word	0x200008f0
 80046e4:	20000010 	.word	0x20000010

080046e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b084      	sub	sp, #16
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d10b      	bne.n	8004710 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80046f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046fc:	f383 8811 	msr	BASEPRI, r3
 8004700:	f3bf 8f6f 	isb	sy
 8004704:	f3bf 8f4f 	dsb	sy
 8004708:	60fb      	str	r3, [r7, #12]
}
 800470a:	bf00      	nop
 800470c:	bf00      	nop
 800470e:	e7fd      	b.n	800470c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004710:	4b07      	ldr	r3, [pc, #28]	@ (8004730 <vTaskPlaceOnEventList+0x48>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	3318      	adds	r3, #24
 8004716:	4619      	mov	r1, r3
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f7fe fe3c 	bl	8003396 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800471e:	2101      	movs	r1, #1
 8004720:	6838      	ldr	r0, [r7, #0]
 8004722:	f000 fa8d 	bl	8004c40 <prvAddCurrentTaskToDelayedList>
}
 8004726:	bf00      	nop
 8004728:	3710      	adds	r7, #16
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
 800472e:	bf00      	nop
 8004730:	200008f0 	.word	0x200008f0

08004734 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004734:	b580      	push	{r7, lr}
 8004736:	b086      	sub	sp, #24
 8004738:	af00      	add	r7, sp, #0
 800473a:	60f8      	str	r0, [r7, #12]
 800473c:	60b9      	str	r1, [r7, #8]
 800473e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d10b      	bne.n	800475e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800474a:	f383 8811 	msr	BASEPRI, r3
 800474e:	f3bf 8f6f 	isb	sy
 8004752:	f3bf 8f4f 	dsb	sy
 8004756:	617b      	str	r3, [r7, #20]
}
 8004758:	bf00      	nop
 800475a:	bf00      	nop
 800475c:	e7fd      	b.n	800475a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800475e:	4b0a      	ldr	r3, [pc, #40]	@ (8004788 <vTaskPlaceOnEventListRestricted+0x54>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	3318      	adds	r3, #24
 8004764:	4619      	mov	r1, r3
 8004766:	68f8      	ldr	r0, [r7, #12]
 8004768:	f7fe fdf1 	bl	800334e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d002      	beq.n	8004778 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004772:	f04f 33ff 	mov.w	r3, #4294967295
 8004776:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004778:	6879      	ldr	r1, [r7, #4]
 800477a:	68b8      	ldr	r0, [r7, #8]
 800477c:	f000 fa60 	bl	8004c40 <prvAddCurrentTaskToDelayedList>
	}
 8004780:	bf00      	nop
 8004782:	3718      	adds	r7, #24
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}
 8004788:	200008f0 	.word	0x200008f0

0800478c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b086      	sub	sp, #24
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d10b      	bne.n	80047ba <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80047a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047a6:	f383 8811 	msr	BASEPRI, r3
 80047aa:	f3bf 8f6f 	isb	sy
 80047ae:	f3bf 8f4f 	dsb	sy
 80047b2:	60fb      	str	r3, [r7, #12]
}
 80047b4:	bf00      	nop
 80047b6:	bf00      	nop
 80047b8:	e7fd      	b.n	80047b6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	3318      	adds	r3, #24
 80047be:	4618      	mov	r0, r3
 80047c0:	f7fe fe22 	bl	8003408 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047c4:	4b1d      	ldr	r3, [pc, #116]	@ (800483c <xTaskRemoveFromEventList+0xb0>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d11d      	bne.n	8004808 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	3304      	adds	r3, #4
 80047d0:	4618      	mov	r0, r3
 80047d2:	f7fe fe19 	bl	8003408 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047da:	4b19      	ldr	r3, [pc, #100]	@ (8004840 <xTaskRemoveFromEventList+0xb4>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	429a      	cmp	r2, r3
 80047e0:	d903      	bls.n	80047ea <xTaskRemoveFromEventList+0x5e>
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047e6:	4a16      	ldr	r2, [pc, #88]	@ (8004840 <xTaskRemoveFromEventList+0xb4>)
 80047e8:	6013      	str	r3, [r2, #0]
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047ee:	4613      	mov	r3, r2
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	4413      	add	r3, r2
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	4a13      	ldr	r2, [pc, #76]	@ (8004844 <xTaskRemoveFromEventList+0xb8>)
 80047f8:	441a      	add	r2, r3
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	3304      	adds	r3, #4
 80047fe:	4619      	mov	r1, r3
 8004800:	4610      	mov	r0, r2
 8004802:	f7fe fda4 	bl	800334e <vListInsertEnd>
 8004806:	e005      	b.n	8004814 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	3318      	adds	r3, #24
 800480c:	4619      	mov	r1, r3
 800480e:	480e      	ldr	r0, [pc, #56]	@ (8004848 <xTaskRemoveFromEventList+0xbc>)
 8004810:	f7fe fd9d 	bl	800334e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004818:	4b0c      	ldr	r3, [pc, #48]	@ (800484c <xTaskRemoveFromEventList+0xc0>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800481e:	429a      	cmp	r2, r3
 8004820:	d905      	bls.n	800482e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004822:	2301      	movs	r3, #1
 8004824:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004826:	4b0a      	ldr	r3, [pc, #40]	@ (8004850 <xTaskRemoveFromEventList+0xc4>)
 8004828:	2201      	movs	r2, #1
 800482a:	601a      	str	r2, [r3, #0]
 800482c:	e001      	b.n	8004832 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800482e:	2300      	movs	r3, #0
 8004830:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004832:	697b      	ldr	r3, [r7, #20]
}
 8004834:	4618      	mov	r0, r3
 8004836:	3718      	adds	r7, #24
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}
 800483c:	20000dec 	.word	0x20000dec
 8004840:	20000dcc 	.word	0x20000dcc
 8004844:	200008f4 	.word	0x200008f4
 8004848:	20000d84 	.word	0x20000d84
 800484c:	200008f0 	.word	0x200008f0
 8004850:	20000dd8 	.word	0x20000dd8

08004854 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800485c:	4b06      	ldr	r3, [pc, #24]	@ (8004878 <vTaskInternalSetTimeOutState+0x24>)
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004864:	4b05      	ldr	r3, [pc, #20]	@ (800487c <vTaskInternalSetTimeOutState+0x28>)
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	605a      	str	r2, [r3, #4]
}
 800486c:	bf00      	nop
 800486e:	370c      	adds	r7, #12
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr
 8004878:	20000ddc 	.word	0x20000ddc
 800487c:	20000dc8 	.word	0x20000dc8

08004880 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b088      	sub	sp, #32
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d10b      	bne.n	80048a8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004894:	f383 8811 	msr	BASEPRI, r3
 8004898:	f3bf 8f6f 	isb	sy
 800489c:	f3bf 8f4f 	dsb	sy
 80048a0:	613b      	str	r3, [r7, #16]
}
 80048a2:	bf00      	nop
 80048a4:	bf00      	nop
 80048a6:	e7fd      	b.n	80048a4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d10b      	bne.n	80048c6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80048ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048b2:	f383 8811 	msr	BASEPRI, r3
 80048b6:	f3bf 8f6f 	isb	sy
 80048ba:	f3bf 8f4f 	dsb	sy
 80048be:	60fb      	str	r3, [r7, #12]
}
 80048c0:	bf00      	nop
 80048c2:	bf00      	nop
 80048c4:	e7fd      	b.n	80048c2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80048c6:	f000 fe5f 	bl	8005588 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80048ca:	4b1d      	ldr	r3, [pc, #116]	@ (8004940 <xTaskCheckForTimeOut+0xc0>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	69ba      	ldr	r2, [r7, #24]
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048e2:	d102      	bne.n	80048ea <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80048e4:	2300      	movs	r3, #0
 80048e6:	61fb      	str	r3, [r7, #28]
 80048e8:	e023      	b.n	8004932 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	4b15      	ldr	r3, [pc, #84]	@ (8004944 <xTaskCheckForTimeOut+0xc4>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d007      	beq.n	8004906 <xTaskCheckForTimeOut+0x86>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	69ba      	ldr	r2, [r7, #24]
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d302      	bcc.n	8004906 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004900:	2301      	movs	r3, #1
 8004902:	61fb      	str	r3, [r7, #28]
 8004904:	e015      	b.n	8004932 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	697a      	ldr	r2, [r7, #20]
 800490c:	429a      	cmp	r2, r3
 800490e:	d20b      	bcs.n	8004928 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	1ad2      	subs	r2, r2, r3
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f7ff ff99 	bl	8004854 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004922:	2300      	movs	r3, #0
 8004924:	61fb      	str	r3, [r7, #28]
 8004926:	e004      	b.n	8004932 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	2200      	movs	r2, #0
 800492c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800492e:	2301      	movs	r3, #1
 8004930:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004932:	f000 fe5b 	bl	80055ec <vPortExitCritical>

	return xReturn;
 8004936:	69fb      	ldr	r3, [r7, #28]
}
 8004938:	4618      	mov	r0, r3
 800493a:	3720      	adds	r7, #32
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}
 8004940:	20000dc8 	.word	0x20000dc8
 8004944:	20000ddc 	.word	0x20000ddc

08004948 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004948:	b480      	push	{r7}
 800494a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800494c:	4b03      	ldr	r3, [pc, #12]	@ (800495c <vTaskMissedYield+0x14>)
 800494e:	2201      	movs	r2, #1
 8004950:	601a      	str	r2, [r3, #0]
}
 8004952:	bf00      	nop
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr
 800495c:	20000dd8 	.word	0x20000dd8

08004960 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b082      	sub	sp, #8
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004968:	f000 f852 	bl	8004a10 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800496c:	4b06      	ldr	r3, [pc, #24]	@ (8004988 <prvIdleTask+0x28>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2b01      	cmp	r3, #1
 8004972:	d9f9      	bls.n	8004968 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004974:	4b05      	ldr	r3, [pc, #20]	@ (800498c <prvIdleTask+0x2c>)
 8004976:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800497a:	601a      	str	r2, [r3, #0]
 800497c:	f3bf 8f4f 	dsb	sy
 8004980:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004984:	e7f0      	b.n	8004968 <prvIdleTask+0x8>
 8004986:	bf00      	nop
 8004988:	200008f4 	.word	0x200008f4
 800498c:	e000ed04 	.word	0xe000ed04

08004990 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b082      	sub	sp, #8
 8004994:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004996:	2300      	movs	r3, #0
 8004998:	607b      	str	r3, [r7, #4]
 800499a:	e00c      	b.n	80049b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	4613      	mov	r3, r2
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	4413      	add	r3, r2
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	4a12      	ldr	r2, [pc, #72]	@ (80049f0 <prvInitialiseTaskLists+0x60>)
 80049a8:	4413      	add	r3, r2
 80049aa:	4618      	mov	r0, r3
 80049ac:	f7fe fca2 	bl	80032f4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	3301      	adds	r3, #1
 80049b4:	607b      	str	r3, [r7, #4]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2b37      	cmp	r3, #55	@ 0x37
 80049ba:	d9ef      	bls.n	800499c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80049bc:	480d      	ldr	r0, [pc, #52]	@ (80049f4 <prvInitialiseTaskLists+0x64>)
 80049be:	f7fe fc99 	bl	80032f4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80049c2:	480d      	ldr	r0, [pc, #52]	@ (80049f8 <prvInitialiseTaskLists+0x68>)
 80049c4:	f7fe fc96 	bl	80032f4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80049c8:	480c      	ldr	r0, [pc, #48]	@ (80049fc <prvInitialiseTaskLists+0x6c>)
 80049ca:	f7fe fc93 	bl	80032f4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80049ce:	480c      	ldr	r0, [pc, #48]	@ (8004a00 <prvInitialiseTaskLists+0x70>)
 80049d0:	f7fe fc90 	bl	80032f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80049d4:	480b      	ldr	r0, [pc, #44]	@ (8004a04 <prvInitialiseTaskLists+0x74>)
 80049d6:	f7fe fc8d 	bl	80032f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80049da:	4b0b      	ldr	r3, [pc, #44]	@ (8004a08 <prvInitialiseTaskLists+0x78>)
 80049dc:	4a05      	ldr	r2, [pc, #20]	@ (80049f4 <prvInitialiseTaskLists+0x64>)
 80049de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80049e0:	4b0a      	ldr	r3, [pc, #40]	@ (8004a0c <prvInitialiseTaskLists+0x7c>)
 80049e2:	4a05      	ldr	r2, [pc, #20]	@ (80049f8 <prvInitialiseTaskLists+0x68>)
 80049e4:	601a      	str	r2, [r3, #0]
}
 80049e6:	bf00      	nop
 80049e8:	3708      	adds	r7, #8
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	200008f4 	.word	0x200008f4
 80049f4:	20000d54 	.word	0x20000d54
 80049f8:	20000d68 	.word	0x20000d68
 80049fc:	20000d84 	.word	0x20000d84
 8004a00:	20000d98 	.word	0x20000d98
 8004a04:	20000db0 	.word	0x20000db0
 8004a08:	20000d7c 	.word	0x20000d7c
 8004a0c:	20000d80 	.word	0x20000d80

08004a10 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b082      	sub	sp, #8
 8004a14:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004a16:	e019      	b.n	8004a4c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004a18:	f000 fdb6 	bl	8005588 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004a1c:	4b10      	ldr	r3, [pc, #64]	@ (8004a60 <prvCheckTasksWaitingTermination+0x50>)
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	68db      	ldr	r3, [r3, #12]
 8004a22:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	3304      	adds	r3, #4
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f7fe fced 	bl	8003408 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004a2e:	4b0d      	ldr	r3, [pc, #52]	@ (8004a64 <prvCheckTasksWaitingTermination+0x54>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	3b01      	subs	r3, #1
 8004a34:	4a0b      	ldr	r2, [pc, #44]	@ (8004a64 <prvCheckTasksWaitingTermination+0x54>)
 8004a36:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004a38:	4b0b      	ldr	r3, [pc, #44]	@ (8004a68 <prvCheckTasksWaitingTermination+0x58>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	3b01      	subs	r3, #1
 8004a3e:	4a0a      	ldr	r2, [pc, #40]	@ (8004a68 <prvCheckTasksWaitingTermination+0x58>)
 8004a40:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004a42:	f000 fdd3 	bl	80055ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f000 f810 	bl	8004a6c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004a4c:	4b06      	ldr	r3, [pc, #24]	@ (8004a68 <prvCheckTasksWaitingTermination+0x58>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d1e1      	bne.n	8004a18 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004a54:	bf00      	nop
 8004a56:	bf00      	nop
 8004a58:	3708      	adds	r7, #8
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	20000d98 	.word	0x20000d98
 8004a64:	20000dc4 	.word	0x20000dc4
 8004a68:	20000dac 	.word	0x20000dac

08004a6c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b084      	sub	sp, #16
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	3354      	adds	r3, #84	@ 0x54
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f001 f8c3 	bl	8005c04 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d108      	bne.n	8004a9a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f000 ff65 	bl	800595c <vPortFree>
				vPortFree( pxTCB );
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f000 ff62 	bl	800595c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004a98:	e019      	b.n	8004ace <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d103      	bne.n	8004aac <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f000 ff59 	bl	800595c <vPortFree>
	}
 8004aaa:	e010      	b.n	8004ace <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004ab2:	2b02      	cmp	r3, #2
 8004ab4:	d00b      	beq.n	8004ace <prvDeleteTCB+0x62>
	__asm volatile
 8004ab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aba:	f383 8811 	msr	BASEPRI, r3
 8004abe:	f3bf 8f6f 	isb	sy
 8004ac2:	f3bf 8f4f 	dsb	sy
 8004ac6:	60fb      	str	r3, [r7, #12]
}
 8004ac8:	bf00      	nop
 8004aca:	bf00      	nop
 8004acc:	e7fd      	b.n	8004aca <prvDeleteTCB+0x5e>
	}
 8004ace:	bf00      	nop
 8004ad0:	3710      	adds	r7, #16
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
	...

08004ad8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ade:	4b0f      	ldr	r3, [pc, #60]	@ (8004b1c <prvResetNextTaskUnblockTime+0x44>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d101      	bne.n	8004aec <prvResetNextTaskUnblockTime+0x14>
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e000      	b.n	8004aee <prvResetNextTaskUnblockTime+0x16>
 8004aec:	2300      	movs	r3, #0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d004      	beq.n	8004afc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004af2:	4b0b      	ldr	r3, [pc, #44]	@ (8004b20 <prvResetNextTaskUnblockTime+0x48>)
 8004af4:	f04f 32ff 	mov.w	r2, #4294967295
 8004af8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004afa:	e008      	b.n	8004b0e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004afc:	4b07      	ldr	r3, [pc, #28]	@ (8004b1c <prvResetNextTaskUnblockTime+0x44>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	4a05      	ldr	r2, [pc, #20]	@ (8004b20 <prvResetNextTaskUnblockTime+0x48>)
 8004b0c:	6013      	str	r3, [r2, #0]
}
 8004b0e:	bf00      	nop
 8004b10:	370c      	adds	r7, #12
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr
 8004b1a:	bf00      	nop
 8004b1c:	20000d7c 	.word	0x20000d7c
 8004b20:	20000de4 	.word	0x20000de4

08004b24 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004b2a:	4b0b      	ldr	r3, [pc, #44]	@ (8004b58 <xTaskGetSchedulerState+0x34>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d102      	bne.n	8004b38 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004b32:	2301      	movs	r3, #1
 8004b34:	607b      	str	r3, [r7, #4]
 8004b36:	e008      	b.n	8004b4a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b38:	4b08      	ldr	r3, [pc, #32]	@ (8004b5c <xTaskGetSchedulerState+0x38>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d102      	bne.n	8004b46 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004b40:	2302      	movs	r3, #2
 8004b42:	607b      	str	r3, [r7, #4]
 8004b44:	e001      	b.n	8004b4a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004b46:	2300      	movs	r3, #0
 8004b48:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004b4a:	687b      	ldr	r3, [r7, #4]
	}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	370c      	adds	r7, #12
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr
 8004b58:	20000dd0 	.word	0x20000dd0
 8004b5c:	20000dec 	.word	0x20000dec

08004b60 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b086      	sub	sp, #24
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d058      	beq.n	8004c28 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004b76:	4b2f      	ldr	r3, [pc, #188]	@ (8004c34 <xTaskPriorityDisinherit+0xd4>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	693a      	ldr	r2, [r7, #16]
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d00b      	beq.n	8004b98 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004b80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b84:	f383 8811 	msr	BASEPRI, r3
 8004b88:	f3bf 8f6f 	isb	sy
 8004b8c:	f3bf 8f4f 	dsb	sy
 8004b90:	60fb      	str	r3, [r7, #12]
}
 8004b92:	bf00      	nop
 8004b94:	bf00      	nop
 8004b96:	e7fd      	b.n	8004b94 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d10b      	bne.n	8004bb8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004ba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ba4:	f383 8811 	msr	BASEPRI, r3
 8004ba8:	f3bf 8f6f 	isb	sy
 8004bac:	f3bf 8f4f 	dsb	sy
 8004bb0:	60bb      	str	r3, [r7, #8]
}
 8004bb2:	bf00      	nop
 8004bb4:	bf00      	nop
 8004bb6:	e7fd      	b.n	8004bb4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bbc:	1e5a      	subs	r2, r3, #1
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d02c      	beq.n	8004c28 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d128      	bne.n	8004c28 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	3304      	adds	r3, #4
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f7fe fc14 	bl	8003408 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bec:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bf8:	4b0f      	ldr	r3, [pc, #60]	@ (8004c38 <xTaskPriorityDisinherit+0xd8>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d903      	bls.n	8004c08 <xTaskPriorityDisinherit+0xa8>
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c04:	4a0c      	ldr	r2, [pc, #48]	@ (8004c38 <xTaskPriorityDisinherit+0xd8>)
 8004c06:	6013      	str	r3, [r2, #0]
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	4413      	add	r3, r2
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	4a09      	ldr	r2, [pc, #36]	@ (8004c3c <xTaskPriorityDisinherit+0xdc>)
 8004c16:	441a      	add	r2, r3
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	3304      	adds	r3, #4
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	4610      	mov	r0, r2
 8004c20:	f7fe fb95 	bl	800334e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004c24:	2301      	movs	r3, #1
 8004c26:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004c28:	697b      	ldr	r3, [r7, #20]
	}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3718      	adds	r7, #24
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	200008f0 	.word	0x200008f0
 8004c38:	20000dcc 	.word	0x20000dcc
 8004c3c:	200008f4 	.word	0x200008f4

08004c40 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b084      	sub	sp, #16
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004c4a:	4b21      	ldr	r3, [pc, #132]	@ (8004cd0 <prvAddCurrentTaskToDelayedList+0x90>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c50:	4b20      	ldr	r3, [pc, #128]	@ (8004cd4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	3304      	adds	r3, #4
 8004c56:	4618      	mov	r0, r3
 8004c58:	f7fe fbd6 	bl	8003408 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c62:	d10a      	bne.n	8004c7a <prvAddCurrentTaskToDelayedList+0x3a>
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d007      	beq.n	8004c7a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c6a:	4b1a      	ldr	r3, [pc, #104]	@ (8004cd4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	3304      	adds	r3, #4
 8004c70:	4619      	mov	r1, r3
 8004c72:	4819      	ldr	r0, [pc, #100]	@ (8004cd8 <prvAddCurrentTaskToDelayedList+0x98>)
 8004c74:	f7fe fb6b 	bl	800334e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004c78:	e026      	b.n	8004cc8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004c7a:	68fa      	ldr	r2, [r7, #12]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4413      	add	r3, r2
 8004c80:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004c82:	4b14      	ldr	r3, [pc, #80]	@ (8004cd4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	68ba      	ldr	r2, [r7, #8]
 8004c88:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004c8a:	68ba      	ldr	r2, [r7, #8]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d209      	bcs.n	8004ca6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c92:	4b12      	ldr	r3, [pc, #72]	@ (8004cdc <prvAddCurrentTaskToDelayedList+0x9c>)
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	4b0f      	ldr	r3, [pc, #60]	@ (8004cd4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	3304      	adds	r3, #4
 8004c9c:	4619      	mov	r1, r3
 8004c9e:	4610      	mov	r0, r2
 8004ca0:	f7fe fb79 	bl	8003396 <vListInsert>
}
 8004ca4:	e010      	b.n	8004cc8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ca6:	4b0e      	ldr	r3, [pc, #56]	@ (8004ce0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	4b0a      	ldr	r3, [pc, #40]	@ (8004cd4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	3304      	adds	r3, #4
 8004cb0:	4619      	mov	r1, r3
 8004cb2:	4610      	mov	r0, r2
 8004cb4:	f7fe fb6f 	bl	8003396 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004cb8:	4b0a      	ldr	r3, [pc, #40]	@ (8004ce4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	68ba      	ldr	r2, [r7, #8]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d202      	bcs.n	8004cc8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004cc2:	4a08      	ldr	r2, [pc, #32]	@ (8004ce4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	6013      	str	r3, [r2, #0]
}
 8004cc8:	bf00      	nop
 8004cca:	3710      	adds	r7, #16
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	20000dc8 	.word	0x20000dc8
 8004cd4:	200008f0 	.word	0x200008f0
 8004cd8:	20000db0 	.word	0x20000db0
 8004cdc:	20000d80 	.word	0x20000d80
 8004ce0:	20000d7c 	.word	0x20000d7c
 8004ce4:	20000de4 	.word	0x20000de4

08004ce8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b08a      	sub	sp, #40	@ 0x28
 8004cec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004cf2:	f000 fad9 	bl	80052a8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004cf6:	4b1d      	ldr	r3, [pc, #116]	@ (8004d6c <xTimerCreateTimerTask+0x84>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d021      	beq.n	8004d42 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004d02:	2300      	movs	r3, #0
 8004d04:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004d06:	1d3a      	adds	r2, r7, #4
 8004d08:	f107 0108 	add.w	r1, r7, #8
 8004d0c:	f107 030c 	add.w	r3, r7, #12
 8004d10:	4618      	mov	r0, r3
 8004d12:	f7fe fad5 	bl	80032c0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004d16:	6879      	ldr	r1, [r7, #4]
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	68fa      	ldr	r2, [r7, #12]
 8004d1c:	9202      	str	r2, [sp, #8]
 8004d1e:	9301      	str	r3, [sp, #4]
 8004d20:	2302      	movs	r3, #2
 8004d22:	9300      	str	r3, [sp, #0]
 8004d24:	2300      	movs	r3, #0
 8004d26:	460a      	mov	r2, r1
 8004d28:	4911      	ldr	r1, [pc, #68]	@ (8004d70 <xTimerCreateTimerTask+0x88>)
 8004d2a:	4812      	ldr	r0, [pc, #72]	@ (8004d74 <xTimerCreateTimerTask+0x8c>)
 8004d2c:	f7ff f88e 	bl	8003e4c <xTaskCreateStatic>
 8004d30:	4603      	mov	r3, r0
 8004d32:	4a11      	ldr	r2, [pc, #68]	@ (8004d78 <xTimerCreateTimerTask+0x90>)
 8004d34:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004d36:	4b10      	ldr	r3, [pc, #64]	@ (8004d78 <xTimerCreateTimerTask+0x90>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d001      	beq.n	8004d42 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d10b      	bne.n	8004d60 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004d48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d4c:	f383 8811 	msr	BASEPRI, r3
 8004d50:	f3bf 8f6f 	isb	sy
 8004d54:	f3bf 8f4f 	dsb	sy
 8004d58:	613b      	str	r3, [r7, #16]
}
 8004d5a:	bf00      	nop
 8004d5c:	bf00      	nop
 8004d5e:	e7fd      	b.n	8004d5c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004d60:	697b      	ldr	r3, [r7, #20]
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3718      	adds	r7, #24
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	bf00      	nop
 8004d6c:	20000e20 	.word	0x20000e20
 8004d70:	080065ec 	.word	0x080065ec
 8004d74:	08004e9d 	.word	0x08004e9d
 8004d78:	20000e24 	.word	0x20000e24

08004d7c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b08a      	sub	sp, #40	@ 0x28
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	60f8      	str	r0, [r7, #12]
 8004d84:	60b9      	str	r1, [r7, #8]
 8004d86:	607a      	str	r2, [r7, #4]
 8004d88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d10b      	bne.n	8004dac <xTimerGenericCommand+0x30>
	__asm volatile
 8004d94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d98:	f383 8811 	msr	BASEPRI, r3
 8004d9c:	f3bf 8f6f 	isb	sy
 8004da0:	f3bf 8f4f 	dsb	sy
 8004da4:	623b      	str	r3, [r7, #32]
}
 8004da6:	bf00      	nop
 8004da8:	bf00      	nop
 8004daa:	e7fd      	b.n	8004da8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004dac:	4b19      	ldr	r3, [pc, #100]	@ (8004e14 <xTimerGenericCommand+0x98>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d02a      	beq.n	8004e0a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	2b05      	cmp	r3, #5
 8004dc4:	dc18      	bgt.n	8004df8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004dc6:	f7ff fead 	bl	8004b24 <xTaskGetSchedulerState>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b02      	cmp	r3, #2
 8004dce:	d109      	bne.n	8004de4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004dd0:	4b10      	ldr	r3, [pc, #64]	@ (8004e14 <xTimerGenericCommand+0x98>)
 8004dd2:	6818      	ldr	r0, [r3, #0]
 8004dd4:	f107 0110 	add.w	r1, r7, #16
 8004dd8:	2300      	movs	r3, #0
 8004dda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ddc:	f7fe fc48 	bl	8003670 <xQueueGenericSend>
 8004de0:	6278      	str	r0, [r7, #36]	@ 0x24
 8004de2:	e012      	b.n	8004e0a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004de4:	4b0b      	ldr	r3, [pc, #44]	@ (8004e14 <xTimerGenericCommand+0x98>)
 8004de6:	6818      	ldr	r0, [r3, #0]
 8004de8:	f107 0110 	add.w	r1, r7, #16
 8004dec:	2300      	movs	r3, #0
 8004dee:	2200      	movs	r2, #0
 8004df0:	f7fe fc3e 	bl	8003670 <xQueueGenericSend>
 8004df4:	6278      	str	r0, [r7, #36]	@ 0x24
 8004df6:	e008      	b.n	8004e0a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004df8:	4b06      	ldr	r3, [pc, #24]	@ (8004e14 <xTimerGenericCommand+0x98>)
 8004dfa:	6818      	ldr	r0, [r3, #0]
 8004dfc:	f107 0110 	add.w	r1, r7, #16
 8004e00:	2300      	movs	r3, #0
 8004e02:	683a      	ldr	r2, [r7, #0]
 8004e04:	f7fe fd36 	bl	8003874 <xQueueGenericSendFromISR>
 8004e08:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3728      	adds	r7, #40	@ 0x28
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}
 8004e14:	20000e20 	.word	0x20000e20

08004e18 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b088      	sub	sp, #32
 8004e1c:	af02      	add	r7, sp, #8
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004e22:	4b1d      	ldr	r3, [pc, #116]	@ (8004e98 <prvProcessExpiredTimer+0x80>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	3304      	adds	r3, #4
 8004e30:	4618      	mov	r0, r3
 8004e32:	f7fe fae9 	bl	8003408 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	69db      	ldr	r3, [r3, #28]
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d123      	bne.n	8004e86 <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	699a      	ldr	r2, [r3, #24]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	18d1      	adds	r1, r2, r3
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	683a      	ldr	r2, [r7, #0]
 8004e4a:	6978      	ldr	r0, [r7, #20]
 8004e4c:	f000 f8cc 	bl	8004fe8 <prvInsertTimerInActiveList>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d017      	beq.n	8004e86 <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004e56:	2300      	movs	r3, #0
 8004e58:	9300      	str	r3, [sp, #0]
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	2100      	movs	r1, #0
 8004e60:	6978      	ldr	r0, [r7, #20]
 8004e62:	f7ff ff8b 	bl	8004d7c <xTimerGenericCommand>
 8004e66:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d10b      	bne.n	8004e86 <prvProcessExpiredTimer+0x6e>
	__asm volatile
 8004e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e72:	f383 8811 	msr	BASEPRI, r3
 8004e76:	f3bf 8f6f 	isb	sy
 8004e7a:	f3bf 8f4f 	dsb	sy
 8004e7e:	60fb      	str	r3, [r7, #12]
}
 8004e80:	bf00      	nop
 8004e82:	bf00      	nop
 8004e84:	e7fd      	b.n	8004e82 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e8a:	6978      	ldr	r0, [r7, #20]
 8004e8c:	4798      	blx	r3
}
 8004e8e:	bf00      	nop
 8004e90:	3718      	adds	r7, #24
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	20000e18 	.word	0x20000e18

08004e9c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b084      	sub	sp, #16
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004ea4:	f107 0308 	add.w	r3, r7, #8
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f000 f859 	bl	8004f60 <prvGetNextExpireTime>
 8004eae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	4619      	mov	r1, r3
 8004eb4:	68f8      	ldr	r0, [r7, #12]
 8004eb6:	f000 f805 	bl	8004ec4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004eba:	f000 f8d7 	bl	800506c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004ebe:	bf00      	nop
 8004ec0:	e7f0      	b.n	8004ea4 <prvTimerTask+0x8>
	...

08004ec4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b084      	sub	sp, #16
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004ece:	f7ff fa17 	bl	8004300 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004ed2:	f107 0308 	add.w	r3, r7, #8
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f000 f866 	bl	8004fa8 <prvSampleTimeNow>
 8004edc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d130      	bne.n	8004f46 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d10a      	bne.n	8004f00 <prvProcessTimerOrBlockTask+0x3c>
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d806      	bhi.n	8004f00 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004ef2:	f7ff fa13 	bl	800431c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004ef6:	68f9      	ldr	r1, [r7, #12]
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f7ff ff8d 	bl	8004e18 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004efe:	e024      	b.n	8004f4a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d008      	beq.n	8004f18 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004f06:	4b13      	ldr	r3, [pc, #76]	@ (8004f54 <prvProcessTimerOrBlockTask+0x90>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	bf0c      	ite	eq
 8004f10:	2301      	moveq	r3, #1
 8004f12:	2300      	movne	r3, #0
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004f18:	4b0f      	ldr	r3, [pc, #60]	@ (8004f58 <prvProcessTimerOrBlockTask+0x94>)
 8004f1a:	6818      	ldr	r0, [r3, #0]
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	683a      	ldr	r2, [r7, #0]
 8004f24:	4619      	mov	r1, r3
 8004f26:	f7fe ff5d 	bl	8003de4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004f2a:	f7ff f9f7 	bl	800431c <xTaskResumeAll>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d10a      	bne.n	8004f4a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004f34:	4b09      	ldr	r3, [pc, #36]	@ (8004f5c <prvProcessTimerOrBlockTask+0x98>)
 8004f36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f3a:	601a      	str	r2, [r3, #0]
 8004f3c:	f3bf 8f4f 	dsb	sy
 8004f40:	f3bf 8f6f 	isb	sy
}
 8004f44:	e001      	b.n	8004f4a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004f46:	f7ff f9e9 	bl	800431c <xTaskResumeAll>
}
 8004f4a:	bf00      	nop
 8004f4c:	3710      	adds	r7, #16
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	20000e1c 	.word	0x20000e1c
 8004f58:	20000e20 	.word	0x20000e20
 8004f5c:	e000ed04 	.word	0xe000ed04

08004f60 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004f60:	b480      	push	{r7}
 8004f62:	b085      	sub	sp, #20
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004f68:	4b0e      	ldr	r3, [pc, #56]	@ (8004fa4 <prvGetNextExpireTime+0x44>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	bf0c      	ite	eq
 8004f72:	2301      	moveq	r3, #1
 8004f74:	2300      	movne	r3, #0
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	461a      	mov	r2, r3
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d105      	bne.n	8004f92 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004f86:	4b07      	ldr	r3, [pc, #28]	@ (8004fa4 <prvGetNextExpireTime+0x44>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	60fb      	str	r3, [r7, #12]
 8004f90:	e001      	b.n	8004f96 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004f92:	2300      	movs	r3, #0
 8004f94:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004f96:	68fb      	ldr	r3, [r7, #12]
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3714      	adds	r7, #20
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr
 8004fa4:	20000e18 	.word	0x20000e18

08004fa8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b084      	sub	sp, #16
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004fb0:	f7ff fa52 	bl	8004458 <xTaskGetTickCount>
 8004fb4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004fb6:	4b0b      	ldr	r3, [pc, #44]	@ (8004fe4 <prvSampleTimeNow+0x3c>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	68fa      	ldr	r2, [r7, #12]
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d205      	bcs.n	8004fcc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004fc0:	f000 f910 	bl	80051e4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	601a      	str	r2, [r3, #0]
 8004fca:	e002      	b.n	8004fd2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004fd2:	4a04      	ldr	r2, [pc, #16]	@ (8004fe4 <prvSampleTimeNow+0x3c>)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3710      	adds	r7, #16
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	20000e28 	.word	0x20000e28

08004fe8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b086      	sub	sp, #24
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	60b9      	str	r1, [r7, #8]
 8004ff2:	607a      	str	r2, [r7, #4]
 8004ff4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	68ba      	ldr	r2, [r7, #8]
 8004ffe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	68fa      	ldr	r2, [r7, #12]
 8005004:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005006:	68ba      	ldr	r2, [r7, #8]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	429a      	cmp	r2, r3
 800500c:	d812      	bhi.n	8005034 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	1ad2      	subs	r2, r2, r3
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	699b      	ldr	r3, [r3, #24]
 8005018:	429a      	cmp	r2, r3
 800501a:	d302      	bcc.n	8005022 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800501c:	2301      	movs	r3, #1
 800501e:	617b      	str	r3, [r7, #20]
 8005020:	e01b      	b.n	800505a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005022:	4b10      	ldr	r3, [pc, #64]	@ (8005064 <prvInsertTimerInActiveList+0x7c>)
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	3304      	adds	r3, #4
 800502a:	4619      	mov	r1, r3
 800502c:	4610      	mov	r0, r2
 800502e:	f7fe f9b2 	bl	8003396 <vListInsert>
 8005032:	e012      	b.n	800505a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	429a      	cmp	r2, r3
 800503a:	d206      	bcs.n	800504a <prvInsertTimerInActiveList+0x62>
 800503c:	68ba      	ldr	r2, [r7, #8]
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	429a      	cmp	r2, r3
 8005042:	d302      	bcc.n	800504a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005044:	2301      	movs	r3, #1
 8005046:	617b      	str	r3, [r7, #20]
 8005048:	e007      	b.n	800505a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800504a:	4b07      	ldr	r3, [pc, #28]	@ (8005068 <prvInsertTimerInActiveList+0x80>)
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	3304      	adds	r3, #4
 8005052:	4619      	mov	r1, r3
 8005054:	4610      	mov	r0, r2
 8005056:	f7fe f99e 	bl	8003396 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800505a:	697b      	ldr	r3, [r7, #20]
}
 800505c:	4618      	mov	r0, r3
 800505e:	3718      	adds	r7, #24
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}
 8005064:	20000e1c 	.word	0x20000e1c
 8005068:	20000e18 	.word	0x20000e18

0800506c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b08e      	sub	sp, #56	@ 0x38
 8005070:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005072:	e0a5      	b.n	80051c0 <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2b00      	cmp	r3, #0
 8005078:	da19      	bge.n	80050ae <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800507a:	1d3b      	adds	r3, r7, #4
 800507c:	3304      	adds	r3, #4
 800507e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005080:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005082:	2b00      	cmp	r3, #0
 8005084:	d10b      	bne.n	800509e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005086:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800508a:	f383 8811 	msr	BASEPRI, r3
 800508e:	f3bf 8f6f 	isb	sy
 8005092:	f3bf 8f4f 	dsb	sy
 8005096:	61fb      	str	r3, [r7, #28]
}
 8005098:	bf00      	nop
 800509a:	bf00      	nop
 800509c:	e7fd      	b.n	800509a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800509e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80050a4:	6850      	ldr	r0, [r2, #4]
 80050a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80050a8:	6892      	ldr	r2, [r2, #8]
 80050aa:	4611      	mov	r1, r2
 80050ac:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	f2c0 8085 	blt.w	80051c0 <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80050ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050bc:	695b      	ldr	r3, [r3, #20]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d004      	beq.n	80050cc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80050c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050c4:	3304      	adds	r3, #4
 80050c6:	4618      	mov	r0, r3
 80050c8:	f7fe f99e 	bl	8003408 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80050cc:	463b      	mov	r3, r7
 80050ce:	4618      	mov	r0, r3
 80050d0:	f7ff ff6a 	bl	8004fa8 <prvSampleTimeNow>
 80050d4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2b09      	cmp	r3, #9
 80050da:	d86c      	bhi.n	80051b6 <prvProcessReceivedCommands+0x14a>
 80050dc:	a201      	add	r2, pc, #4	@ (adr r2, 80050e4 <prvProcessReceivedCommands+0x78>)
 80050de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050e2:	bf00      	nop
 80050e4:	0800510d 	.word	0x0800510d
 80050e8:	0800510d 	.word	0x0800510d
 80050ec:	0800510d 	.word	0x0800510d
 80050f0:	080051b7 	.word	0x080051b7
 80050f4:	0800516b 	.word	0x0800516b
 80050f8:	080051a5 	.word	0x080051a5
 80050fc:	0800510d 	.word	0x0800510d
 8005100:	0800510d 	.word	0x0800510d
 8005104:	080051b7 	.word	0x080051b7
 8005108:	0800516b 	.word	0x0800516b
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800510c:	68ba      	ldr	r2, [r7, #8]
 800510e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005110:	699b      	ldr	r3, [r3, #24]
 8005112:	18d1      	adds	r1, r2, r3
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005118:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800511a:	f7ff ff65 	bl	8004fe8 <prvInsertTimerInActiveList>
 800511e:	4603      	mov	r3, r0
 8005120:	2b00      	cmp	r3, #0
 8005122:	d04a      	beq.n	80051ba <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005128:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800512a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800512c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800512e:	69db      	ldr	r3, [r3, #28]
 8005130:	2b01      	cmp	r3, #1
 8005132:	d142      	bne.n	80051ba <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005134:	68ba      	ldr	r2, [r7, #8]
 8005136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005138:	699b      	ldr	r3, [r3, #24]
 800513a:	441a      	add	r2, r3
 800513c:	2300      	movs	r3, #0
 800513e:	9300      	str	r3, [sp, #0]
 8005140:	2300      	movs	r3, #0
 8005142:	2100      	movs	r1, #0
 8005144:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005146:	f7ff fe19 	bl	8004d7c <xTimerGenericCommand>
 800514a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800514c:	6a3b      	ldr	r3, [r7, #32]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d133      	bne.n	80051ba <prvProcessReceivedCommands+0x14e>
	__asm volatile
 8005152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005156:	f383 8811 	msr	BASEPRI, r3
 800515a:	f3bf 8f6f 	isb	sy
 800515e:	f3bf 8f4f 	dsb	sy
 8005162:	61bb      	str	r3, [r7, #24]
}
 8005164:	bf00      	nop
 8005166:	bf00      	nop
 8005168:	e7fd      	b.n	8005166 <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800516a:	68ba      	ldr	r2, [r7, #8]
 800516c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800516e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005172:	699b      	ldr	r3, [r3, #24]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d10b      	bne.n	8005190 <prvProcessReceivedCommands+0x124>
	__asm volatile
 8005178:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800517c:	f383 8811 	msr	BASEPRI, r3
 8005180:	f3bf 8f6f 	isb	sy
 8005184:	f3bf 8f4f 	dsb	sy
 8005188:	617b      	str	r3, [r7, #20]
}
 800518a:	bf00      	nop
 800518c:	bf00      	nop
 800518e:	e7fd      	b.n	800518c <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005192:	699a      	ldr	r2, [r3, #24]
 8005194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005196:	18d1      	adds	r1, r2, r3
 8005198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800519a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800519c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800519e:	f7ff ff23 	bl	8004fe8 <prvInsertTimerInActiveList>
					break;
 80051a2:	e00d      	b.n	80051c0 <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80051a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051a6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d107      	bne.n	80051be <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 80051ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80051b0:	f000 fbd4 	bl	800595c <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80051b4:	e003      	b.n	80051be <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 80051b6:	bf00      	nop
 80051b8:	e002      	b.n	80051c0 <prvProcessReceivedCommands+0x154>
					break;
 80051ba:	bf00      	nop
 80051bc:	e000      	b.n	80051c0 <prvProcessReceivedCommands+0x154>
					break;
 80051be:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80051c0:	4b07      	ldr	r3, [pc, #28]	@ (80051e0 <prvProcessReceivedCommands+0x174>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	1d39      	adds	r1, r7, #4
 80051c6:	2200      	movs	r2, #0
 80051c8:	4618      	mov	r0, r3
 80051ca:	f7fe fbef 	bl	80039ac <xQueueReceive>
 80051ce:	4603      	mov	r3, r0
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	f47f af4f 	bne.w	8005074 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80051d6:	bf00      	nop
 80051d8:	bf00      	nop
 80051da:	3730      	adds	r7, #48	@ 0x30
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	20000e20 	.word	0x20000e20

080051e4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b088      	sub	sp, #32
 80051e8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80051ea:	e046      	b.n	800527a <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80051ec:	4b2c      	ldr	r3, [pc, #176]	@ (80052a0 <prvSwitchTimerLists+0xbc>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80051f6:	4b2a      	ldr	r3, [pc, #168]	@ (80052a0 <prvSwitchTimerLists+0xbc>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	3304      	adds	r3, #4
 8005204:	4618      	mov	r0, r3
 8005206:	f7fe f8ff 	bl	8003408 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800520e:	68f8      	ldr	r0, [r7, #12]
 8005210:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	69db      	ldr	r3, [r3, #28]
 8005216:	2b01      	cmp	r3, #1
 8005218:	d12f      	bne.n	800527a <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	699b      	ldr	r3, [r3, #24]
 800521e:	693a      	ldr	r2, [r7, #16]
 8005220:	4413      	add	r3, r2
 8005222:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005224:	68ba      	ldr	r2, [r7, #8]
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	429a      	cmp	r2, r3
 800522a:	d90e      	bls.n	800524a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	68ba      	ldr	r2, [r7, #8]
 8005230:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	68fa      	ldr	r2, [r7, #12]
 8005236:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005238:	4b19      	ldr	r3, [pc, #100]	@ (80052a0 <prvSwitchTimerLists+0xbc>)
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	3304      	adds	r3, #4
 8005240:	4619      	mov	r1, r3
 8005242:	4610      	mov	r0, r2
 8005244:	f7fe f8a7 	bl	8003396 <vListInsert>
 8005248:	e017      	b.n	800527a <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800524a:	2300      	movs	r3, #0
 800524c:	9300      	str	r3, [sp, #0]
 800524e:	2300      	movs	r3, #0
 8005250:	693a      	ldr	r2, [r7, #16]
 8005252:	2100      	movs	r1, #0
 8005254:	68f8      	ldr	r0, [r7, #12]
 8005256:	f7ff fd91 	bl	8004d7c <xTimerGenericCommand>
 800525a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d10b      	bne.n	800527a <prvSwitchTimerLists+0x96>
	__asm volatile
 8005262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005266:	f383 8811 	msr	BASEPRI, r3
 800526a:	f3bf 8f6f 	isb	sy
 800526e:	f3bf 8f4f 	dsb	sy
 8005272:	603b      	str	r3, [r7, #0]
}
 8005274:	bf00      	nop
 8005276:	bf00      	nop
 8005278:	e7fd      	b.n	8005276 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800527a:	4b09      	ldr	r3, [pc, #36]	@ (80052a0 <prvSwitchTimerLists+0xbc>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d1b3      	bne.n	80051ec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005284:	4b06      	ldr	r3, [pc, #24]	@ (80052a0 <prvSwitchTimerLists+0xbc>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800528a:	4b06      	ldr	r3, [pc, #24]	@ (80052a4 <prvSwitchTimerLists+0xc0>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a04      	ldr	r2, [pc, #16]	@ (80052a0 <prvSwitchTimerLists+0xbc>)
 8005290:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005292:	4a04      	ldr	r2, [pc, #16]	@ (80052a4 <prvSwitchTimerLists+0xc0>)
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	6013      	str	r3, [r2, #0]
}
 8005298:	bf00      	nop
 800529a:	3718      	adds	r7, #24
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	20000e18 	.word	0x20000e18
 80052a4:	20000e1c 	.word	0x20000e1c

080052a8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b082      	sub	sp, #8
 80052ac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80052ae:	f000 f96b 	bl	8005588 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80052b2:	4b15      	ldr	r3, [pc, #84]	@ (8005308 <prvCheckForValidListAndQueue+0x60>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d120      	bne.n	80052fc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80052ba:	4814      	ldr	r0, [pc, #80]	@ (800530c <prvCheckForValidListAndQueue+0x64>)
 80052bc:	f7fe f81a 	bl	80032f4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80052c0:	4813      	ldr	r0, [pc, #76]	@ (8005310 <prvCheckForValidListAndQueue+0x68>)
 80052c2:	f7fe f817 	bl	80032f4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80052c6:	4b13      	ldr	r3, [pc, #76]	@ (8005314 <prvCheckForValidListAndQueue+0x6c>)
 80052c8:	4a10      	ldr	r2, [pc, #64]	@ (800530c <prvCheckForValidListAndQueue+0x64>)
 80052ca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80052cc:	4b12      	ldr	r3, [pc, #72]	@ (8005318 <prvCheckForValidListAndQueue+0x70>)
 80052ce:	4a10      	ldr	r2, [pc, #64]	@ (8005310 <prvCheckForValidListAndQueue+0x68>)
 80052d0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80052d2:	2300      	movs	r3, #0
 80052d4:	9300      	str	r3, [sp, #0]
 80052d6:	4b11      	ldr	r3, [pc, #68]	@ (800531c <prvCheckForValidListAndQueue+0x74>)
 80052d8:	4a11      	ldr	r2, [pc, #68]	@ (8005320 <prvCheckForValidListAndQueue+0x78>)
 80052da:	2110      	movs	r1, #16
 80052dc:	200a      	movs	r0, #10
 80052de:	f7fe f927 	bl	8003530 <xQueueGenericCreateStatic>
 80052e2:	4603      	mov	r3, r0
 80052e4:	4a08      	ldr	r2, [pc, #32]	@ (8005308 <prvCheckForValidListAndQueue+0x60>)
 80052e6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80052e8:	4b07      	ldr	r3, [pc, #28]	@ (8005308 <prvCheckForValidListAndQueue+0x60>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d005      	beq.n	80052fc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80052f0:	4b05      	ldr	r3, [pc, #20]	@ (8005308 <prvCheckForValidListAndQueue+0x60>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	490b      	ldr	r1, [pc, #44]	@ (8005324 <prvCheckForValidListAndQueue+0x7c>)
 80052f6:	4618      	mov	r0, r3
 80052f8:	f7fe fd4a 	bl	8003d90 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80052fc:	f000 f976 	bl	80055ec <vPortExitCritical>
}
 8005300:	bf00      	nop
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	20000e20 	.word	0x20000e20
 800530c:	20000df0 	.word	0x20000df0
 8005310:	20000e04 	.word	0x20000e04
 8005314:	20000e18 	.word	0x20000e18
 8005318:	20000e1c 	.word	0x20000e1c
 800531c:	20000ecc 	.word	0x20000ecc
 8005320:	20000e2c 	.word	0x20000e2c
 8005324:	080065f4 	.word	0x080065f4

08005328 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005328:	b480      	push	{r7}
 800532a:	b085      	sub	sp, #20
 800532c:	af00      	add	r7, sp, #0
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	60b9      	str	r1, [r7, #8]
 8005332:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	3b04      	subs	r3, #4
 8005338:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005340:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	3b04      	subs	r3, #4
 8005346:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	f023 0201 	bic.w	r2, r3, #1
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	3b04      	subs	r3, #4
 8005356:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005358:	4a0c      	ldr	r2, [pc, #48]	@ (800538c <pxPortInitialiseStack+0x64>)
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	3b14      	subs	r3, #20
 8005362:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005364:	687a      	ldr	r2, [r7, #4]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	3b04      	subs	r3, #4
 800536e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f06f 0202 	mvn.w	r2, #2
 8005376:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	3b20      	subs	r3, #32
 800537c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800537e:	68fb      	ldr	r3, [r7, #12]
}
 8005380:	4618      	mov	r0, r3
 8005382:	3714      	adds	r7, #20
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr
 800538c:	08005391 	.word	0x08005391

08005390 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005390:	b480      	push	{r7}
 8005392:	b085      	sub	sp, #20
 8005394:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005396:	2300      	movs	r3, #0
 8005398:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800539a:	4b13      	ldr	r3, [pc, #76]	@ (80053e8 <prvTaskExitError+0x58>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053a2:	d00b      	beq.n	80053bc <prvTaskExitError+0x2c>
	__asm volatile
 80053a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053a8:	f383 8811 	msr	BASEPRI, r3
 80053ac:	f3bf 8f6f 	isb	sy
 80053b0:	f3bf 8f4f 	dsb	sy
 80053b4:	60fb      	str	r3, [r7, #12]
}
 80053b6:	bf00      	nop
 80053b8:	bf00      	nop
 80053ba:	e7fd      	b.n	80053b8 <prvTaskExitError+0x28>
	__asm volatile
 80053bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053c0:	f383 8811 	msr	BASEPRI, r3
 80053c4:	f3bf 8f6f 	isb	sy
 80053c8:	f3bf 8f4f 	dsb	sy
 80053cc:	60bb      	str	r3, [r7, #8]
}
 80053ce:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80053d0:	bf00      	nop
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d0fc      	beq.n	80053d2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80053d8:	bf00      	nop
 80053da:	bf00      	nop
 80053dc:	3714      	adds	r7, #20
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr
 80053e6:	bf00      	nop
 80053e8:	2000000c 	.word	0x2000000c
 80053ec:	00000000 	.word	0x00000000

080053f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80053f0:	4b07      	ldr	r3, [pc, #28]	@ (8005410 <pxCurrentTCBConst2>)
 80053f2:	6819      	ldr	r1, [r3, #0]
 80053f4:	6808      	ldr	r0, [r1, #0]
 80053f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053fa:	f380 8809 	msr	PSP, r0
 80053fe:	f3bf 8f6f 	isb	sy
 8005402:	f04f 0000 	mov.w	r0, #0
 8005406:	f380 8811 	msr	BASEPRI, r0
 800540a:	4770      	bx	lr
 800540c:	f3af 8000 	nop.w

08005410 <pxCurrentTCBConst2>:
 8005410:	200008f0 	.word	0x200008f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005414:	bf00      	nop
 8005416:	bf00      	nop

08005418 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005418:	4808      	ldr	r0, [pc, #32]	@ (800543c <prvPortStartFirstTask+0x24>)
 800541a:	6800      	ldr	r0, [r0, #0]
 800541c:	6800      	ldr	r0, [r0, #0]
 800541e:	f380 8808 	msr	MSP, r0
 8005422:	f04f 0000 	mov.w	r0, #0
 8005426:	f380 8814 	msr	CONTROL, r0
 800542a:	b662      	cpsie	i
 800542c:	b661      	cpsie	f
 800542e:	f3bf 8f4f 	dsb	sy
 8005432:	f3bf 8f6f 	isb	sy
 8005436:	df00      	svc	0
 8005438:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800543a:	bf00      	nop
 800543c:	e000ed08 	.word	0xe000ed08

08005440 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b086      	sub	sp, #24
 8005444:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005446:	4b47      	ldr	r3, [pc, #284]	@ (8005564 <xPortStartScheduler+0x124>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a47      	ldr	r2, [pc, #284]	@ (8005568 <xPortStartScheduler+0x128>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d10b      	bne.n	8005468 <xPortStartScheduler+0x28>
	__asm volatile
 8005450:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005454:	f383 8811 	msr	BASEPRI, r3
 8005458:	f3bf 8f6f 	isb	sy
 800545c:	f3bf 8f4f 	dsb	sy
 8005460:	613b      	str	r3, [r7, #16]
}
 8005462:	bf00      	nop
 8005464:	bf00      	nop
 8005466:	e7fd      	b.n	8005464 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005468:	4b3e      	ldr	r3, [pc, #248]	@ (8005564 <xPortStartScheduler+0x124>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a3f      	ldr	r2, [pc, #252]	@ (800556c <xPortStartScheduler+0x12c>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d10b      	bne.n	800548a <xPortStartScheduler+0x4a>
	__asm volatile
 8005472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005476:	f383 8811 	msr	BASEPRI, r3
 800547a:	f3bf 8f6f 	isb	sy
 800547e:	f3bf 8f4f 	dsb	sy
 8005482:	60fb      	str	r3, [r7, #12]
}
 8005484:	bf00      	nop
 8005486:	bf00      	nop
 8005488:	e7fd      	b.n	8005486 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800548a:	4b39      	ldr	r3, [pc, #228]	@ (8005570 <xPortStartScheduler+0x130>)
 800548c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	b2db      	uxtb	r3, r3
 8005494:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	22ff      	movs	r2, #255	@ 0xff
 800549a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80054a4:	78fb      	ldrb	r3, [r7, #3]
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80054ac:	b2da      	uxtb	r2, r3
 80054ae:	4b31      	ldr	r3, [pc, #196]	@ (8005574 <xPortStartScheduler+0x134>)
 80054b0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80054b2:	4b31      	ldr	r3, [pc, #196]	@ (8005578 <xPortStartScheduler+0x138>)
 80054b4:	2207      	movs	r2, #7
 80054b6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80054b8:	e009      	b.n	80054ce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80054ba:	4b2f      	ldr	r3, [pc, #188]	@ (8005578 <xPortStartScheduler+0x138>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	3b01      	subs	r3, #1
 80054c0:	4a2d      	ldr	r2, [pc, #180]	@ (8005578 <xPortStartScheduler+0x138>)
 80054c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80054c4:	78fb      	ldrb	r3, [r7, #3]
 80054c6:	b2db      	uxtb	r3, r3
 80054c8:	005b      	lsls	r3, r3, #1
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80054ce:	78fb      	ldrb	r3, [r7, #3]
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054d6:	2b80      	cmp	r3, #128	@ 0x80
 80054d8:	d0ef      	beq.n	80054ba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80054da:	4b27      	ldr	r3, [pc, #156]	@ (8005578 <xPortStartScheduler+0x138>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f1c3 0307 	rsb	r3, r3, #7
 80054e2:	2b04      	cmp	r3, #4
 80054e4:	d00b      	beq.n	80054fe <xPortStartScheduler+0xbe>
	__asm volatile
 80054e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054ea:	f383 8811 	msr	BASEPRI, r3
 80054ee:	f3bf 8f6f 	isb	sy
 80054f2:	f3bf 8f4f 	dsb	sy
 80054f6:	60bb      	str	r3, [r7, #8]
}
 80054f8:	bf00      	nop
 80054fa:	bf00      	nop
 80054fc:	e7fd      	b.n	80054fa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80054fe:	4b1e      	ldr	r3, [pc, #120]	@ (8005578 <xPortStartScheduler+0x138>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	021b      	lsls	r3, r3, #8
 8005504:	4a1c      	ldr	r2, [pc, #112]	@ (8005578 <xPortStartScheduler+0x138>)
 8005506:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005508:	4b1b      	ldr	r3, [pc, #108]	@ (8005578 <xPortStartScheduler+0x138>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005510:	4a19      	ldr	r2, [pc, #100]	@ (8005578 <xPortStartScheduler+0x138>)
 8005512:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	b2da      	uxtb	r2, r3
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800551c:	4b17      	ldr	r3, [pc, #92]	@ (800557c <xPortStartScheduler+0x13c>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a16      	ldr	r2, [pc, #88]	@ (800557c <xPortStartScheduler+0x13c>)
 8005522:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005526:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005528:	4b14      	ldr	r3, [pc, #80]	@ (800557c <xPortStartScheduler+0x13c>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a13      	ldr	r2, [pc, #76]	@ (800557c <xPortStartScheduler+0x13c>)
 800552e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005532:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005534:	f000 f8da 	bl	80056ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005538:	4b11      	ldr	r3, [pc, #68]	@ (8005580 <xPortStartScheduler+0x140>)
 800553a:	2200      	movs	r2, #0
 800553c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800553e:	f000 f8f9 	bl	8005734 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005542:	4b10      	ldr	r3, [pc, #64]	@ (8005584 <xPortStartScheduler+0x144>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a0f      	ldr	r2, [pc, #60]	@ (8005584 <xPortStartScheduler+0x144>)
 8005548:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800554c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800554e:	f7ff ff63 	bl	8005418 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005552:	f7ff f863 	bl	800461c <vTaskSwitchContext>
	prvTaskExitError();
 8005556:	f7ff ff1b 	bl	8005390 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800555a:	2300      	movs	r3, #0
}
 800555c:	4618      	mov	r0, r3
 800555e:	3718      	adds	r7, #24
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}
 8005564:	e000ed00 	.word	0xe000ed00
 8005568:	410fc271 	.word	0x410fc271
 800556c:	410fc270 	.word	0x410fc270
 8005570:	e000e400 	.word	0xe000e400
 8005574:	20000f1c 	.word	0x20000f1c
 8005578:	20000f20 	.word	0x20000f20
 800557c:	e000ed20 	.word	0xe000ed20
 8005580:	2000000c 	.word	0x2000000c
 8005584:	e000ef34 	.word	0xe000ef34

08005588 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005588:	b480      	push	{r7}
 800558a:	b083      	sub	sp, #12
 800558c:	af00      	add	r7, sp, #0
	__asm volatile
 800558e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005592:	f383 8811 	msr	BASEPRI, r3
 8005596:	f3bf 8f6f 	isb	sy
 800559a:	f3bf 8f4f 	dsb	sy
 800559e:	607b      	str	r3, [r7, #4]
}
 80055a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80055a2:	4b10      	ldr	r3, [pc, #64]	@ (80055e4 <vPortEnterCritical+0x5c>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	3301      	adds	r3, #1
 80055a8:	4a0e      	ldr	r2, [pc, #56]	@ (80055e4 <vPortEnterCritical+0x5c>)
 80055aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80055ac:	4b0d      	ldr	r3, [pc, #52]	@ (80055e4 <vPortEnterCritical+0x5c>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d110      	bne.n	80055d6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80055b4:	4b0c      	ldr	r3, [pc, #48]	@ (80055e8 <vPortEnterCritical+0x60>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d00b      	beq.n	80055d6 <vPortEnterCritical+0x4e>
	__asm volatile
 80055be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055c2:	f383 8811 	msr	BASEPRI, r3
 80055c6:	f3bf 8f6f 	isb	sy
 80055ca:	f3bf 8f4f 	dsb	sy
 80055ce:	603b      	str	r3, [r7, #0]
}
 80055d0:	bf00      	nop
 80055d2:	bf00      	nop
 80055d4:	e7fd      	b.n	80055d2 <vPortEnterCritical+0x4a>
	}
}
 80055d6:	bf00      	nop
 80055d8:	370c      	adds	r7, #12
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr
 80055e2:	bf00      	nop
 80055e4:	2000000c 	.word	0x2000000c
 80055e8:	e000ed04 	.word	0xe000ed04

080055ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80055ec:	b480      	push	{r7}
 80055ee:	b083      	sub	sp, #12
 80055f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80055f2:	4b12      	ldr	r3, [pc, #72]	@ (800563c <vPortExitCritical+0x50>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d10b      	bne.n	8005612 <vPortExitCritical+0x26>
	__asm volatile
 80055fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055fe:	f383 8811 	msr	BASEPRI, r3
 8005602:	f3bf 8f6f 	isb	sy
 8005606:	f3bf 8f4f 	dsb	sy
 800560a:	607b      	str	r3, [r7, #4]
}
 800560c:	bf00      	nop
 800560e:	bf00      	nop
 8005610:	e7fd      	b.n	800560e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005612:	4b0a      	ldr	r3, [pc, #40]	@ (800563c <vPortExitCritical+0x50>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	3b01      	subs	r3, #1
 8005618:	4a08      	ldr	r2, [pc, #32]	@ (800563c <vPortExitCritical+0x50>)
 800561a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800561c:	4b07      	ldr	r3, [pc, #28]	@ (800563c <vPortExitCritical+0x50>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d105      	bne.n	8005630 <vPortExitCritical+0x44>
 8005624:	2300      	movs	r3, #0
 8005626:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	f383 8811 	msr	BASEPRI, r3
}
 800562e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005630:	bf00      	nop
 8005632:	370c      	adds	r7, #12
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr
 800563c:	2000000c 	.word	0x2000000c

08005640 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005640:	f3ef 8009 	mrs	r0, PSP
 8005644:	f3bf 8f6f 	isb	sy
 8005648:	4b15      	ldr	r3, [pc, #84]	@ (80056a0 <pxCurrentTCBConst>)
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	f01e 0f10 	tst.w	lr, #16
 8005650:	bf08      	it	eq
 8005652:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005656:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800565a:	6010      	str	r0, [r2, #0]
 800565c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005660:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005664:	f380 8811 	msr	BASEPRI, r0
 8005668:	f3bf 8f4f 	dsb	sy
 800566c:	f3bf 8f6f 	isb	sy
 8005670:	f7fe ffd4 	bl	800461c <vTaskSwitchContext>
 8005674:	f04f 0000 	mov.w	r0, #0
 8005678:	f380 8811 	msr	BASEPRI, r0
 800567c:	bc09      	pop	{r0, r3}
 800567e:	6819      	ldr	r1, [r3, #0]
 8005680:	6808      	ldr	r0, [r1, #0]
 8005682:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005686:	f01e 0f10 	tst.w	lr, #16
 800568a:	bf08      	it	eq
 800568c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005690:	f380 8809 	msr	PSP, r0
 8005694:	f3bf 8f6f 	isb	sy
 8005698:	4770      	bx	lr
 800569a:	bf00      	nop
 800569c:	f3af 8000 	nop.w

080056a0 <pxCurrentTCBConst>:
 80056a0:	200008f0 	.word	0x200008f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80056a4:	bf00      	nop
 80056a6:	bf00      	nop

080056a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b082      	sub	sp, #8
 80056ac:	af00      	add	r7, sp, #0
	__asm volatile
 80056ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056b2:	f383 8811 	msr	BASEPRI, r3
 80056b6:	f3bf 8f6f 	isb	sy
 80056ba:	f3bf 8f4f 	dsb	sy
 80056be:	607b      	str	r3, [r7, #4]
}
 80056c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80056c2:	f7fe feeb 	bl	800449c <xTaskIncrementTick>
 80056c6:	4603      	mov	r3, r0
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d003      	beq.n	80056d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80056cc:	4b06      	ldr	r3, [pc, #24]	@ (80056e8 <SysTick_Handler+0x40>)
 80056ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056d2:	601a      	str	r2, [r3, #0]
 80056d4:	2300      	movs	r3, #0
 80056d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	f383 8811 	msr	BASEPRI, r3
}
 80056de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80056e0:	bf00      	nop
 80056e2:	3708      	adds	r7, #8
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}
 80056e8:	e000ed04 	.word	0xe000ed04

080056ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80056ec:	b480      	push	{r7}
 80056ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80056f0:	4b0b      	ldr	r3, [pc, #44]	@ (8005720 <vPortSetupTimerInterrupt+0x34>)
 80056f2:	2200      	movs	r2, #0
 80056f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80056f6:	4b0b      	ldr	r3, [pc, #44]	@ (8005724 <vPortSetupTimerInterrupt+0x38>)
 80056f8:	2200      	movs	r2, #0
 80056fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80056fc:	4b0a      	ldr	r3, [pc, #40]	@ (8005728 <vPortSetupTimerInterrupt+0x3c>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a0a      	ldr	r2, [pc, #40]	@ (800572c <vPortSetupTimerInterrupt+0x40>)
 8005702:	fba2 2303 	umull	r2, r3, r2, r3
 8005706:	099b      	lsrs	r3, r3, #6
 8005708:	4a09      	ldr	r2, [pc, #36]	@ (8005730 <vPortSetupTimerInterrupt+0x44>)
 800570a:	3b01      	subs	r3, #1
 800570c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800570e:	4b04      	ldr	r3, [pc, #16]	@ (8005720 <vPortSetupTimerInterrupt+0x34>)
 8005710:	2207      	movs	r2, #7
 8005712:	601a      	str	r2, [r3, #0]
}
 8005714:	bf00      	nop
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr
 800571e:	bf00      	nop
 8005720:	e000e010 	.word	0xe000e010
 8005724:	e000e018 	.word	0xe000e018
 8005728:	20000000 	.word	0x20000000
 800572c:	10624dd3 	.word	0x10624dd3
 8005730:	e000e014 	.word	0xe000e014

08005734 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005734:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005744 <vPortEnableVFP+0x10>
 8005738:	6801      	ldr	r1, [r0, #0]
 800573a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800573e:	6001      	str	r1, [r0, #0]
 8005740:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005742:	bf00      	nop
 8005744:	e000ed88 	.word	0xe000ed88

08005748 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005748:	b480      	push	{r7}
 800574a:	b085      	sub	sp, #20
 800574c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800574e:	f3ef 8305 	mrs	r3, IPSR
 8005752:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2b0f      	cmp	r3, #15
 8005758:	d915      	bls.n	8005786 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800575a:	4a18      	ldr	r2, [pc, #96]	@ (80057bc <vPortValidateInterruptPriority+0x74>)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	4413      	add	r3, r2
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005764:	4b16      	ldr	r3, [pc, #88]	@ (80057c0 <vPortValidateInterruptPriority+0x78>)
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	7afa      	ldrb	r2, [r7, #11]
 800576a:	429a      	cmp	r2, r3
 800576c:	d20b      	bcs.n	8005786 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800576e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005772:	f383 8811 	msr	BASEPRI, r3
 8005776:	f3bf 8f6f 	isb	sy
 800577a:	f3bf 8f4f 	dsb	sy
 800577e:	607b      	str	r3, [r7, #4]
}
 8005780:	bf00      	nop
 8005782:	bf00      	nop
 8005784:	e7fd      	b.n	8005782 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005786:	4b0f      	ldr	r3, [pc, #60]	@ (80057c4 <vPortValidateInterruptPriority+0x7c>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800578e:	4b0e      	ldr	r3, [pc, #56]	@ (80057c8 <vPortValidateInterruptPriority+0x80>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	429a      	cmp	r2, r3
 8005794:	d90b      	bls.n	80057ae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800579a:	f383 8811 	msr	BASEPRI, r3
 800579e:	f3bf 8f6f 	isb	sy
 80057a2:	f3bf 8f4f 	dsb	sy
 80057a6:	603b      	str	r3, [r7, #0]
}
 80057a8:	bf00      	nop
 80057aa:	bf00      	nop
 80057ac:	e7fd      	b.n	80057aa <vPortValidateInterruptPriority+0x62>
	}
 80057ae:	bf00      	nop
 80057b0:	3714      	adds	r7, #20
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr
 80057ba:	bf00      	nop
 80057bc:	e000e3f0 	.word	0xe000e3f0
 80057c0:	20000f1c 	.word	0x20000f1c
 80057c4:	e000ed0c 	.word	0xe000ed0c
 80057c8:	20000f20 	.word	0x20000f20

080057cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b08a      	sub	sp, #40	@ 0x28
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80057d4:	2300      	movs	r3, #0
 80057d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80057d8:	f7fe fd92 	bl	8004300 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80057dc:	4b5a      	ldr	r3, [pc, #360]	@ (8005948 <pvPortMalloc+0x17c>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d101      	bne.n	80057e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80057e4:	f000 f916 	bl	8005a14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80057e8:	4b58      	ldr	r3, [pc, #352]	@ (800594c <pvPortMalloc+0x180>)
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	4013      	ands	r3, r2
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	f040 8090 	bne.w	8005916 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d01e      	beq.n	800583a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80057fc:	2208      	movs	r2, #8
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4413      	add	r3, r2
 8005802:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f003 0307 	and.w	r3, r3, #7
 800580a:	2b00      	cmp	r3, #0
 800580c:	d015      	beq.n	800583a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f023 0307 	bic.w	r3, r3, #7
 8005814:	3308      	adds	r3, #8
 8005816:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f003 0307 	and.w	r3, r3, #7
 800581e:	2b00      	cmp	r3, #0
 8005820:	d00b      	beq.n	800583a <pvPortMalloc+0x6e>
	__asm volatile
 8005822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005826:	f383 8811 	msr	BASEPRI, r3
 800582a:	f3bf 8f6f 	isb	sy
 800582e:	f3bf 8f4f 	dsb	sy
 8005832:	617b      	str	r3, [r7, #20]
}
 8005834:	bf00      	nop
 8005836:	bf00      	nop
 8005838:	e7fd      	b.n	8005836 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d06a      	beq.n	8005916 <pvPortMalloc+0x14a>
 8005840:	4b43      	ldr	r3, [pc, #268]	@ (8005950 <pvPortMalloc+0x184>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	429a      	cmp	r2, r3
 8005848:	d865      	bhi.n	8005916 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800584a:	4b42      	ldr	r3, [pc, #264]	@ (8005954 <pvPortMalloc+0x188>)
 800584c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800584e:	4b41      	ldr	r3, [pc, #260]	@ (8005954 <pvPortMalloc+0x188>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005854:	e004      	b.n	8005860 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005858:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800585a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	429a      	cmp	r2, r3
 8005868:	d903      	bls.n	8005872 <pvPortMalloc+0xa6>
 800586a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d1f1      	bne.n	8005856 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005872:	4b35      	ldr	r3, [pc, #212]	@ (8005948 <pvPortMalloc+0x17c>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005878:	429a      	cmp	r2, r3
 800587a:	d04c      	beq.n	8005916 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800587c:	6a3b      	ldr	r3, [r7, #32]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	2208      	movs	r2, #8
 8005882:	4413      	add	r3, r2
 8005884:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	6a3b      	ldr	r3, [r7, #32]
 800588c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800588e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005890:	685a      	ldr	r2, [r3, #4]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	1ad2      	subs	r2, r2, r3
 8005896:	2308      	movs	r3, #8
 8005898:	005b      	lsls	r3, r3, #1
 800589a:	429a      	cmp	r2, r3
 800589c:	d920      	bls.n	80058e0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800589e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	4413      	add	r3, r2
 80058a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80058a6:	69bb      	ldr	r3, [r7, #24]
 80058a8:	f003 0307 	and.w	r3, r3, #7
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d00b      	beq.n	80058c8 <pvPortMalloc+0xfc>
	__asm volatile
 80058b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058b4:	f383 8811 	msr	BASEPRI, r3
 80058b8:	f3bf 8f6f 	isb	sy
 80058bc:	f3bf 8f4f 	dsb	sy
 80058c0:	613b      	str	r3, [r7, #16]
}
 80058c2:	bf00      	nop
 80058c4:	bf00      	nop
 80058c6:	e7fd      	b.n	80058c4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80058c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ca:	685a      	ldr	r2, [r3, #4]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	1ad2      	subs	r2, r2, r3
 80058d0:	69bb      	ldr	r3, [r7, #24]
 80058d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80058d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80058da:	69b8      	ldr	r0, [r7, #24]
 80058dc:	f000 f8fc 	bl	8005ad8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80058e0:	4b1b      	ldr	r3, [pc, #108]	@ (8005950 <pvPortMalloc+0x184>)
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	1ad3      	subs	r3, r2, r3
 80058ea:	4a19      	ldr	r2, [pc, #100]	@ (8005950 <pvPortMalloc+0x184>)
 80058ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80058ee:	4b18      	ldr	r3, [pc, #96]	@ (8005950 <pvPortMalloc+0x184>)
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	4b19      	ldr	r3, [pc, #100]	@ (8005958 <pvPortMalloc+0x18c>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d203      	bcs.n	8005902 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80058fa:	4b15      	ldr	r3, [pc, #84]	@ (8005950 <pvPortMalloc+0x184>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a16      	ldr	r2, [pc, #88]	@ (8005958 <pvPortMalloc+0x18c>)
 8005900:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005904:	685a      	ldr	r2, [r3, #4]
 8005906:	4b11      	ldr	r3, [pc, #68]	@ (800594c <pvPortMalloc+0x180>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	431a      	orrs	r2, r3
 800590c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800590e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005912:	2200      	movs	r2, #0
 8005914:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005916:	f7fe fd01 	bl	800431c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800591a:	69fb      	ldr	r3, [r7, #28]
 800591c:	f003 0307 	and.w	r3, r3, #7
 8005920:	2b00      	cmp	r3, #0
 8005922:	d00b      	beq.n	800593c <pvPortMalloc+0x170>
	__asm volatile
 8005924:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005928:	f383 8811 	msr	BASEPRI, r3
 800592c:	f3bf 8f6f 	isb	sy
 8005930:	f3bf 8f4f 	dsb	sy
 8005934:	60fb      	str	r3, [r7, #12]
}
 8005936:	bf00      	nop
 8005938:	bf00      	nop
 800593a:	e7fd      	b.n	8005938 <pvPortMalloc+0x16c>
	return pvReturn;
 800593c:	69fb      	ldr	r3, [r7, #28]
}
 800593e:	4618      	mov	r0, r3
 8005940:	3728      	adds	r7, #40	@ 0x28
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}
 8005946:	bf00      	nop
 8005948:	20001b2c 	.word	0x20001b2c
 800594c:	20001b38 	.word	0x20001b38
 8005950:	20001b30 	.word	0x20001b30
 8005954:	20001b24 	.word	0x20001b24
 8005958:	20001b34 	.word	0x20001b34

0800595c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b086      	sub	sp, #24
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d04a      	beq.n	8005a04 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800596e:	2308      	movs	r3, #8
 8005970:	425b      	negs	r3, r3
 8005972:	697a      	ldr	r2, [r7, #20]
 8005974:	4413      	add	r3, r2
 8005976:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	685a      	ldr	r2, [r3, #4]
 8005980:	4b22      	ldr	r3, [pc, #136]	@ (8005a0c <vPortFree+0xb0>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4013      	ands	r3, r2
 8005986:	2b00      	cmp	r3, #0
 8005988:	d10b      	bne.n	80059a2 <vPortFree+0x46>
	__asm volatile
 800598a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800598e:	f383 8811 	msr	BASEPRI, r3
 8005992:	f3bf 8f6f 	isb	sy
 8005996:	f3bf 8f4f 	dsb	sy
 800599a:	60fb      	str	r3, [r7, #12]
}
 800599c:	bf00      	nop
 800599e:	bf00      	nop
 80059a0:	e7fd      	b.n	800599e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d00b      	beq.n	80059c2 <vPortFree+0x66>
	__asm volatile
 80059aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059ae:	f383 8811 	msr	BASEPRI, r3
 80059b2:	f3bf 8f6f 	isb	sy
 80059b6:	f3bf 8f4f 	dsb	sy
 80059ba:	60bb      	str	r3, [r7, #8]
}
 80059bc:	bf00      	nop
 80059be:	bf00      	nop
 80059c0:	e7fd      	b.n	80059be <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	685a      	ldr	r2, [r3, #4]
 80059c6:	4b11      	ldr	r3, [pc, #68]	@ (8005a0c <vPortFree+0xb0>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4013      	ands	r3, r2
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d019      	beq.n	8005a04 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d115      	bne.n	8005a04 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	685a      	ldr	r2, [r3, #4]
 80059dc:	4b0b      	ldr	r3, [pc, #44]	@ (8005a0c <vPortFree+0xb0>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	43db      	mvns	r3, r3
 80059e2:	401a      	ands	r2, r3
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80059e8:	f7fe fc8a 	bl	8004300 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	685a      	ldr	r2, [r3, #4]
 80059f0:	4b07      	ldr	r3, [pc, #28]	@ (8005a10 <vPortFree+0xb4>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4413      	add	r3, r2
 80059f6:	4a06      	ldr	r2, [pc, #24]	@ (8005a10 <vPortFree+0xb4>)
 80059f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80059fa:	6938      	ldr	r0, [r7, #16]
 80059fc:	f000 f86c 	bl	8005ad8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005a00:	f7fe fc8c 	bl	800431c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005a04:	bf00      	nop
 8005a06:	3718      	adds	r7, #24
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}
 8005a0c:	20001b38 	.word	0x20001b38
 8005a10:	20001b30 	.word	0x20001b30

08005a14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005a14:	b480      	push	{r7}
 8005a16:	b085      	sub	sp, #20
 8005a18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005a1a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8005a1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005a20:	4b27      	ldr	r3, [pc, #156]	@ (8005ac0 <prvHeapInit+0xac>)
 8005a22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f003 0307 	and.w	r3, r3, #7
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d00c      	beq.n	8005a48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	3307      	adds	r3, #7
 8005a32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f023 0307 	bic.w	r3, r3, #7
 8005a3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005a3c:	68ba      	ldr	r2, [r7, #8]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	1ad3      	subs	r3, r2, r3
 8005a42:	4a1f      	ldr	r2, [pc, #124]	@ (8005ac0 <prvHeapInit+0xac>)
 8005a44:	4413      	add	r3, r2
 8005a46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005a4c:	4a1d      	ldr	r2, [pc, #116]	@ (8005ac4 <prvHeapInit+0xb0>)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005a52:	4b1c      	ldr	r3, [pc, #112]	@ (8005ac4 <prvHeapInit+0xb0>)
 8005a54:	2200      	movs	r2, #0
 8005a56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	68ba      	ldr	r2, [r7, #8]
 8005a5c:	4413      	add	r3, r2
 8005a5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005a60:	2208      	movs	r2, #8
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	1a9b      	subs	r3, r3, r2
 8005a66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f023 0307 	bic.w	r3, r3, #7
 8005a6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	4a15      	ldr	r2, [pc, #84]	@ (8005ac8 <prvHeapInit+0xb4>)
 8005a74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005a76:	4b14      	ldr	r3, [pc, #80]	@ (8005ac8 <prvHeapInit+0xb4>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005a7e:	4b12      	ldr	r3, [pc, #72]	@ (8005ac8 <prvHeapInit+0xb4>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	2200      	movs	r2, #0
 8005a84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	68fa      	ldr	r2, [r7, #12]
 8005a8e:	1ad2      	subs	r2, r2, r3
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005a94:	4b0c      	ldr	r3, [pc, #48]	@ (8005ac8 <prvHeapInit+0xb4>)
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	4a0a      	ldr	r2, [pc, #40]	@ (8005acc <prvHeapInit+0xb8>)
 8005aa2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	4a09      	ldr	r2, [pc, #36]	@ (8005ad0 <prvHeapInit+0xbc>)
 8005aaa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005aac:	4b09      	ldr	r3, [pc, #36]	@ (8005ad4 <prvHeapInit+0xc0>)
 8005aae:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005ab2:	601a      	str	r2, [r3, #0]
}
 8005ab4:	bf00      	nop
 8005ab6:	3714      	adds	r7, #20
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr
 8005ac0:	20000f24 	.word	0x20000f24
 8005ac4:	20001b24 	.word	0x20001b24
 8005ac8:	20001b2c 	.word	0x20001b2c
 8005acc:	20001b34 	.word	0x20001b34
 8005ad0:	20001b30 	.word	0x20001b30
 8005ad4:	20001b38 	.word	0x20001b38

08005ad8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b085      	sub	sp, #20
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005ae0:	4b28      	ldr	r3, [pc, #160]	@ (8005b84 <prvInsertBlockIntoFreeList+0xac>)
 8005ae2:	60fb      	str	r3, [r7, #12]
 8005ae4:	e002      	b.n	8005aec <prvInsertBlockIntoFreeList+0x14>
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	60fb      	str	r3, [r7, #12]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d8f7      	bhi.n	8005ae6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	68ba      	ldr	r2, [r7, #8]
 8005b00:	4413      	add	r3, r2
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d108      	bne.n	8005b1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	685a      	ldr	r2, [r3, #4]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	441a      	add	r2, r3
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	68ba      	ldr	r2, [r7, #8]
 8005b24:	441a      	add	r2, r3
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d118      	bne.n	8005b60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	4b15      	ldr	r3, [pc, #84]	@ (8005b88 <prvInsertBlockIntoFreeList+0xb0>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d00d      	beq.n	8005b56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	685a      	ldr	r2, [r3, #4]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	441a      	add	r2, r3
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	601a      	str	r2, [r3, #0]
 8005b54:	e008      	b.n	8005b68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005b56:	4b0c      	ldr	r3, [pc, #48]	@ (8005b88 <prvInsertBlockIntoFreeList+0xb0>)
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	601a      	str	r2, [r3, #0]
 8005b5e:	e003      	b.n	8005b68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005b68:	68fa      	ldr	r2, [r7, #12]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d002      	beq.n	8005b76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b76:	bf00      	nop
 8005b78:	3714      	adds	r7, #20
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr
 8005b82:	bf00      	nop
 8005b84:	20001b24 	.word	0x20001b24
 8005b88:	20001b2c 	.word	0x20001b2c

08005b8c <sniprintf>:
 8005b8c:	b40c      	push	{r2, r3}
 8005b8e:	b530      	push	{r4, r5, lr}
 8005b90:	4b17      	ldr	r3, [pc, #92]	@ (8005bf0 <sniprintf+0x64>)
 8005b92:	1e0c      	subs	r4, r1, #0
 8005b94:	681d      	ldr	r5, [r3, #0]
 8005b96:	b09d      	sub	sp, #116	@ 0x74
 8005b98:	da08      	bge.n	8005bac <sniprintf+0x20>
 8005b9a:	238b      	movs	r3, #139	@ 0x8b
 8005b9c:	602b      	str	r3, [r5, #0]
 8005b9e:	f04f 30ff 	mov.w	r0, #4294967295
 8005ba2:	b01d      	add	sp, #116	@ 0x74
 8005ba4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005ba8:	b002      	add	sp, #8
 8005baa:	4770      	bx	lr
 8005bac:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005bb0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005bb4:	bf14      	ite	ne
 8005bb6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005bba:	4623      	moveq	r3, r4
 8005bbc:	9304      	str	r3, [sp, #16]
 8005bbe:	9307      	str	r3, [sp, #28]
 8005bc0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005bc4:	9002      	str	r0, [sp, #8]
 8005bc6:	9006      	str	r0, [sp, #24]
 8005bc8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005bcc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005bce:	ab21      	add	r3, sp, #132	@ 0x84
 8005bd0:	a902      	add	r1, sp, #8
 8005bd2:	4628      	mov	r0, r5
 8005bd4:	9301      	str	r3, [sp, #4]
 8005bd6:	f000 f9f9 	bl	8005fcc <_svfiprintf_r>
 8005bda:	1c43      	adds	r3, r0, #1
 8005bdc:	bfbc      	itt	lt
 8005bde:	238b      	movlt	r3, #139	@ 0x8b
 8005be0:	602b      	strlt	r3, [r5, #0]
 8005be2:	2c00      	cmp	r4, #0
 8005be4:	d0dd      	beq.n	8005ba2 <sniprintf+0x16>
 8005be6:	9b02      	ldr	r3, [sp, #8]
 8005be8:	2200      	movs	r2, #0
 8005bea:	701a      	strb	r2, [r3, #0]
 8005bec:	e7d9      	b.n	8005ba2 <sniprintf+0x16>
 8005bee:	bf00      	nop
 8005bf0:	20000010 	.word	0x20000010

08005bf4 <memset>:
 8005bf4:	4402      	add	r2, r0
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d100      	bne.n	8005bfe <memset+0xa>
 8005bfc:	4770      	bx	lr
 8005bfe:	f803 1b01 	strb.w	r1, [r3], #1
 8005c02:	e7f9      	b.n	8005bf8 <memset+0x4>

08005c04 <_reclaim_reent>:
 8005c04:	4b29      	ldr	r3, [pc, #164]	@ (8005cac <_reclaim_reent+0xa8>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4283      	cmp	r3, r0
 8005c0a:	b570      	push	{r4, r5, r6, lr}
 8005c0c:	4604      	mov	r4, r0
 8005c0e:	d04b      	beq.n	8005ca8 <_reclaim_reent+0xa4>
 8005c10:	69c3      	ldr	r3, [r0, #28]
 8005c12:	b1ab      	cbz	r3, 8005c40 <_reclaim_reent+0x3c>
 8005c14:	68db      	ldr	r3, [r3, #12]
 8005c16:	b16b      	cbz	r3, 8005c34 <_reclaim_reent+0x30>
 8005c18:	2500      	movs	r5, #0
 8005c1a:	69e3      	ldr	r3, [r4, #28]
 8005c1c:	68db      	ldr	r3, [r3, #12]
 8005c1e:	5959      	ldr	r1, [r3, r5]
 8005c20:	2900      	cmp	r1, #0
 8005c22:	d13b      	bne.n	8005c9c <_reclaim_reent+0x98>
 8005c24:	3504      	adds	r5, #4
 8005c26:	2d80      	cmp	r5, #128	@ 0x80
 8005c28:	d1f7      	bne.n	8005c1a <_reclaim_reent+0x16>
 8005c2a:	69e3      	ldr	r3, [r4, #28]
 8005c2c:	4620      	mov	r0, r4
 8005c2e:	68d9      	ldr	r1, [r3, #12]
 8005c30:	f000 f878 	bl	8005d24 <_free_r>
 8005c34:	69e3      	ldr	r3, [r4, #28]
 8005c36:	6819      	ldr	r1, [r3, #0]
 8005c38:	b111      	cbz	r1, 8005c40 <_reclaim_reent+0x3c>
 8005c3a:	4620      	mov	r0, r4
 8005c3c:	f000 f872 	bl	8005d24 <_free_r>
 8005c40:	6961      	ldr	r1, [r4, #20]
 8005c42:	b111      	cbz	r1, 8005c4a <_reclaim_reent+0x46>
 8005c44:	4620      	mov	r0, r4
 8005c46:	f000 f86d 	bl	8005d24 <_free_r>
 8005c4a:	69e1      	ldr	r1, [r4, #28]
 8005c4c:	b111      	cbz	r1, 8005c54 <_reclaim_reent+0x50>
 8005c4e:	4620      	mov	r0, r4
 8005c50:	f000 f868 	bl	8005d24 <_free_r>
 8005c54:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005c56:	b111      	cbz	r1, 8005c5e <_reclaim_reent+0x5a>
 8005c58:	4620      	mov	r0, r4
 8005c5a:	f000 f863 	bl	8005d24 <_free_r>
 8005c5e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005c60:	b111      	cbz	r1, 8005c68 <_reclaim_reent+0x64>
 8005c62:	4620      	mov	r0, r4
 8005c64:	f000 f85e 	bl	8005d24 <_free_r>
 8005c68:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8005c6a:	b111      	cbz	r1, 8005c72 <_reclaim_reent+0x6e>
 8005c6c:	4620      	mov	r0, r4
 8005c6e:	f000 f859 	bl	8005d24 <_free_r>
 8005c72:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005c74:	b111      	cbz	r1, 8005c7c <_reclaim_reent+0x78>
 8005c76:	4620      	mov	r0, r4
 8005c78:	f000 f854 	bl	8005d24 <_free_r>
 8005c7c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005c7e:	b111      	cbz	r1, 8005c86 <_reclaim_reent+0x82>
 8005c80:	4620      	mov	r0, r4
 8005c82:	f000 f84f 	bl	8005d24 <_free_r>
 8005c86:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005c88:	b111      	cbz	r1, 8005c90 <_reclaim_reent+0x8c>
 8005c8a:	4620      	mov	r0, r4
 8005c8c:	f000 f84a 	bl	8005d24 <_free_r>
 8005c90:	6a23      	ldr	r3, [r4, #32]
 8005c92:	b14b      	cbz	r3, 8005ca8 <_reclaim_reent+0xa4>
 8005c94:	4620      	mov	r0, r4
 8005c96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005c9a:	4718      	bx	r3
 8005c9c:	680e      	ldr	r6, [r1, #0]
 8005c9e:	4620      	mov	r0, r4
 8005ca0:	f000 f840 	bl	8005d24 <_free_r>
 8005ca4:	4631      	mov	r1, r6
 8005ca6:	e7bb      	b.n	8005c20 <_reclaim_reent+0x1c>
 8005ca8:	bd70      	pop	{r4, r5, r6, pc}
 8005caa:	bf00      	nop
 8005cac:	20000010 	.word	0x20000010

08005cb0 <__errno>:
 8005cb0:	4b01      	ldr	r3, [pc, #4]	@ (8005cb8 <__errno+0x8>)
 8005cb2:	6818      	ldr	r0, [r3, #0]
 8005cb4:	4770      	bx	lr
 8005cb6:	bf00      	nop
 8005cb8:	20000010 	.word	0x20000010

08005cbc <__libc_init_array>:
 8005cbc:	b570      	push	{r4, r5, r6, lr}
 8005cbe:	4d0d      	ldr	r5, [pc, #52]	@ (8005cf4 <__libc_init_array+0x38>)
 8005cc0:	4c0d      	ldr	r4, [pc, #52]	@ (8005cf8 <__libc_init_array+0x3c>)
 8005cc2:	1b64      	subs	r4, r4, r5
 8005cc4:	10a4      	asrs	r4, r4, #2
 8005cc6:	2600      	movs	r6, #0
 8005cc8:	42a6      	cmp	r6, r4
 8005cca:	d109      	bne.n	8005ce0 <__libc_init_array+0x24>
 8005ccc:	4d0b      	ldr	r5, [pc, #44]	@ (8005cfc <__libc_init_array+0x40>)
 8005cce:	4c0c      	ldr	r4, [pc, #48]	@ (8005d00 <__libc_init_array+0x44>)
 8005cd0:	f000 fc66 	bl	80065a0 <_init>
 8005cd4:	1b64      	subs	r4, r4, r5
 8005cd6:	10a4      	asrs	r4, r4, #2
 8005cd8:	2600      	movs	r6, #0
 8005cda:	42a6      	cmp	r6, r4
 8005cdc:	d105      	bne.n	8005cea <__libc_init_array+0x2e>
 8005cde:	bd70      	pop	{r4, r5, r6, pc}
 8005ce0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ce4:	4798      	blx	r3
 8005ce6:	3601      	adds	r6, #1
 8005ce8:	e7ee      	b.n	8005cc8 <__libc_init_array+0xc>
 8005cea:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cee:	4798      	blx	r3
 8005cf0:	3601      	adds	r6, #1
 8005cf2:	e7f2      	b.n	8005cda <__libc_init_array+0x1e>
 8005cf4:	08006694 	.word	0x08006694
 8005cf8:	08006694 	.word	0x08006694
 8005cfc:	08006694 	.word	0x08006694
 8005d00:	08006698 	.word	0x08006698

08005d04 <__retarget_lock_acquire_recursive>:
 8005d04:	4770      	bx	lr

08005d06 <__retarget_lock_release_recursive>:
 8005d06:	4770      	bx	lr

08005d08 <memcpy>:
 8005d08:	440a      	add	r2, r1
 8005d0a:	4291      	cmp	r1, r2
 8005d0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005d10:	d100      	bne.n	8005d14 <memcpy+0xc>
 8005d12:	4770      	bx	lr
 8005d14:	b510      	push	{r4, lr}
 8005d16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d1e:	4291      	cmp	r1, r2
 8005d20:	d1f9      	bne.n	8005d16 <memcpy+0xe>
 8005d22:	bd10      	pop	{r4, pc}

08005d24 <_free_r>:
 8005d24:	b538      	push	{r3, r4, r5, lr}
 8005d26:	4605      	mov	r5, r0
 8005d28:	2900      	cmp	r1, #0
 8005d2a:	d041      	beq.n	8005db0 <_free_r+0x8c>
 8005d2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d30:	1f0c      	subs	r4, r1, #4
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	bfb8      	it	lt
 8005d36:	18e4      	addlt	r4, r4, r3
 8005d38:	f000 f8e0 	bl	8005efc <__malloc_lock>
 8005d3c:	4a1d      	ldr	r2, [pc, #116]	@ (8005db4 <_free_r+0x90>)
 8005d3e:	6813      	ldr	r3, [r2, #0]
 8005d40:	b933      	cbnz	r3, 8005d50 <_free_r+0x2c>
 8005d42:	6063      	str	r3, [r4, #4]
 8005d44:	6014      	str	r4, [r2, #0]
 8005d46:	4628      	mov	r0, r5
 8005d48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d4c:	f000 b8dc 	b.w	8005f08 <__malloc_unlock>
 8005d50:	42a3      	cmp	r3, r4
 8005d52:	d908      	bls.n	8005d66 <_free_r+0x42>
 8005d54:	6820      	ldr	r0, [r4, #0]
 8005d56:	1821      	adds	r1, r4, r0
 8005d58:	428b      	cmp	r3, r1
 8005d5a:	bf01      	itttt	eq
 8005d5c:	6819      	ldreq	r1, [r3, #0]
 8005d5e:	685b      	ldreq	r3, [r3, #4]
 8005d60:	1809      	addeq	r1, r1, r0
 8005d62:	6021      	streq	r1, [r4, #0]
 8005d64:	e7ed      	b.n	8005d42 <_free_r+0x1e>
 8005d66:	461a      	mov	r2, r3
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	b10b      	cbz	r3, 8005d70 <_free_r+0x4c>
 8005d6c:	42a3      	cmp	r3, r4
 8005d6e:	d9fa      	bls.n	8005d66 <_free_r+0x42>
 8005d70:	6811      	ldr	r1, [r2, #0]
 8005d72:	1850      	adds	r0, r2, r1
 8005d74:	42a0      	cmp	r0, r4
 8005d76:	d10b      	bne.n	8005d90 <_free_r+0x6c>
 8005d78:	6820      	ldr	r0, [r4, #0]
 8005d7a:	4401      	add	r1, r0
 8005d7c:	1850      	adds	r0, r2, r1
 8005d7e:	4283      	cmp	r3, r0
 8005d80:	6011      	str	r1, [r2, #0]
 8005d82:	d1e0      	bne.n	8005d46 <_free_r+0x22>
 8005d84:	6818      	ldr	r0, [r3, #0]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	6053      	str	r3, [r2, #4]
 8005d8a:	4408      	add	r0, r1
 8005d8c:	6010      	str	r0, [r2, #0]
 8005d8e:	e7da      	b.n	8005d46 <_free_r+0x22>
 8005d90:	d902      	bls.n	8005d98 <_free_r+0x74>
 8005d92:	230c      	movs	r3, #12
 8005d94:	602b      	str	r3, [r5, #0]
 8005d96:	e7d6      	b.n	8005d46 <_free_r+0x22>
 8005d98:	6820      	ldr	r0, [r4, #0]
 8005d9a:	1821      	adds	r1, r4, r0
 8005d9c:	428b      	cmp	r3, r1
 8005d9e:	bf04      	itt	eq
 8005da0:	6819      	ldreq	r1, [r3, #0]
 8005da2:	685b      	ldreq	r3, [r3, #4]
 8005da4:	6063      	str	r3, [r4, #4]
 8005da6:	bf04      	itt	eq
 8005da8:	1809      	addeq	r1, r1, r0
 8005daa:	6021      	streq	r1, [r4, #0]
 8005dac:	6054      	str	r4, [r2, #4]
 8005dae:	e7ca      	b.n	8005d46 <_free_r+0x22>
 8005db0:	bd38      	pop	{r3, r4, r5, pc}
 8005db2:	bf00      	nop
 8005db4:	20001c80 	.word	0x20001c80

08005db8 <sbrk_aligned>:
 8005db8:	b570      	push	{r4, r5, r6, lr}
 8005dba:	4e0f      	ldr	r6, [pc, #60]	@ (8005df8 <sbrk_aligned+0x40>)
 8005dbc:	460c      	mov	r4, r1
 8005dbe:	6831      	ldr	r1, [r6, #0]
 8005dc0:	4605      	mov	r5, r0
 8005dc2:	b911      	cbnz	r1, 8005dca <sbrk_aligned+0x12>
 8005dc4:	f000 fba6 	bl	8006514 <_sbrk_r>
 8005dc8:	6030      	str	r0, [r6, #0]
 8005dca:	4621      	mov	r1, r4
 8005dcc:	4628      	mov	r0, r5
 8005dce:	f000 fba1 	bl	8006514 <_sbrk_r>
 8005dd2:	1c43      	adds	r3, r0, #1
 8005dd4:	d103      	bne.n	8005dde <sbrk_aligned+0x26>
 8005dd6:	f04f 34ff 	mov.w	r4, #4294967295
 8005dda:	4620      	mov	r0, r4
 8005ddc:	bd70      	pop	{r4, r5, r6, pc}
 8005dde:	1cc4      	adds	r4, r0, #3
 8005de0:	f024 0403 	bic.w	r4, r4, #3
 8005de4:	42a0      	cmp	r0, r4
 8005de6:	d0f8      	beq.n	8005dda <sbrk_aligned+0x22>
 8005de8:	1a21      	subs	r1, r4, r0
 8005dea:	4628      	mov	r0, r5
 8005dec:	f000 fb92 	bl	8006514 <_sbrk_r>
 8005df0:	3001      	adds	r0, #1
 8005df2:	d1f2      	bne.n	8005dda <sbrk_aligned+0x22>
 8005df4:	e7ef      	b.n	8005dd6 <sbrk_aligned+0x1e>
 8005df6:	bf00      	nop
 8005df8:	20001c7c 	.word	0x20001c7c

08005dfc <_malloc_r>:
 8005dfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e00:	1ccd      	adds	r5, r1, #3
 8005e02:	f025 0503 	bic.w	r5, r5, #3
 8005e06:	3508      	adds	r5, #8
 8005e08:	2d0c      	cmp	r5, #12
 8005e0a:	bf38      	it	cc
 8005e0c:	250c      	movcc	r5, #12
 8005e0e:	2d00      	cmp	r5, #0
 8005e10:	4606      	mov	r6, r0
 8005e12:	db01      	blt.n	8005e18 <_malloc_r+0x1c>
 8005e14:	42a9      	cmp	r1, r5
 8005e16:	d904      	bls.n	8005e22 <_malloc_r+0x26>
 8005e18:	230c      	movs	r3, #12
 8005e1a:	6033      	str	r3, [r6, #0]
 8005e1c:	2000      	movs	r0, #0
 8005e1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e22:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005ef8 <_malloc_r+0xfc>
 8005e26:	f000 f869 	bl	8005efc <__malloc_lock>
 8005e2a:	f8d8 3000 	ldr.w	r3, [r8]
 8005e2e:	461c      	mov	r4, r3
 8005e30:	bb44      	cbnz	r4, 8005e84 <_malloc_r+0x88>
 8005e32:	4629      	mov	r1, r5
 8005e34:	4630      	mov	r0, r6
 8005e36:	f7ff ffbf 	bl	8005db8 <sbrk_aligned>
 8005e3a:	1c43      	adds	r3, r0, #1
 8005e3c:	4604      	mov	r4, r0
 8005e3e:	d158      	bne.n	8005ef2 <_malloc_r+0xf6>
 8005e40:	f8d8 4000 	ldr.w	r4, [r8]
 8005e44:	4627      	mov	r7, r4
 8005e46:	2f00      	cmp	r7, #0
 8005e48:	d143      	bne.n	8005ed2 <_malloc_r+0xd6>
 8005e4a:	2c00      	cmp	r4, #0
 8005e4c:	d04b      	beq.n	8005ee6 <_malloc_r+0xea>
 8005e4e:	6823      	ldr	r3, [r4, #0]
 8005e50:	4639      	mov	r1, r7
 8005e52:	4630      	mov	r0, r6
 8005e54:	eb04 0903 	add.w	r9, r4, r3
 8005e58:	f000 fb5c 	bl	8006514 <_sbrk_r>
 8005e5c:	4581      	cmp	r9, r0
 8005e5e:	d142      	bne.n	8005ee6 <_malloc_r+0xea>
 8005e60:	6821      	ldr	r1, [r4, #0]
 8005e62:	1a6d      	subs	r5, r5, r1
 8005e64:	4629      	mov	r1, r5
 8005e66:	4630      	mov	r0, r6
 8005e68:	f7ff ffa6 	bl	8005db8 <sbrk_aligned>
 8005e6c:	3001      	adds	r0, #1
 8005e6e:	d03a      	beq.n	8005ee6 <_malloc_r+0xea>
 8005e70:	6823      	ldr	r3, [r4, #0]
 8005e72:	442b      	add	r3, r5
 8005e74:	6023      	str	r3, [r4, #0]
 8005e76:	f8d8 3000 	ldr.w	r3, [r8]
 8005e7a:	685a      	ldr	r2, [r3, #4]
 8005e7c:	bb62      	cbnz	r2, 8005ed8 <_malloc_r+0xdc>
 8005e7e:	f8c8 7000 	str.w	r7, [r8]
 8005e82:	e00f      	b.n	8005ea4 <_malloc_r+0xa8>
 8005e84:	6822      	ldr	r2, [r4, #0]
 8005e86:	1b52      	subs	r2, r2, r5
 8005e88:	d420      	bmi.n	8005ecc <_malloc_r+0xd0>
 8005e8a:	2a0b      	cmp	r2, #11
 8005e8c:	d917      	bls.n	8005ebe <_malloc_r+0xc2>
 8005e8e:	1961      	adds	r1, r4, r5
 8005e90:	42a3      	cmp	r3, r4
 8005e92:	6025      	str	r5, [r4, #0]
 8005e94:	bf18      	it	ne
 8005e96:	6059      	strne	r1, [r3, #4]
 8005e98:	6863      	ldr	r3, [r4, #4]
 8005e9a:	bf08      	it	eq
 8005e9c:	f8c8 1000 	streq.w	r1, [r8]
 8005ea0:	5162      	str	r2, [r4, r5]
 8005ea2:	604b      	str	r3, [r1, #4]
 8005ea4:	4630      	mov	r0, r6
 8005ea6:	f000 f82f 	bl	8005f08 <__malloc_unlock>
 8005eaa:	f104 000b 	add.w	r0, r4, #11
 8005eae:	1d23      	adds	r3, r4, #4
 8005eb0:	f020 0007 	bic.w	r0, r0, #7
 8005eb4:	1ac2      	subs	r2, r0, r3
 8005eb6:	bf1c      	itt	ne
 8005eb8:	1a1b      	subne	r3, r3, r0
 8005eba:	50a3      	strne	r3, [r4, r2]
 8005ebc:	e7af      	b.n	8005e1e <_malloc_r+0x22>
 8005ebe:	6862      	ldr	r2, [r4, #4]
 8005ec0:	42a3      	cmp	r3, r4
 8005ec2:	bf0c      	ite	eq
 8005ec4:	f8c8 2000 	streq.w	r2, [r8]
 8005ec8:	605a      	strne	r2, [r3, #4]
 8005eca:	e7eb      	b.n	8005ea4 <_malloc_r+0xa8>
 8005ecc:	4623      	mov	r3, r4
 8005ece:	6864      	ldr	r4, [r4, #4]
 8005ed0:	e7ae      	b.n	8005e30 <_malloc_r+0x34>
 8005ed2:	463c      	mov	r4, r7
 8005ed4:	687f      	ldr	r7, [r7, #4]
 8005ed6:	e7b6      	b.n	8005e46 <_malloc_r+0x4a>
 8005ed8:	461a      	mov	r2, r3
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	42a3      	cmp	r3, r4
 8005ede:	d1fb      	bne.n	8005ed8 <_malloc_r+0xdc>
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	6053      	str	r3, [r2, #4]
 8005ee4:	e7de      	b.n	8005ea4 <_malloc_r+0xa8>
 8005ee6:	230c      	movs	r3, #12
 8005ee8:	6033      	str	r3, [r6, #0]
 8005eea:	4630      	mov	r0, r6
 8005eec:	f000 f80c 	bl	8005f08 <__malloc_unlock>
 8005ef0:	e794      	b.n	8005e1c <_malloc_r+0x20>
 8005ef2:	6005      	str	r5, [r0, #0]
 8005ef4:	e7d6      	b.n	8005ea4 <_malloc_r+0xa8>
 8005ef6:	bf00      	nop
 8005ef8:	20001c80 	.word	0x20001c80

08005efc <__malloc_lock>:
 8005efc:	4801      	ldr	r0, [pc, #4]	@ (8005f04 <__malloc_lock+0x8>)
 8005efe:	f7ff bf01 	b.w	8005d04 <__retarget_lock_acquire_recursive>
 8005f02:	bf00      	nop
 8005f04:	20001c78 	.word	0x20001c78

08005f08 <__malloc_unlock>:
 8005f08:	4801      	ldr	r0, [pc, #4]	@ (8005f10 <__malloc_unlock+0x8>)
 8005f0a:	f7ff befc 	b.w	8005d06 <__retarget_lock_release_recursive>
 8005f0e:	bf00      	nop
 8005f10:	20001c78 	.word	0x20001c78

08005f14 <__ssputs_r>:
 8005f14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f18:	688e      	ldr	r6, [r1, #8]
 8005f1a:	461f      	mov	r7, r3
 8005f1c:	42be      	cmp	r6, r7
 8005f1e:	680b      	ldr	r3, [r1, #0]
 8005f20:	4682      	mov	sl, r0
 8005f22:	460c      	mov	r4, r1
 8005f24:	4690      	mov	r8, r2
 8005f26:	d82d      	bhi.n	8005f84 <__ssputs_r+0x70>
 8005f28:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005f2c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005f30:	d026      	beq.n	8005f80 <__ssputs_r+0x6c>
 8005f32:	6965      	ldr	r5, [r4, #20]
 8005f34:	6909      	ldr	r1, [r1, #16]
 8005f36:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005f3a:	eba3 0901 	sub.w	r9, r3, r1
 8005f3e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005f42:	1c7b      	adds	r3, r7, #1
 8005f44:	444b      	add	r3, r9
 8005f46:	106d      	asrs	r5, r5, #1
 8005f48:	429d      	cmp	r5, r3
 8005f4a:	bf38      	it	cc
 8005f4c:	461d      	movcc	r5, r3
 8005f4e:	0553      	lsls	r3, r2, #21
 8005f50:	d527      	bpl.n	8005fa2 <__ssputs_r+0x8e>
 8005f52:	4629      	mov	r1, r5
 8005f54:	f7ff ff52 	bl	8005dfc <_malloc_r>
 8005f58:	4606      	mov	r6, r0
 8005f5a:	b360      	cbz	r0, 8005fb6 <__ssputs_r+0xa2>
 8005f5c:	6921      	ldr	r1, [r4, #16]
 8005f5e:	464a      	mov	r2, r9
 8005f60:	f7ff fed2 	bl	8005d08 <memcpy>
 8005f64:	89a3      	ldrh	r3, [r4, #12]
 8005f66:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005f6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f6e:	81a3      	strh	r3, [r4, #12]
 8005f70:	6126      	str	r6, [r4, #16]
 8005f72:	6165      	str	r5, [r4, #20]
 8005f74:	444e      	add	r6, r9
 8005f76:	eba5 0509 	sub.w	r5, r5, r9
 8005f7a:	6026      	str	r6, [r4, #0]
 8005f7c:	60a5      	str	r5, [r4, #8]
 8005f7e:	463e      	mov	r6, r7
 8005f80:	42be      	cmp	r6, r7
 8005f82:	d900      	bls.n	8005f86 <__ssputs_r+0x72>
 8005f84:	463e      	mov	r6, r7
 8005f86:	6820      	ldr	r0, [r4, #0]
 8005f88:	4632      	mov	r2, r6
 8005f8a:	4641      	mov	r1, r8
 8005f8c:	f000 faa8 	bl	80064e0 <memmove>
 8005f90:	68a3      	ldr	r3, [r4, #8]
 8005f92:	1b9b      	subs	r3, r3, r6
 8005f94:	60a3      	str	r3, [r4, #8]
 8005f96:	6823      	ldr	r3, [r4, #0]
 8005f98:	4433      	add	r3, r6
 8005f9a:	6023      	str	r3, [r4, #0]
 8005f9c:	2000      	movs	r0, #0
 8005f9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fa2:	462a      	mov	r2, r5
 8005fa4:	f000 fac6 	bl	8006534 <_realloc_r>
 8005fa8:	4606      	mov	r6, r0
 8005faa:	2800      	cmp	r0, #0
 8005fac:	d1e0      	bne.n	8005f70 <__ssputs_r+0x5c>
 8005fae:	6921      	ldr	r1, [r4, #16]
 8005fb0:	4650      	mov	r0, sl
 8005fb2:	f7ff feb7 	bl	8005d24 <_free_r>
 8005fb6:	230c      	movs	r3, #12
 8005fb8:	f8ca 3000 	str.w	r3, [sl]
 8005fbc:	89a3      	ldrh	r3, [r4, #12]
 8005fbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005fc2:	81a3      	strh	r3, [r4, #12]
 8005fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8005fc8:	e7e9      	b.n	8005f9e <__ssputs_r+0x8a>
	...

08005fcc <_svfiprintf_r>:
 8005fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fd0:	4698      	mov	r8, r3
 8005fd2:	898b      	ldrh	r3, [r1, #12]
 8005fd4:	061b      	lsls	r3, r3, #24
 8005fd6:	b09d      	sub	sp, #116	@ 0x74
 8005fd8:	4607      	mov	r7, r0
 8005fda:	460d      	mov	r5, r1
 8005fdc:	4614      	mov	r4, r2
 8005fde:	d510      	bpl.n	8006002 <_svfiprintf_r+0x36>
 8005fe0:	690b      	ldr	r3, [r1, #16]
 8005fe2:	b973      	cbnz	r3, 8006002 <_svfiprintf_r+0x36>
 8005fe4:	2140      	movs	r1, #64	@ 0x40
 8005fe6:	f7ff ff09 	bl	8005dfc <_malloc_r>
 8005fea:	6028      	str	r0, [r5, #0]
 8005fec:	6128      	str	r0, [r5, #16]
 8005fee:	b930      	cbnz	r0, 8005ffe <_svfiprintf_r+0x32>
 8005ff0:	230c      	movs	r3, #12
 8005ff2:	603b      	str	r3, [r7, #0]
 8005ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ff8:	b01d      	add	sp, #116	@ 0x74
 8005ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ffe:	2340      	movs	r3, #64	@ 0x40
 8006000:	616b      	str	r3, [r5, #20]
 8006002:	2300      	movs	r3, #0
 8006004:	9309      	str	r3, [sp, #36]	@ 0x24
 8006006:	2320      	movs	r3, #32
 8006008:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800600c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006010:	2330      	movs	r3, #48	@ 0x30
 8006012:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80061b0 <_svfiprintf_r+0x1e4>
 8006016:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800601a:	f04f 0901 	mov.w	r9, #1
 800601e:	4623      	mov	r3, r4
 8006020:	469a      	mov	sl, r3
 8006022:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006026:	b10a      	cbz	r2, 800602c <_svfiprintf_r+0x60>
 8006028:	2a25      	cmp	r2, #37	@ 0x25
 800602a:	d1f9      	bne.n	8006020 <_svfiprintf_r+0x54>
 800602c:	ebba 0b04 	subs.w	fp, sl, r4
 8006030:	d00b      	beq.n	800604a <_svfiprintf_r+0x7e>
 8006032:	465b      	mov	r3, fp
 8006034:	4622      	mov	r2, r4
 8006036:	4629      	mov	r1, r5
 8006038:	4638      	mov	r0, r7
 800603a:	f7ff ff6b 	bl	8005f14 <__ssputs_r>
 800603e:	3001      	adds	r0, #1
 8006040:	f000 80a7 	beq.w	8006192 <_svfiprintf_r+0x1c6>
 8006044:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006046:	445a      	add	r2, fp
 8006048:	9209      	str	r2, [sp, #36]	@ 0x24
 800604a:	f89a 3000 	ldrb.w	r3, [sl]
 800604e:	2b00      	cmp	r3, #0
 8006050:	f000 809f 	beq.w	8006192 <_svfiprintf_r+0x1c6>
 8006054:	2300      	movs	r3, #0
 8006056:	f04f 32ff 	mov.w	r2, #4294967295
 800605a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800605e:	f10a 0a01 	add.w	sl, sl, #1
 8006062:	9304      	str	r3, [sp, #16]
 8006064:	9307      	str	r3, [sp, #28]
 8006066:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800606a:	931a      	str	r3, [sp, #104]	@ 0x68
 800606c:	4654      	mov	r4, sl
 800606e:	2205      	movs	r2, #5
 8006070:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006074:	484e      	ldr	r0, [pc, #312]	@ (80061b0 <_svfiprintf_r+0x1e4>)
 8006076:	f7fa f8ab 	bl	80001d0 <memchr>
 800607a:	9a04      	ldr	r2, [sp, #16]
 800607c:	b9d8      	cbnz	r0, 80060b6 <_svfiprintf_r+0xea>
 800607e:	06d0      	lsls	r0, r2, #27
 8006080:	bf44      	itt	mi
 8006082:	2320      	movmi	r3, #32
 8006084:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006088:	0711      	lsls	r1, r2, #28
 800608a:	bf44      	itt	mi
 800608c:	232b      	movmi	r3, #43	@ 0x2b
 800608e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006092:	f89a 3000 	ldrb.w	r3, [sl]
 8006096:	2b2a      	cmp	r3, #42	@ 0x2a
 8006098:	d015      	beq.n	80060c6 <_svfiprintf_r+0xfa>
 800609a:	9a07      	ldr	r2, [sp, #28]
 800609c:	4654      	mov	r4, sl
 800609e:	2000      	movs	r0, #0
 80060a0:	f04f 0c0a 	mov.w	ip, #10
 80060a4:	4621      	mov	r1, r4
 80060a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80060aa:	3b30      	subs	r3, #48	@ 0x30
 80060ac:	2b09      	cmp	r3, #9
 80060ae:	d94b      	bls.n	8006148 <_svfiprintf_r+0x17c>
 80060b0:	b1b0      	cbz	r0, 80060e0 <_svfiprintf_r+0x114>
 80060b2:	9207      	str	r2, [sp, #28]
 80060b4:	e014      	b.n	80060e0 <_svfiprintf_r+0x114>
 80060b6:	eba0 0308 	sub.w	r3, r0, r8
 80060ba:	fa09 f303 	lsl.w	r3, r9, r3
 80060be:	4313      	orrs	r3, r2
 80060c0:	9304      	str	r3, [sp, #16]
 80060c2:	46a2      	mov	sl, r4
 80060c4:	e7d2      	b.n	800606c <_svfiprintf_r+0xa0>
 80060c6:	9b03      	ldr	r3, [sp, #12]
 80060c8:	1d19      	adds	r1, r3, #4
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	9103      	str	r1, [sp, #12]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	bfbb      	ittet	lt
 80060d2:	425b      	neglt	r3, r3
 80060d4:	f042 0202 	orrlt.w	r2, r2, #2
 80060d8:	9307      	strge	r3, [sp, #28]
 80060da:	9307      	strlt	r3, [sp, #28]
 80060dc:	bfb8      	it	lt
 80060de:	9204      	strlt	r2, [sp, #16]
 80060e0:	7823      	ldrb	r3, [r4, #0]
 80060e2:	2b2e      	cmp	r3, #46	@ 0x2e
 80060e4:	d10a      	bne.n	80060fc <_svfiprintf_r+0x130>
 80060e6:	7863      	ldrb	r3, [r4, #1]
 80060e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80060ea:	d132      	bne.n	8006152 <_svfiprintf_r+0x186>
 80060ec:	9b03      	ldr	r3, [sp, #12]
 80060ee:	1d1a      	adds	r2, r3, #4
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	9203      	str	r2, [sp, #12]
 80060f4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80060f8:	3402      	adds	r4, #2
 80060fa:	9305      	str	r3, [sp, #20]
 80060fc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80061c0 <_svfiprintf_r+0x1f4>
 8006100:	7821      	ldrb	r1, [r4, #0]
 8006102:	2203      	movs	r2, #3
 8006104:	4650      	mov	r0, sl
 8006106:	f7fa f863 	bl	80001d0 <memchr>
 800610a:	b138      	cbz	r0, 800611c <_svfiprintf_r+0x150>
 800610c:	9b04      	ldr	r3, [sp, #16]
 800610e:	eba0 000a 	sub.w	r0, r0, sl
 8006112:	2240      	movs	r2, #64	@ 0x40
 8006114:	4082      	lsls	r2, r0
 8006116:	4313      	orrs	r3, r2
 8006118:	3401      	adds	r4, #1
 800611a:	9304      	str	r3, [sp, #16]
 800611c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006120:	4824      	ldr	r0, [pc, #144]	@ (80061b4 <_svfiprintf_r+0x1e8>)
 8006122:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006126:	2206      	movs	r2, #6
 8006128:	f7fa f852 	bl	80001d0 <memchr>
 800612c:	2800      	cmp	r0, #0
 800612e:	d036      	beq.n	800619e <_svfiprintf_r+0x1d2>
 8006130:	4b21      	ldr	r3, [pc, #132]	@ (80061b8 <_svfiprintf_r+0x1ec>)
 8006132:	bb1b      	cbnz	r3, 800617c <_svfiprintf_r+0x1b0>
 8006134:	9b03      	ldr	r3, [sp, #12]
 8006136:	3307      	adds	r3, #7
 8006138:	f023 0307 	bic.w	r3, r3, #7
 800613c:	3308      	adds	r3, #8
 800613e:	9303      	str	r3, [sp, #12]
 8006140:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006142:	4433      	add	r3, r6
 8006144:	9309      	str	r3, [sp, #36]	@ 0x24
 8006146:	e76a      	b.n	800601e <_svfiprintf_r+0x52>
 8006148:	fb0c 3202 	mla	r2, ip, r2, r3
 800614c:	460c      	mov	r4, r1
 800614e:	2001      	movs	r0, #1
 8006150:	e7a8      	b.n	80060a4 <_svfiprintf_r+0xd8>
 8006152:	2300      	movs	r3, #0
 8006154:	3401      	adds	r4, #1
 8006156:	9305      	str	r3, [sp, #20]
 8006158:	4619      	mov	r1, r3
 800615a:	f04f 0c0a 	mov.w	ip, #10
 800615e:	4620      	mov	r0, r4
 8006160:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006164:	3a30      	subs	r2, #48	@ 0x30
 8006166:	2a09      	cmp	r2, #9
 8006168:	d903      	bls.n	8006172 <_svfiprintf_r+0x1a6>
 800616a:	2b00      	cmp	r3, #0
 800616c:	d0c6      	beq.n	80060fc <_svfiprintf_r+0x130>
 800616e:	9105      	str	r1, [sp, #20]
 8006170:	e7c4      	b.n	80060fc <_svfiprintf_r+0x130>
 8006172:	fb0c 2101 	mla	r1, ip, r1, r2
 8006176:	4604      	mov	r4, r0
 8006178:	2301      	movs	r3, #1
 800617a:	e7f0      	b.n	800615e <_svfiprintf_r+0x192>
 800617c:	ab03      	add	r3, sp, #12
 800617e:	9300      	str	r3, [sp, #0]
 8006180:	462a      	mov	r2, r5
 8006182:	4b0e      	ldr	r3, [pc, #56]	@ (80061bc <_svfiprintf_r+0x1f0>)
 8006184:	a904      	add	r1, sp, #16
 8006186:	4638      	mov	r0, r7
 8006188:	f3af 8000 	nop.w
 800618c:	1c42      	adds	r2, r0, #1
 800618e:	4606      	mov	r6, r0
 8006190:	d1d6      	bne.n	8006140 <_svfiprintf_r+0x174>
 8006192:	89ab      	ldrh	r3, [r5, #12]
 8006194:	065b      	lsls	r3, r3, #25
 8006196:	f53f af2d 	bmi.w	8005ff4 <_svfiprintf_r+0x28>
 800619a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800619c:	e72c      	b.n	8005ff8 <_svfiprintf_r+0x2c>
 800619e:	ab03      	add	r3, sp, #12
 80061a0:	9300      	str	r3, [sp, #0]
 80061a2:	462a      	mov	r2, r5
 80061a4:	4b05      	ldr	r3, [pc, #20]	@ (80061bc <_svfiprintf_r+0x1f0>)
 80061a6:	a904      	add	r1, sp, #16
 80061a8:	4638      	mov	r0, r7
 80061aa:	f000 f879 	bl	80062a0 <_printf_i>
 80061ae:	e7ed      	b.n	800618c <_svfiprintf_r+0x1c0>
 80061b0:	08006658 	.word	0x08006658
 80061b4:	08006662 	.word	0x08006662
 80061b8:	00000000 	.word	0x00000000
 80061bc:	08005f15 	.word	0x08005f15
 80061c0:	0800665e 	.word	0x0800665e

080061c4 <_printf_common>:
 80061c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061c8:	4616      	mov	r6, r2
 80061ca:	4698      	mov	r8, r3
 80061cc:	688a      	ldr	r2, [r1, #8]
 80061ce:	690b      	ldr	r3, [r1, #16]
 80061d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80061d4:	4293      	cmp	r3, r2
 80061d6:	bfb8      	it	lt
 80061d8:	4613      	movlt	r3, r2
 80061da:	6033      	str	r3, [r6, #0]
 80061dc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80061e0:	4607      	mov	r7, r0
 80061e2:	460c      	mov	r4, r1
 80061e4:	b10a      	cbz	r2, 80061ea <_printf_common+0x26>
 80061e6:	3301      	adds	r3, #1
 80061e8:	6033      	str	r3, [r6, #0]
 80061ea:	6823      	ldr	r3, [r4, #0]
 80061ec:	0699      	lsls	r1, r3, #26
 80061ee:	bf42      	ittt	mi
 80061f0:	6833      	ldrmi	r3, [r6, #0]
 80061f2:	3302      	addmi	r3, #2
 80061f4:	6033      	strmi	r3, [r6, #0]
 80061f6:	6825      	ldr	r5, [r4, #0]
 80061f8:	f015 0506 	ands.w	r5, r5, #6
 80061fc:	d106      	bne.n	800620c <_printf_common+0x48>
 80061fe:	f104 0a19 	add.w	sl, r4, #25
 8006202:	68e3      	ldr	r3, [r4, #12]
 8006204:	6832      	ldr	r2, [r6, #0]
 8006206:	1a9b      	subs	r3, r3, r2
 8006208:	42ab      	cmp	r3, r5
 800620a:	dc26      	bgt.n	800625a <_printf_common+0x96>
 800620c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006210:	6822      	ldr	r2, [r4, #0]
 8006212:	3b00      	subs	r3, #0
 8006214:	bf18      	it	ne
 8006216:	2301      	movne	r3, #1
 8006218:	0692      	lsls	r2, r2, #26
 800621a:	d42b      	bmi.n	8006274 <_printf_common+0xb0>
 800621c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006220:	4641      	mov	r1, r8
 8006222:	4638      	mov	r0, r7
 8006224:	47c8      	blx	r9
 8006226:	3001      	adds	r0, #1
 8006228:	d01e      	beq.n	8006268 <_printf_common+0xa4>
 800622a:	6823      	ldr	r3, [r4, #0]
 800622c:	6922      	ldr	r2, [r4, #16]
 800622e:	f003 0306 	and.w	r3, r3, #6
 8006232:	2b04      	cmp	r3, #4
 8006234:	bf02      	ittt	eq
 8006236:	68e5      	ldreq	r5, [r4, #12]
 8006238:	6833      	ldreq	r3, [r6, #0]
 800623a:	1aed      	subeq	r5, r5, r3
 800623c:	68a3      	ldr	r3, [r4, #8]
 800623e:	bf0c      	ite	eq
 8006240:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006244:	2500      	movne	r5, #0
 8006246:	4293      	cmp	r3, r2
 8006248:	bfc4      	itt	gt
 800624a:	1a9b      	subgt	r3, r3, r2
 800624c:	18ed      	addgt	r5, r5, r3
 800624e:	2600      	movs	r6, #0
 8006250:	341a      	adds	r4, #26
 8006252:	42b5      	cmp	r5, r6
 8006254:	d11a      	bne.n	800628c <_printf_common+0xc8>
 8006256:	2000      	movs	r0, #0
 8006258:	e008      	b.n	800626c <_printf_common+0xa8>
 800625a:	2301      	movs	r3, #1
 800625c:	4652      	mov	r2, sl
 800625e:	4641      	mov	r1, r8
 8006260:	4638      	mov	r0, r7
 8006262:	47c8      	blx	r9
 8006264:	3001      	adds	r0, #1
 8006266:	d103      	bne.n	8006270 <_printf_common+0xac>
 8006268:	f04f 30ff 	mov.w	r0, #4294967295
 800626c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006270:	3501      	adds	r5, #1
 8006272:	e7c6      	b.n	8006202 <_printf_common+0x3e>
 8006274:	18e1      	adds	r1, r4, r3
 8006276:	1c5a      	adds	r2, r3, #1
 8006278:	2030      	movs	r0, #48	@ 0x30
 800627a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800627e:	4422      	add	r2, r4
 8006280:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006284:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006288:	3302      	adds	r3, #2
 800628a:	e7c7      	b.n	800621c <_printf_common+0x58>
 800628c:	2301      	movs	r3, #1
 800628e:	4622      	mov	r2, r4
 8006290:	4641      	mov	r1, r8
 8006292:	4638      	mov	r0, r7
 8006294:	47c8      	blx	r9
 8006296:	3001      	adds	r0, #1
 8006298:	d0e6      	beq.n	8006268 <_printf_common+0xa4>
 800629a:	3601      	adds	r6, #1
 800629c:	e7d9      	b.n	8006252 <_printf_common+0x8e>
	...

080062a0 <_printf_i>:
 80062a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062a4:	7e0f      	ldrb	r7, [r1, #24]
 80062a6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80062a8:	2f78      	cmp	r7, #120	@ 0x78
 80062aa:	4691      	mov	r9, r2
 80062ac:	4680      	mov	r8, r0
 80062ae:	460c      	mov	r4, r1
 80062b0:	469a      	mov	sl, r3
 80062b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80062b6:	d807      	bhi.n	80062c8 <_printf_i+0x28>
 80062b8:	2f62      	cmp	r7, #98	@ 0x62
 80062ba:	d80a      	bhi.n	80062d2 <_printf_i+0x32>
 80062bc:	2f00      	cmp	r7, #0
 80062be:	f000 80d2 	beq.w	8006466 <_printf_i+0x1c6>
 80062c2:	2f58      	cmp	r7, #88	@ 0x58
 80062c4:	f000 80b9 	beq.w	800643a <_printf_i+0x19a>
 80062c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80062cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80062d0:	e03a      	b.n	8006348 <_printf_i+0xa8>
 80062d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80062d6:	2b15      	cmp	r3, #21
 80062d8:	d8f6      	bhi.n	80062c8 <_printf_i+0x28>
 80062da:	a101      	add	r1, pc, #4	@ (adr r1, 80062e0 <_printf_i+0x40>)
 80062dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80062e0:	08006339 	.word	0x08006339
 80062e4:	0800634d 	.word	0x0800634d
 80062e8:	080062c9 	.word	0x080062c9
 80062ec:	080062c9 	.word	0x080062c9
 80062f0:	080062c9 	.word	0x080062c9
 80062f4:	080062c9 	.word	0x080062c9
 80062f8:	0800634d 	.word	0x0800634d
 80062fc:	080062c9 	.word	0x080062c9
 8006300:	080062c9 	.word	0x080062c9
 8006304:	080062c9 	.word	0x080062c9
 8006308:	080062c9 	.word	0x080062c9
 800630c:	0800644d 	.word	0x0800644d
 8006310:	08006377 	.word	0x08006377
 8006314:	08006407 	.word	0x08006407
 8006318:	080062c9 	.word	0x080062c9
 800631c:	080062c9 	.word	0x080062c9
 8006320:	0800646f 	.word	0x0800646f
 8006324:	080062c9 	.word	0x080062c9
 8006328:	08006377 	.word	0x08006377
 800632c:	080062c9 	.word	0x080062c9
 8006330:	080062c9 	.word	0x080062c9
 8006334:	0800640f 	.word	0x0800640f
 8006338:	6833      	ldr	r3, [r6, #0]
 800633a:	1d1a      	adds	r2, r3, #4
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	6032      	str	r2, [r6, #0]
 8006340:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006344:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006348:	2301      	movs	r3, #1
 800634a:	e09d      	b.n	8006488 <_printf_i+0x1e8>
 800634c:	6833      	ldr	r3, [r6, #0]
 800634e:	6820      	ldr	r0, [r4, #0]
 8006350:	1d19      	adds	r1, r3, #4
 8006352:	6031      	str	r1, [r6, #0]
 8006354:	0606      	lsls	r6, r0, #24
 8006356:	d501      	bpl.n	800635c <_printf_i+0xbc>
 8006358:	681d      	ldr	r5, [r3, #0]
 800635a:	e003      	b.n	8006364 <_printf_i+0xc4>
 800635c:	0645      	lsls	r5, r0, #25
 800635e:	d5fb      	bpl.n	8006358 <_printf_i+0xb8>
 8006360:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006364:	2d00      	cmp	r5, #0
 8006366:	da03      	bge.n	8006370 <_printf_i+0xd0>
 8006368:	232d      	movs	r3, #45	@ 0x2d
 800636a:	426d      	negs	r5, r5
 800636c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006370:	4859      	ldr	r0, [pc, #356]	@ (80064d8 <_printf_i+0x238>)
 8006372:	230a      	movs	r3, #10
 8006374:	e011      	b.n	800639a <_printf_i+0xfa>
 8006376:	6821      	ldr	r1, [r4, #0]
 8006378:	6833      	ldr	r3, [r6, #0]
 800637a:	0608      	lsls	r0, r1, #24
 800637c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006380:	d402      	bmi.n	8006388 <_printf_i+0xe8>
 8006382:	0649      	lsls	r1, r1, #25
 8006384:	bf48      	it	mi
 8006386:	b2ad      	uxthmi	r5, r5
 8006388:	2f6f      	cmp	r7, #111	@ 0x6f
 800638a:	4853      	ldr	r0, [pc, #332]	@ (80064d8 <_printf_i+0x238>)
 800638c:	6033      	str	r3, [r6, #0]
 800638e:	bf14      	ite	ne
 8006390:	230a      	movne	r3, #10
 8006392:	2308      	moveq	r3, #8
 8006394:	2100      	movs	r1, #0
 8006396:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800639a:	6866      	ldr	r6, [r4, #4]
 800639c:	60a6      	str	r6, [r4, #8]
 800639e:	2e00      	cmp	r6, #0
 80063a0:	bfa2      	ittt	ge
 80063a2:	6821      	ldrge	r1, [r4, #0]
 80063a4:	f021 0104 	bicge.w	r1, r1, #4
 80063a8:	6021      	strge	r1, [r4, #0]
 80063aa:	b90d      	cbnz	r5, 80063b0 <_printf_i+0x110>
 80063ac:	2e00      	cmp	r6, #0
 80063ae:	d04b      	beq.n	8006448 <_printf_i+0x1a8>
 80063b0:	4616      	mov	r6, r2
 80063b2:	fbb5 f1f3 	udiv	r1, r5, r3
 80063b6:	fb03 5711 	mls	r7, r3, r1, r5
 80063ba:	5dc7      	ldrb	r7, [r0, r7]
 80063bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80063c0:	462f      	mov	r7, r5
 80063c2:	42bb      	cmp	r3, r7
 80063c4:	460d      	mov	r5, r1
 80063c6:	d9f4      	bls.n	80063b2 <_printf_i+0x112>
 80063c8:	2b08      	cmp	r3, #8
 80063ca:	d10b      	bne.n	80063e4 <_printf_i+0x144>
 80063cc:	6823      	ldr	r3, [r4, #0]
 80063ce:	07df      	lsls	r7, r3, #31
 80063d0:	d508      	bpl.n	80063e4 <_printf_i+0x144>
 80063d2:	6923      	ldr	r3, [r4, #16]
 80063d4:	6861      	ldr	r1, [r4, #4]
 80063d6:	4299      	cmp	r1, r3
 80063d8:	bfde      	ittt	le
 80063da:	2330      	movle	r3, #48	@ 0x30
 80063dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80063e0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80063e4:	1b92      	subs	r2, r2, r6
 80063e6:	6122      	str	r2, [r4, #16]
 80063e8:	f8cd a000 	str.w	sl, [sp]
 80063ec:	464b      	mov	r3, r9
 80063ee:	aa03      	add	r2, sp, #12
 80063f0:	4621      	mov	r1, r4
 80063f2:	4640      	mov	r0, r8
 80063f4:	f7ff fee6 	bl	80061c4 <_printf_common>
 80063f8:	3001      	adds	r0, #1
 80063fa:	d14a      	bne.n	8006492 <_printf_i+0x1f2>
 80063fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006400:	b004      	add	sp, #16
 8006402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006406:	6823      	ldr	r3, [r4, #0]
 8006408:	f043 0320 	orr.w	r3, r3, #32
 800640c:	6023      	str	r3, [r4, #0]
 800640e:	4833      	ldr	r0, [pc, #204]	@ (80064dc <_printf_i+0x23c>)
 8006410:	2778      	movs	r7, #120	@ 0x78
 8006412:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006416:	6823      	ldr	r3, [r4, #0]
 8006418:	6831      	ldr	r1, [r6, #0]
 800641a:	061f      	lsls	r7, r3, #24
 800641c:	f851 5b04 	ldr.w	r5, [r1], #4
 8006420:	d402      	bmi.n	8006428 <_printf_i+0x188>
 8006422:	065f      	lsls	r7, r3, #25
 8006424:	bf48      	it	mi
 8006426:	b2ad      	uxthmi	r5, r5
 8006428:	6031      	str	r1, [r6, #0]
 800642a:	07d9      	lsls	r1, r3, #31
 800642c:	bf44      	itt	mi
 800642e:	f043 0320 	orrmi.w	r3, r3, #32
 8006432:	6023      	strmi	r3, [r4, #0]
 8006434:	b11d      	cbz	r5, 800643e <_printf_i+0x19e>
 8006436:	2310      	movs	r3, #16
 8006438:	e7ac      	b.n	8006394 <_printf_i+0xf4>
 800643a:	4827      	ldr	r0, [pc, #156]	@ (80064d8 <_printf_i+0x238>)
 800643c:	e7e9      	b.n	8006412 <_printf_i+0x172>
 800643e:	6823      	ldr	r3, [r4, #0]
 8006440:	f023 0320 	bic.w	r3, r3, #32
 8006444:	6023      	str	r3, [r4, #0]
 8006446:	e7f6      	b.n	8006436 <_printf_i+0x196>
 8006448:	4616      	mov	r6, r2
 800644a:	e7bd      	b.n	80063c8 <_printf_i+0x128>
 800644c:	6833      	ldr	r3, [r6, #0]
 800644e:	6825      	ldr	r5, [r4, #0]
 8006450:	6961      	ldr	r1, [r4, #20]
 8006452:	1d18      	adds	r0, r3, #4
 8006454:	6030      	str	r0, [r6, #0]
 8006456:	062e      	lsls	r6, r5, #24
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	d501      	bpl.n	8006460 <_printf_i+0x1c0>
 800645c:	6019      	str	r1, [r3, #0]
 800645e:	e002      	b.n	8006466 <_printf_i+0x1c6>
 8006460:	0668      	lsls	r0, r5, #25
 8006462:	d5fb      	bpl.n	800645c <_printf_i+0x1bc>
 8006464:	8019      	strh	r1, [r3, #0]
 8006466:	2300      	movs	r3, #0
 8006468:	6123      	str	r3, [r4, #16]
 800646a:	4616      	mov	r6, r2
 800646c:	e7bc      	b.n	80063e8 <_printf_i+0x148>
 800646e:	6833      	ldr	r3, [r6, #0]
 8006470:	1d1a      	adds	r2, r3, #4
 8006472:	6032      	str	r2, [r6, #0]
 8006474:	681e      	ldr	r6, [r3, #0]
 8006476:	6862      	ldr	r2, [r4, #4]
 8006478:	2100      	movs	r1, #0
 800647a:	4630      	mov	r0, r6
 800647c:	f7f9 fea8 	bl	80001d0 <memchr>
 8006480:	b108      	cbz	r0, 8006486 <_printf_i+0x1e6>
 8006482:	1b80      	subs	r0, r0, r6
 8006484:	6060      	str	r0, [r4, #4]
 8006486:	6863      	ldr	r3, [r4, #4]
 8006488:	6123      	str	r3, [r4, #16]
 800648a:	2300      	movs	r3, #0
 800648c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006490:	e7aa      	b.n	80063e8 <_printf_i+0x148>
 8006492:	6923      	ldr	r3, [r4, #16]
 8006494:	4632      	mov	r2, r6
 8006496:	4649      	mov	r1, r9
 8006498:	4640      	mov	r0, r8
 800649a:	47d0      	blx	sl
 800649c:	3001      	adds	r0, #1
 800649e:	d0ad      	beq.n	80063fc <_printf_i+0x15c>
 80064a0:	6823      	ldr	r3, [r4, #0]
 80064a2:	079b      	lsls	r3, r3, #30
 80064a4:	d413      	bmi.n	80064ce <_printf_i+0x22e>
 80064a6:	68e0      	ldr	r0, [r4, #12]
 80064a8:	9b03      	ldr	r3, [sp, #12]
 80064aa:	4298      	cmp	r0, r3
 80064ac:	bfb8      	it	lt
 80064ae:	4618      	movlt	r0, r3
 80064b0:	e7a6      	b.n	8006400 <_printf_i+0x160>
 80064b2:	2301      	movs	r3, #1
 80064b4:	4632      	mov	r2, r6
 80064b6:	4649      	mov	r1, r9
 80064b8:	4640      	mov	r0, r8
 80064ba:	47d0      	blx	sl
 80064bc:	3001      	adds	r0, #1
 80064be:	d09d      	beq.n	80063fc <_printf_i+0x15c>
 80064c0:	3501      	adds	r5, #1
 80064c2:	68e3      	ldr	r3, [r4, #12]
 80064c4:	9903      	ldr	r1, [sp, #12]
 80064c6:	1a5b      	subs	r3, r3, r1
 80064c8:	42ab      	cmp	r3, r5
 80064ca:	dcf2      	bgt.n	80064b2 <_printf_i+0x212>
 80064cc:	e7eb      	b.n	80064a6 <_printf_i+0x206>
 80064ce:	2500      	movs	r5, #0
 80064d0:	f104 0619 	add.w	r6, r4, #25
 80064d4:	e7f5      	b.n	80064c2 <_printf_i+0x222>
 80064d6:	bf00      	nop
 80064d8:	08006669 	.word	0x08006669
 80064dc:	0800667a 	.word	0x0800667a

080064e0 <memmove>:
 80064e0:	4288      	cmp	r0, r1
 80064e2:	b510      	push	{r4, lr}
 80064e4:	eb01 0402 	add.w	r4, r1, r2
 80064e8:	d902      	bls.n	80064f0 <memmove+0x10>
 80064ea:	4284      	cmp	r4, r0
 80064ec:	4623      	mov	r3, r4
 80064ee:	d807      	bhi.n	8006500 <memmove+0x20>
 80064f0:	1e43      	subs	r3, r0, #1
 80064f2:	42a1      	cmp	r1, r4
 80064f4:	d008      	beq.n	8006508 <memmove+0x28>
 80064f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80064fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80064fe:	e7f8      	b.n	80064f2 <memmove+0x12>
 8006500:	4402      	add	r2, r0
 8006502:	4601      	mov	r1, r0
 8006504:	428a      	cmp	r2, r1
 8006506:	d100      	bne.n	800650a <memmove+0x2a>
 8006508:	bd10      	pop	{r4, pc}
 800650a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800650e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006512:	e7f7      	b.n	8006504 <memmove+0x24>

08006514 <_sbrk_r>:
 8006514:	b538      	push	{r3, r4, r5, lr}
 8006516:	4d06      	ldr	r5, [pc, #24]	@ (8006530 <_sbrk_r+0x1c>)
 8006518:	2300      	movs	r3, #0
 800651a:	4604      	mov	r4, r0
 800651c:	4608      	mov	r0, r1
 800651e:	602b      	str	r3, [r5, #0]
 8006520:	f7fa f8e2 	bl	80006e8 <_sbrk>
 8006524:	1c43      	adds	r3, r0, #1
 8006526:	d102      	bne.n	800652e <_sbrk_r+0x1a>
 8006528:	682b      	ldr	r3, [r5, #0]
 800652a:	b103      	cbz	r3, 800652e <_sbrk_r+0x1a>
 800652c:	6023      	str	r3, [r4, #0]
 800652e:	bd38      	pop	{r3, r4, r5, pc}
 8006530:	20001c74 	.word	0x20001c74

08006534 <_realloc_r>:
 8006534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006538:	4680      	mov	r8, r0
 800653a:	4615      	mov	r5, r2
 800653c:	460c      	mov	r4, r1
 800653e:	b921      	cbnz	r1, 800654a <_realloc_r+0x16>
 8006540:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006544:	4611      	mov	r1, r2
 8006546:	f7ff bc59 	b.w	8005dfc <_malloc_r>
 800654a:	b92a      	cbnz	r2, 8006558 <_realloc_r+0x24>
 800654c:	f7ff fbea 	bl	8005d24 <_free_r>
 8006550:	2400      	movs	r4, #0
 8006552:	4620      	mov	r0, r4
 8006554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006558:	f000 f81a 	bl	8006590 <_malloc_usable_size_r>
 800655c:	4285      	cmp	r5, r0
 800655e:	4606      	mov	r6, r0
 8006560:	d802      	bhi.n	8006568 <_realloc_r+0x34>
 8006562:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006566:	d8f4      	bhi.n	8006552 <_realloc_r+0x1e>
 8006568:	4629      	mov	r1, r5
 800656a:	4640      	mov	r0, r8
 800656c:	f7ff fc46 	bl	8005dfc <_malloc_r>
 8006570:	4607      	mov	r7, r0
 8006572:	2800      	cmp	r0, #0
 8006574:	d0ec      	beq.n	8006550 <_realloc_r+0x1c>
 8006576:	42b5      	cmp	r5, r6
 8006578:	462a      	mov	r2, r5
 800657a:	4621      	mov	r1, r4
 800657c:	bf28      	it	cs
 800657e:	4632      	movcs	r2, r6
 8006580:	f7ff fbc2 	bl	8005d08 <memcpy>
 8006584:	4621      	mov	r1, r4
 8006586:	4640      	mov	r0, r8
 8006588:	f7ff fbcc 	bl	8005d24 <_free_r>
 800658c:	463c      	mov	r4, r7
 800658e:	e7e0      	b.n	8006552 <_realloc_r+0x1e>

08006590 <_malloc_usable_size_r>:
 8006590:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006594:	1f18      	subs	r0, r3, #4
 8006596:	2b00      	cmp	r3, #0
 8006598:	bfbc      	itt	lt
 800659a:	580b      	ldrlt	r3, [r1, r0]
 800659c:	18c0      	addlt	r0, r0, r3
 800659e:	4770      	bx	lr

080065a0 <_init>:
 80065a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065a2:	bf00      	nop
 80065a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065a6:	bc08      	pop	{r3}
 80065a8:	469e      	mov	lr, r3
 80065aa:	4770      	bx	lr

080065ac <_fini>:
 80065ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ae:	bf00      	nop
 80065b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065b2:	bc08      	pop	{r3}
 80065b4:	469e      	mov	lr, r3
 80065b6:	4770      	bx	lr
