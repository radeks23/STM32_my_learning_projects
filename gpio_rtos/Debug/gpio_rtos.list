
gpio_rtos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fa4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08006144  08006144  00007144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061cc  080061cc  00008060  2**0
                  CONTENTS
  4 .ARM          00000000  080061cc  080061cc  00008060  2**0
                  CONTENTS
  5 .preinit_array 00000000  080061cc  080061cc  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061cc  080061cc  000071cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080061d0  080061d0  000071d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080061d4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008060  2**0
                  CONTENTS
 10 .bss          00001c18  20000060  20000060  00008060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001c78  20001c78  00008060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018d46  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000031c8  00000000  00000000  00020dd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001360  00000000  00000000  00023fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f26  00000000  00000000  00025300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002df9  00000000  00000000  00026226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017f4f  00000000  00000000  0002901f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3855  00000000  00000000  00040f6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001147c3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005478  00000000  00000000  00114808  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  00119c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800612c 	.word	0x0800612c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	0800612c 	.word	0x0800612c

080001e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	af00      	add	r7, sp, #0
  HAL_Init();
 80001e4:	f000 fa72 	bl	80006cc <HAL_Init>
  SystemClock_Config();
 80001e8:	f000 f827 	bl	800023a <SystemClock_Config>
  MX_GPIO_Init();
 80001ec:	f000 f8b4 	bl	8000358 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001f0:	f000 f882 	bl	80002f8 <MX_USART2_UART_Init>
  osKernelInitialize();
 80001f4:	f003 f904 	bl	8003400 <osKernelInitialize>
  //defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
  ledTaskHandler = osThreadNew(StartLedTask, NULL, &ledTask_attributes);
 80001f8:	4a05      	ldr	r2, [pc, #20]	@ (8000210 <main+0x30>)
 80001fa:	2100      	movs	r1, #0
 80001fc:	4805      	ldr	r0, [pc, #20]	@ (8000214 <main+0x34>)
 80001fe:	f003 f967 	bl	80034d0 <osThreadNew>
 8000202:	4603      	mov	r3, r0
 8000204:	4a04      	ldr	r2, [pc, #16]	@ (8000218 <main+0x38>)
 8000206:	6013      	str	r3, [r2, #0]
  osKernelStart();
 8000208:	f003 f92e 	bl	8003468 <osKernelStart>

  while (1)
 800020c:	bf00      	nop
 800020e:	e7fd      	b.n	800020c <main+0x2c>
 8000210:	08006170 	.word	0x08006170
 8000214:	0800021d 	.word	0x0800021d
 8000218:	20000104 	.word	0x20000104

0800021c <StartLedTask>:
  {
  }
}

void StartLedTask(void *argument) {
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
    for (;;) {
        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000224:	2120      	movs	r1, #32
 8000226:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800022a:	f000 fd09 	bl	8000c40 <HAL_GPIO_TogglePin>
        osDelay(1000);
 800022e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000232:	f003 f9f7 	bl	8003624 <osDelay>
        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000236:	bf00      	nop
 8000238:	e7f4      	b.n	8000224 <StartLedTask+0x8>

0800023a <SystemClock_Config>:
    }
}

void SystemClock_Config(void)
{
 800023a:	b580      	push	{r7, lr}
 800023c:	b0a6      	sub	sp, #152	@ 0x98
 800023e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000240:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000244:	2228      	movs	r2, #40	@ 0x28
 8000246:	2100      	movs	r1, #0
 8000248:	4618      	mov	r0, r3
 800024a:	f005 fe87 	bl	8005f5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800024e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000252:	2200      	movs	r2, #0
 8000254:	601a      	str	r2, [r3, #0]
 8000256:	605a      	str	r2, [r3, #4]
 8000258:	609a      	str	r2, [r3, #8]
 800025a:	60da      	str	r2, [r3, #12]
 800025c:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800025e:	1d3b      	adds	r3, r7, #4
 8000260:	2258      	movs	r2, #88	@ 0x58
 8000262:	2100      	movs	r1, #0
 8000264:	4618      	mov	r0, r3
 8000266:	f005 fe79 	bl	8005f5c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800026a:	2302      	movs	r3, #2
 800026c:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800026e:	2301      	movs	r3, #1
 8000270:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000272:	2310      	movs	r3, #16
 8000274:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000278:	2302      	movs	r3, #2
 800027a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800027e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000282:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000286:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800028a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800028e:	2300      	movs	r3, #0
 8000290:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000294:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000298:	4618      	mov	r0, r3
 800029a:	f000 fceb 	bl	8000c74 <HAL_RCC_OscConfig>
 800029e:	4603      	mov	r3, r0
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d001      	beq.n	80002a8 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002a4:	f000 f8d0 	bl	8000448 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002a8:	230f      	movs	r3, #15
 80002aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ac:	2302      	movs	r3, #2
 80002ae:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002b0:	2300      	movs	r3, #0
 80002b2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002b8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ba:	2300      	movs	r3, #0
 80002bc:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002be:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80002c2:	2102      	movs	r1, #2
 80002c4:	4618      	mov	r0, r3
 80002c6:	f001 fd29 	bl	8001d1c <HAL_RCC_ClockConfig>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d001      	beq.n	80002d4 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80002d0:	f000 f8ba 	bl	8000448 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80002d4:	2302      	movs	r3, #2
 80002d6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80002d8:	2300      	movs	r3, #0
 80002da:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002dc:	1d3b      	adds	r3, r7, #4
 80002de:	4618      	mov	r0, r3
 80002e0:	f001 ff6e 	bl	80021c0 <HAL_RCCEx_PeriphCLKConfig>
 80002e4:	4603      	mov	r3, r0
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80002ea:	f000 f8ad 	bl	8000448 <Error_Handler>
  }
}
 80002ee:	bf00      	nop
 80002f0:	3798      	adds	r7, #152	@ 0x98
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}
	...

080002f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80002fc:	4b14      	ldr	r3, [pc, #80]	@ (8000350 <MX_USART2_UART_Init+0x58>)
 80002fe:	4a15      	ldr	r2, [pc, #84]	@ (8000354 <MX_USART2_UART_Init+0x5c>)
 8000300:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000302:	4b13      	ldr	r3, [pc, #76]	@ (8000350 <MX_USART2_UART_Init+0x58>)
 8000304:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000308:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800030a:	4b11      	ldr	r3, [pc, #68]	@ (8000350 <MX_USART2_UART_Init+0x58>)
 800030c:	2200      	movs	r2, #0
 800030e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000310:	4b0f      	ldr	r3, [pc, #60]	@ (8000350 <MX_USART2_UART_Init+0x58>)
 8000312:	2200      	movs	r2, #0
 8000314:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000316:	4b0e      	ldr	r3, [pc, #56]	@ (8000350 <MX_USART2_UART_Init+0x58>)
 8000318:	2200      	movs	r2, #0
 800031a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800031c:	4b0c      	ldr	r3, [pc, #48]	@ (8000350 <MX_USART2_UART_Init+0x58>)
 800031e:	220c      	movs	r2, #12
 8000320:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000322:	4b0b      	ldr	r3, [pc, #44]	@ (8000350 <MX_USART2_UART_Init+0x58>)
 8000324:	2200      	movs	r2, #0
 8000326:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000328:	4b09      	ldr	r3, [pc, #36]	@ (8000350 <MX_USART2_UART_Init+0x58>)
 800032a:	2200      	movs	r2, #0
 800032c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800032e:	4b08      	ldr	r3, [pc, #32]	@ (8000350 <MX_USART2_UART_Init+0x58>)
 8000330:	2200      	movs	r2, #0
 8000332:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000334:	4b06      	ldr	r3, [pc, #24]	@ (8000350 <MX_USART2_UART_Init+0x58>)
 8000336:	2200      	movs	r2, #0
 8000338:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800033a:	4805      	ldr	r0, [pc, #20]	@ (8000350 <MX_USART2_UART_Init+0x58>)
 800033c:	f002 fc22 	bl	8002b84 <HAL_UART_Init>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000346:	f000 f87f 	bl	8000448 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800034a:	bf00      	nop
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	2000007c 	.word	0x2000007c
 8000354:	40004400 	.word	0x40004400

08000358 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b08a      	sub	sp, #40	@ 0x28
 800035c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800035e:	f107 0314 	add.w	r3, r7, #20
 8000362:	2200      	movs	r2, #0
 8000364:	601a      	str	r2, [r3, #0]
 8000366:	605a      	str	r2, [r3, #4]
 8000368:	609a      	str	r2, [r3, #8]
 800036a:	60da      	str	r2, [r3, #12]
 800036c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800036e:	4b2b      	ldr	r3, [pc, #172]	@ (800041c <MX_GPIO_Init+0xc4>)
 8000370:	695b      	ldr	r3, [r3, #20]
 8000372:	4a2a      	ldr	r2, [pc, #168]	@ (800041c <MX_GPIO_Init+0xc4>)
 8000374:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000378:	6153      	str	r3, [r2, #20]
 800037a:	4b28      	ldr	r3, [pc, #160]	@ (800041c <MX_GPIO_Init+0xc4>)
 800037c:	695b      	ldr	r3, [r3, #20]
 800037e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000382:	613b      	str	r3, [r7, #16]
 8000384:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000386:	4b25      	ldr	r3, [pc, #148]	@ (800041c <MX_GPIO_Init+0xc4>)
 8000388:	695b      	ldr	r3, [r3, #20]
 800038a:	4a24      	ldr	r2, [pc, #144]	@ (800041c <MX_GPIO_Init+0xc4>)
 800038c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000390:	6153      	str	r3, [r2, #20]
 8000392:	4b22      	ldr	r3, [pc, #136]	@ (800041c <MX_GPIO_Init+0xc4>)
 8000394:	695b      	ldr	r3, [r3, #20]
 8000396:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800039a:	60fb      	str	r3, [r7, #12]
 800039c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800039e:	4b1f      	ldr	r3, [pc, #124]	@ (800041c <MX_GPIO_Init+0xc4>)
 80003a0:	695b      	ldr	r3, [r3, #20]
 80003a2:	4a1e      	ldr	r2, [pc, #120]	@ (800041c <MX_GPIO_Init+0xc4>)
 80003a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80003a8:	6153      	str	r3, [r2, #20]
 80003aa:	4b1c      	ldr	r3, [pc, #112]	@ (800041c <MX_GPIO_Init+0xc4>)
 80003ac:	695b      	ldr	r3, [r3, #20]
 80003ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80003b2:	60bb      	str	r3, [r7, #8]
 80003b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003b6:	4b19      	ldr	r3, [pc, #100]	@ (800041c <MX_GPIO_Init+0xc4>)
 80003b8:	695b      	ldr	r3, [r3, #20]
 80003ba:	4a18      	ldr	r2, [pc, #96]	@ (800041c <MX_GPIO_Init+0xc4>)
 80003bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80003c0:	6153      	str	r3, [r2, #20]
 80003c2:	4b16      	ldr	r3, [pc, #88]	@ (800041c <MX_GPIO_Init+0xc4>)
 80003c4:	695b      	ldr	r3, [r3, #20]
 80003c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80003ca:	607b      	str	r3, [r7, #4]
 80003cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80003ce:	2200      	movs	r2, #0
 80003d0:	2120      	movs	r1, #32
 80003d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003d6:	f000 fc1b 	bl	8000c10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80003da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80003de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80003e0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80003e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e6:	2300      	movs	r3, #0
 80003e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80003ea:	f107 0314 	add.w	r3, r7, #20
 80003ee:	4619      	mov	r1, r3
 80003f0:	480b      	ldr	r0, [pc, #44]	@ (8000420 <MX_GPIO_Init+0xc8>)
 80003f2:	f000 fa83 	bl	80008fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80003f6:	2320      	movs	r3, #32
 80003f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003fa:	2301      	movs	r3, #1
 80003fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003fe:	2300      	movs	r3, #0
 8000400:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000402:	2300      	movs	r3, #0
 8000404:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000406:	f107 0314 	add.w	r3, r7, #20
 800040a:	4619      	mov	r1, r3
 800040c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000410:	f000 fa74 	bl	80008fc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000414:	bf00      	nop
 8000416:	3728      	adds	r7, #40	@ 0x28
 8000418:	46bd      	mov	sp, r7
 800041a:	bd80      	pop	{r7, pc}
 800041c:	40021000 	.word	0x40021000
 8000420:	48000800 	.word	0x48000800

08000424 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b082      	sub	sp, #8
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	4a04      	ldr	r2, [pc, #16]	@ (8000444 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000432:	4293      	cmp	r3, r2
 8000434:	d101      	bne.n	800043a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000436:	f000 f95f 	bl	80006f8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800043a:	bf00      	nop
 800043c:	3708      	adds	r7, #8
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}
 8000442:	bf00      	nop
 8000444:	40012c00 	.word	0x40012c00

08000448 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000448:	b480      	push	{r7}
 800044a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800044c:	b672      	cpsid	i
}
 800044e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000450:	bf00      	nop
 8000452:	e7fd      	b.n	8000450 <Error_Handler+0x8>

08000454 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800045a:	4b11      	ldr	r3, [pc, #68]	@ (80004a0 <HAL_MspInit+0x4c>)
 800045c:	699b      	ldr	r3, [r3, #24]
 800045e:	4a10      	ldr	r2, [pc, #64]	@ (80004a0 <HAL_MspInit+0x4c>)
 8000460:	f043 0301 	orr.w	r3, r3, #1
 8000464:	6193      	str	r3, [r2, #24]
 8000466:	4b0e      	ldr	r3, [pc, #56]	@ (80004a0 <HAL_MspInit+0x4c>)
 8000468:	699b      	ldr	r3, [r3, #24]
 800046a:	f003 0301 	and.w	r3, r3, #1
 800046e:	607b      	str	r3, [r7, #4]
 8000470:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000472:	4b0b      	ldr	r3, [pc, #44]	@ (80004a0 <HAL_MspInit+0x4c>)
 8000474:	69db      	ldr	r3, [r3, #28]
 8000476:	4a0a      	ldr	r2, [pc, #40]	@ (80004a0 <HAL_MspInit+0x4c>)
 8000478:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800047c:	61d3      	str	r3, [r2, #28]
 800047e:	4b08      	ldr	r3, [pc, #32]	@ (80004a0 <HAL_MspInit+0x4c>)
 8000480:	69db      	ldr	r3, [r3, #28]
 8000482:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000486:	603b      	str	r3, [r7, #0]
 8000488:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800048a:	2200      	movs	r2, #0
 800048c:	210f      	movs	r1, #15
 800048e:	f06f 0001 	mvn.w	r0, #1
 8000492:	f000 fa09 	bl	80008a8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000496:	bf00      	nop
 8000498:	3708      	adds	r7, #8
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	40021000 	.word	0x40021000

080004a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b08a      	sub	sp, #40	@ 0x28
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ac:	f107 0314 	add.w	r3, r7, #20
 80004b0:	2200      	movs	r2, #0
 80004b2:	601a      	str	r2, [r3, #0]
 80004b4:	605a      	str	r2, [r3, #4]
 80004b6:	609a      	str	r2, [r3, #8]
 80004b8:	60da      	str	r2, [r3, #12]
 80004ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	4a17      	ldr	r2, [pc, #92]	@ (8000520 <HAL_UART_MspInit+0x7c>)
 80004c2:	4293      	cmp	r3, r2
 80004c4:	d128      	bne.n	8000518 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80004c6:	4b17      	ldr	r3, [pc, #92]	@ (8000524 <HAL_UART_MspInit+0x80>)
 80004c8:	69db      	ldr	r3, [r3, #28]
 80004ca:	4a16      	ldr	r2, [pc, #88]	@ (8000524 <HAL_UART_MspInit+0x80>)
 80004cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80004d0:	61d3      	str	r3, [r2, #28]
 80004d2:	4b14      	ldr	r3, [pc, #80]	@ (8000524 <HAL_UART_MspInit+0x80>)
 80004d4:	69db      	ldr	r3, [r3, #28]
 80004d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80004da:	613b      	str	r3, [r7, #16]
 80004dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004de:	4b11      	ldr	r3, [pc, #68]	@ (8000524 <HAL_UART_MspInit+0x80>)
 80004e0:	695b      	ldr	r3, [r3, #20]
 80004e2:	4a10      	ldr	r2, [pc, #64]	@ (8000524 <HAL_UART_MspInit+0x80>)
 80004e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80004e8:	6153      	str	r3, [r2, #20]
 80004ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000524 <HAL_UART_MspInit+0x80>)
 80004ec:	695b      	ldr	r3, [r3, #20]
 80004ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80004f2:	60fb      	str	r3, [r7, #12]
 80004f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80004f6:	230c      	movs	r3, #12
 80004f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004fa:	2302      	movs	r3, #2
 80004fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004fe:	2300      	movs	r3, #0
 8000500:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000502:	2303      	movs	r3, #3
 8000504:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000506:	2307      	movs	r3, #7
 8000508:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800050a:	f107 0314 	add.w	r3, r7, #20
 800050e:	4619      	mov	r1, r3
 8000510:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000514:	f000 f9f2 	bl	80008fc <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000518:	bf00      	nop
 800051a:	3728      	adds	r7, #40	@ 0x28
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}
 8000520:	40004400 	.word	0x40004400
 8000524:	40021000 	.word	0x40021000

08000528 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b08c      	sub	sp, #48	@ 0x30
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000530:	2300      	movs	r3, #0
 8000532:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000534:	2300      	movs	r3, #0
 8000536:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000538:	4b2e      	ldr	r3, [pc, #184]	@ (80005f4 <HAL_InitTick+0xcc>)
 800053a:	699b      	ldr	r3, [r3, #24]
 800053c:	4a2d      	ldr	r2, [pc, #180]	@ (80005f4 <HAL_InitTick+0xcc>)
 800053e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000542:	6193      	str	r3, [r2, #24]
 8000544:	4b2b      	ldr	r3, [pc, #172]	@ (80005f4 <HAL_InitTick+0xcc>)
 8000546:	699b      	ldr	r3, [r3, #24]
 8000548:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800054c:	60bb      	str	r3, [r7, #8]
 800054e:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000550:	f107 020c 	add.w	r2, r7, #12
 8000554:	f107 0310 	add.w	r3, r7, #16
 8000558:	4611      	mov	r1, r2
 800055a:	4618      	mov	r0, r3
 800055c:	f001 fdfe 	bl	800215c <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000560:	f001 fdda 	bl	8002118 <HAL_RCC_GetPCLK2Freq>
 8000564:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000568:	4a23      	ldr	r2, [pc, #140]	@ (80005f8 <HAL_InitTick+0xd0>)
 800056a:	fba2 2303 	umull	r2, r3, r2, r3
 800056e:	0c9b      	lsrs	r3, r3, #18
 8000570:	3b01      	subs	r3, #1
 8000572:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000574:	4b21      	ldr	r3, [pc, #132]	@ (80005fc <HAL_InitTick+0xd4>)
 8000576:	4a22      	ldr	r2, [pc, #136]	@ (8000600 <HAL_InitTick+0xd8>)
 8000578:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800057a:	4b20      	ldr	r3, [pc, #128]	@ (80005fc <HAL_InitTick+0xd4>)
 800057c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000580:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000582:	4a1e      	ldr	r2, [pc, #120]	@ (80005fc <HAL_InitTick+0xd4>)
 8000584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000586:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000588:	4b1c      	ldr	r3, [pc, #112]	@ (80005fc <HAL_InitTick+0xd4>)
 800058a:	2200      	movs	r2, #0
 800058c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800058e:	4b1b      	ldr	r3, [pc, #108]	@ (80005fc <HAL_InitTick+0xd4>)
 8000590:	2200      	movs	r2, #0
 8000592:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000594:	4b19      	ldr	r3, [pc, #100]	@ (80005fc <HAL_InitTick+0xd4>)
 8000596:	2200      	movs	r2, #0
 8000598:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800059a:	4818      	ldr	r0, [pc, #96]	@ (80005fc <HAL_InitTick+0xd4>)
 800059c:	f002 f82e 	bl	80025fc <HAL_TIM_Base_Init>
 80005a0:	4603      	mov	r3, r0
 80005a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80005a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d11b      	bne.n	80005e6 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80005ae:	4813      	ldr	r0, [pc, #76]	@ (80005fc <HAL_InitTick+0xd4>)
 80005b0:	f002 f886 	bl	80026c0 <HAL_TIM_Base_Start_IT>
 80005b4:	4603      	mov	r3, r0
 80005b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80005ba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d111      	bne.n	80005e6 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80005c2:	2019      	movs	r0, #25
 80005c4:	f000 f98c 	bl	80008e0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	2b0f      	cmp	r3, #15
 80005cc:	d808      	bhi.n	80005e0 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80005ce:	2200      	movs	r2, #0
 80005d0:	6879      	ldr	r1, [r7, #4]
 80005d2:	2019      	movs	r0, #25
 80005d4:	f000 f968 	bl	80008a8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80005d8:	4a0a      	ldr	r2, [pc, #40]	@ (8000604 <HAL_InitTick+0xdc>)
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	6013      	str	r3, [r2, #0]
 80005de:	e002      	b.n	80005e6 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 80005e0:	2301      	movs	r3, #1
 80005e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80005e6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	3730      	adds	r7, #48	@ 0x30
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40021000 	.word	0x40021000
 80005f8:	431bde83 	.word	0x431bde83
 80005fc:	20000108 	.word	0x20000108
 8000600:	40012c00 	.word	0x40012c00
 8000604:	20000004 	.word	0x20000004

08000608 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800060c:	bf00      	nop
 800060e:	e7fd      	b.n	800060c <NMI_Handler+0x4>

08000610 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000614:	bf00      	nop
 8000616:	e7fd      	b.n	8000614 <HardFault_Handler+0x4>

08000618 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800061c:	bf00      	nop
 800061e:	e7fd      	b.n	800061c <MemManage_Handler+0x4>

08000620 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000624:	bf00      	nop
 8000626:	e7fd      	b.n	8000624 <BusFault_Handler+0x4>

08000628 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800062c:	bf00      	nop
 800062e:	e7fd      	b.n	800062c <UsageFault_Handler+0x4>

08000630 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000634:	bf00      	nop
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
	...

08000640 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000644:	4802      	ldr	r0, [pc, #8]	@ (8000650 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000646:	f002 f8ab 	bl	80027a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800064a:	bf00      	nop
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	20000108 	.word	0x20000108

08000654 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000658:	4b06      	ldr	r3, [pc, #24]	@ (8000674 <SystemInit+0x20>)
 800065a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800065e:	4a05      	ldr	r2, [pc, #20]	@ (8000674 <SystemInit+0x20>)
 8000660:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000664:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000668:	bf00      	nop
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	e000ed00 	.word	0xe000ed00

08000678 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000678:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80006b0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800067c:	f7ff ffea 	bl	8000654 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000680:	480c      	ldr	r0, [pc, #48]	@ (80006b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000682:	490d      	ldr	r1, [pc, #52]	@ (80006b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000684:	4a0d      	ldr	r2, [pc, #52]	@ (80006bc <LoopForever+0xe>)
  movs r3, #0
 8000686:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000688:	e002      	b.n	8000690 <LoopCopyDataInit>

0800068a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800068a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800068c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800068e:	3304      	adds	r3, #4

08000690 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000690:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000692:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000694:	d3f9      	bcc.n	800068a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000696:	4a0a      	ldr	r2, [pc, #40]	@ (80006c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000698:	4c0a      	ldr	r4, [pc, #40]	@ (80006c4 <LoopForever+0x16>)
  movs r3, #0
 800069a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800069c:	e001      	b.n	80006a2 <LoopFillZerobss>

0800069e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800069e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006a0:	3204      	adds	r2, #4

080006a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006a4:	d3fb      	bcc.n	800069e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006a6:	f005 fcb7 	bl	8006018 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006aa:	f7ff fd99 	bl	80001e0 <main>

080006ae <LoopForever>:

LoopForever:
    b LoopForever
 80006ae:	e7fe      	b.n	80006ae <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006b0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80006b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006b8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80006bc:	080061d4 	.word	0x080061d4
  ldr r2, =_sbss
 80006c0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80006c4:	20001c78 	.word	0x20001c78

080006c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006c8:	e7fe      	b.n	80006c8 <ADC1_2_IRQHandler>
	...

080006cc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006d0:	4b08      	ldr	r3, [pc, #32]	@ (80006f4 <HAL_Init+0x28>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a07      	ldr	r2, [pc, #28]	@ (80006f4 <HAL_Init+0x28>)
 80006d6:	f043 0310 	orr.w	r3, r3, #16
 80006da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006dc:	2003      	movs	r0, #3
 80006de:	f000 f8d8 	bl	8000892 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006e2:	200f      	movs	r0, #15
 80006e4:	f7ff ff20 	bl	8000528 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006e8:	f7ff feb4 	bl	8000454 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006ec:	2300      	movs	r3, #0
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40022000 	.word	0x40022000

080006f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006fc:	4b06      	ldr	r3, [pc, #24]	@ (8000718 <HAL_IncTick+0x20>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	461a      	mov	r2, r3
 8000702:	4b06      	ldr	r3, [pc, #24]	@ (800071c <HAL_IncTick+0x24>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	4413      	add	r3, r2
 8000708:	4a04      	ldr	r2, [pc, #16]	@ (800071c <HAL_IncTick+0x24>)
 800070a:	6013      	str	r3, [r2, #0]
}
 800070c:	bf00      	nop
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	20000008 	.word	0x20000008
 800071c:	20000154 	.word	0x20000154

08000720 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  return uwTick;  
 8000724:	4b03      	ldr	r3, [pc, #12]	@ (8000734 <HAL_GetTick+0x14>)
 8000726:	681b      	ldr	r3, [r3, #0]
}
 8000728:	4618      	mov	r0, r3
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	20000154 	.word	0x20000154

08000738 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000738:	b480      	push	{r7}
 800073a:	b085      	sub	sp, #20
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	f003 0307 	and.w	r3, r3, #7
 8000746:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000748:	4b0c      	ldr	r3, [pc, #48]	@ (800077c <__NVIC_SetPriorityGrouping+0x44>)
 800074a:	68db      	ldr	r3, [r3, #12]
 800074c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800074e:	68ba      	ldr	r2, [r7, #8]
 8000750:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000754:	4013      	ands	r3, r2
 8000756:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000760:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000764:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000768:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800076a:	4a04      	ldr	r2, [pc, #16]	@ (800077c <__NVIC_SetPriorityGrouping+0x44>)
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	60d3      	str	r3, [r2, #12]
}
 8000770:	bf00      	nop
 8000772:	3714      	adds	r7, #20
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	e000ed00 	.word	0xe000ed00

08000780 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000784:	4b04      	ldr	r3, [pc, #16]	@ (8000798 <__NVIC_GetPriorityGrouping+0x18>)
 8000786:	68db      	ldr	r3, [r3, #12]
 8000788:	0a1b      	lsrs	r3, r3, #8
 800078a:	f003 0307 	and.w	r3, r3, #7
}
 800078e:	4618      	mov	r0, r3
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr
 8000798:	e000ed00 	.word	0xe000ed00

0800079c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	db0b      	blt.n	80007c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007ae:	79fb      	ldrb	r3, [r7, #7]
 80007b0:	f003 021f 	and.w	r2, r3, #31
 80007b4:	4907      	ldr	r1, [pc, #28]	@ (80007d4 <__NVIC_EnableIRQ+0x38>)
 80007b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ba:	095b      	lsrs	r3, r3, #5
 80007bc:	2001      	movs	r0, #1
 80007be:	fa00 f202 	lsl.w	r2, r0, r2
 80007c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007c6:	bf00      	nop
 80007c8:	370c      	adds	r7, #12
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	e000e100 	.word	0xe000e100

080007d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	6039      	str	r1, [r7, #0]
 80007e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	db0a      	blt.n	8000802 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	b2da      	uxtb	r2, r3
 80007f0:	490c      	ldr	r1, [pc, #48]	@ (8000824 <__NVIC_SetPriority+0x4c>)
 80007f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f6:	0112      	lsls	r2, r2, #4
 80007f8:	b2d2      	uxtb	r2, r2
 80007fa:	440b      	add	r3, r1
 80007fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000800:	e00a      	b.n	8000818 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	b2da      	uxtb	r2, r3
 8000806:	4908      	ldr	r1, [pc, #32]	@ (8000828 <__NVIC_SetPriority+0x50>)
 8000808:	79fb      	ldrb	r3, [r7, #7]
 800080a:	f003 030f 	and.w	r3, r3, #15
 800080e:	3b04      	subs	r3, #4
 8000810:	0112      	lsls	r2, r2, #4
 8000812:	b2d2      	uxtb	r2, r2
 8000814:	440b      	add	r3, r1
 8000816:	761a      	strb	r2, [r3, #24]
}
 8000818:	bf00      	nop
 800081a:	370c      	adds	r7, #12
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr
 8000824:	e000e100 	.word	0xe000e100
 8000828:	e000ed00 	.word	0xe000ed00

0800082c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800082c:	b480      	push	{r7}
 800082e:	b089      	sub	sp, #36	@ 0x24
 8000830:	af00      	add	r7, sp, #0
 8000832:	60f8      	str	r0, [r7, #12]
 8000834:	60b9      	str	r1, [r7, #8]
 8000836:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	f003 0307 	and.w	r3, r3, #7
 800083e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000840:	69fb      	ldr	r3, [r7, #28]
 8000842:	f1c3 0307 	rsb	r3, r3, #7
 8000846:	2b04      	cmp	r3, #4
 8000848:	bf28      	it	cs
 800084a:	2304      	movcs	r3, #4
 800084c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800084e:	69fb      	ldr	r3, [r7, #28]
 8000850:	3304      	adds	r3, #4
 8000852:	2b06      	cmp	r3, #6
 8000854:	d902      	bls.n	800085c <NVIC_EncodePriority+0x30>
 8000856:	69fb      	ldr	r3, [r7, #28]
 8000858:	3b03      	subs	r3, #3
 800085a:	e000      	b.n	800085e <NVIC_EncodePriority+0x32>
 800085c:	2300      	movs	r3, #0
 800085e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000860:	f04f 32ff 	mov.w	r2, #4294967295
 8000864:	69bb      	ldr	r3, [r7, #24]
 8000866:	fa02 f303 	lsl.w	r3, r2, r3
 800086a:	43da      	mvns	r2, r3
 800086c:	68bb      	ldr	r3, [r7, #8]
 800086e:	401a      	ands	r2, r3
 8000870:	697b      	ldr	r3, [r7, #20]
 8000872:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000874:	f04f 31ff 	mov.w	r1, #4294967295
 8000878:	697b      	ldr	r3, [r7, #20]
 800087a:	fa01 f303 	lsl.w	r3, r1, r3
 800087e:	43d9      	mvns	r1, r3
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000884:	4313      	orrs	r3, r2
         );
}
 8000886:	4618      	mov	r0, r3
 8000888:	3724      	adds	r7, #36	@ 0x24
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr

08000892 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000892:	b580      	push	{r7, lr}
 8000894:	b082      	sub	sp, #8
 8000896:	af00      	add	r7, sp, #0
 8000898:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800089a:	6878      	ldr	r0, [r7, #4]
 800089c:	f7ff ff4c 	bl	8000738 <__NVIC_SetPriorityGrouping>
}
 80008a0:	bf00      	nop
 80008a2:	3708      	adds	r7, #8
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b086      	sub	sp, #24
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	4603      	mov	r3, r0
 80008b0:	60b9      	str	r1, [r7, #8]
 80008b2:	607a      	str	r2, [r7, #4]
 80008b4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008b6:	2300      	movs	r3, #0
 80008b8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008ba:	f7ff ff61 	bl	8000780 <__NVIC_GetPriorityGrouping>
 80008be:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008c0:	687a      	ldr	r2, [r7, #4]
 80008c2:	68b9      	ldr	r1, [r7, #8]
 80008c4:	6978      	ldr	r0, [r7, #20]
 80008c6:	f7ff ffb1 	bl	800082c <NVIC_EncodePriority>
 80008ca:	4602      	mov	r2, r0
 80008cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008d0:	4611      	mov	r1, r2
 80008d2:	4618      	mov	r0, r3
 80008d4:	f7ff ff80 	bl	80007d8 <__NVIC_SetPriority>
}
 80008d8:	bf00      	nop
 80008da:	3718      	adds	r7, #24
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}

080008e0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ee:	4618      	mov	r0, r3
 80008f0:	f7ff ff54 	bl	800079c <__NVIC_EnableIRQ>
}
 80008f4:	bf00      	nop
 80008f6:	3708      	adds	r7, #8
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}

080008fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b087      	sub	sp, #28
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
 8000904:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000906:	2300      	movs	r3, #0
 8000908:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800090a:	e160      	b.n	8000bce <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	681a      	ldr	r2, [r3, #0]
 8000910:	2101      	movs	r1, #1
 8000912:	697b      	ldr	r3, [r7, #20]
 8000914:	fa01 f303 	lsl.w	r3, r1, r3
 8000918:	4013      	ands	r3, r2
 800091a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	2b00      	cmp	r3, #0
 8000920:	f000 8152 	beq.w	8000bc8 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	685b      	ldr	r3, [r3, #4]
 8000928:	f003 0303 	and.w	r3, r3, #3
 800092c:	2b01      	cmp	r3, #1
 800092e:	d005      	beq.n	800093c <HAL_GPIO_Init+0x40>
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	685b      	ldr	r3, [r3, #4]
 8000934:	f003 0303 	and.w	r3, r3, #3
 8000938:	2b02      	cmp	r3, #2
 800093a:	d130      	bne.n	800099e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	689b      	ldr	r3, [r3, #8]
 8000940:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000942:	697b      	ldr	r3, [r7, #20]
 8000944:	005b      	lsls	r3, r3, #1
 8000946:	2203      	movs	r2, #3
 8000948:	fa02 f303 	lsl.w	r3, r2, r3
 800094c:	43db      	mvns	r3, r3
 800094e:	693a      	ldr	r2, [r7, #16]
 8000950:	4013      	ands	r3, r2
 8000952:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	68da      	ldr	r2, [r3, #12]
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	005b      	lsls	r3, r3, #1
 800095c:	fa02 f303 	lsl.w	r3, r2, r3
 8000960:	693a      	ldr	r2, [r7, #16]
 8000962:	4313      	orrs	r3, r2
 8000964:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	693a      	ldr	r2, [r7, #16]
 800096a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	685b      	ldr	r3, [r3, #4]
 8000970:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000972:	2201      	movs	r2, #1
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	fa02 f303 	lsl.w	r3, r2, r3
 800097a:	43db      	mvns	r3, r3
 800097c:	693a      	ldr	r2, [r7, #16]
 800097e:	4013      	ands	r3, r2
 8000980:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	685b      	ldr	r3, [r3, #4]
 8000986:	091b      	lsrs	r3, r3, #4
 8000988:	f003 0201 	and.w	r2, r3, #1
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	fa02 f303 	lsl.w	r3, r2, r3
 8000992:	693a      	ldr	r2, [r7, #16]
 8000994:	4313      	orrs	r3, r2
 8000996:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	693a      	ldr	r2, [r7, #16]
 800099c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	685b      	ldr	r3, [r3, #4]
 80009a2:	f003 0303 	and.w	r3, r3, #3
 80009a6:	2b03      	cmp	r3, #3
 80009a8:	d017      	beq.n	80009da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	68db      	ldr	r3, [r3, #12]
 80009ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	005b      	lsls	r3, r3, #1
 80009b4:	2203      	movs	r2, #3
 80009b6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ba:	43db      	mvns	r3, r3
 80009bc:	693a      	ldr	r2, [r7, #16]
 80009be:	4013      	ands	r3, r2
 80009c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	689a      	ldr	r2, [r3, #8]
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	005b      	lsls	r3, r3, #1
 80009ca:	fa02 f303 	lsl.w	r3, r2, r3
 80009ce:	693a      	ldr	r2, [r7, #16]
 80009d0:	4313      	orrs	r3, r2
 80009d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	693a      	ldr	r2, [r7, #16]
 80009d8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	685b      	ldr	r3, [r3, #4]
 80009de:	f003 0303 	and.w	r3, r3, #3
 80009e2:	2b02      	cmp	r3, #2
 80009e4:	d123      	bne.n	8000a2e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80009e6:	697b      	ldr	r3, [r7, #20]
 80009e8:	08da      	lsrs	r2, r3, #3
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	3208      	adds	r2, #8
 80009ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	f003 0307 	and.w	r3, r3, #7
 80009fa:	009b      	lsls	r3, r3, #2
 80009fc:	220f      	movs	r2, #15
 80009fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000a02:	43db      	mvns	r3, r3
 8000a04:	693a      	ldr	r2, [r7, #16]
 8000a06:	4013      	ands	r3, r2
 8000a08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	691a      	ldr	r2, [r3, #16]
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	f003 0307 	and.w	r3, r3, #7
 8000a14:	009b      	lsls	r3, r3, #2
 8000a16:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1a:	693a      	ldr	r2, [r7, #16]
 8000a1c:	4313      	orrs	r3, r2
 8000a1e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	08da      	lsrs	r2, r3, #3
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	3208      	adds	r2, #8
 8000a28:	6939      	ldr	r1, [r7, #16]
 8000a2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	005b      	lsls	r3, r3, #1
 8000a38:	2203      	movs	r2, #3
 8000a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3e:	43db      	mvns	r3, r3
 8000a40:	693a      	ldr	r2, [r7, #16]
 8000a42:	4013      	ands	r3, r2
 8000a44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	685b      	ldr	r3, [r3, #4]
 8000a4a:	f003 0203 	and.w	r2, r3, #3
 8000a4e:	697b      	ldr	r3, [r7, #20]
 8000a50:	005b      	lsls	r3, r3, #1
 8000a52:	fa02 f303 	lsl.w	r3, r2, r3
 8000a56:	693a      	ldr	r2, [r7, #16]
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	693a      	ldr	r2, [r7, #16]
 8000a60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	f000 80ac 	beq.w	8000bc8 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a70:	4b5e      	ldr	r3, [pc, #376]	@ (8000bec <HAL_GPIO_Init+0x2f0>)
 8000a72:	699b      	ldr	r3, [r3, #24]
 8000a74:	4a5d      	ldr	r2, [pc, #372]	@ (8000bec <HAL_GPIO_Init+0x2f0>)
 8000a76:	f043 0301 	orr.w	r3, r3, #1
 8000a7a:	6193      	str	r3, [r2, #24]
 8000a7c:	4b5b      	ldr	r3, [pc, #364]	@ (8000bec <HAL_GPIO_Init+0x2f0>)
 8000a7e:	699b      	ldr	r3, [r3, #24]
 8000a80:	f003 0301 	and.w	r3, r3, #1
 8000a84:	60bb      	str	r3, [r7, #8]
 8000a86:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a88:	4a59      	ldr	r2, [pc, #356]	@ (8000bf0 <HAL_GPIO_Init+0x2f4>)
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	089b      	lsrs	r3, r3, #2
 8000a8e:	3302      	adds	r3, #2
 8000a90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a94:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a96:	697b      	ldr	r3, [r7, #20]
 8000a98:	f003 0303 	and.w	r3, r3, #3
 8000a9c:	009b      	lsls	r3, r3, #2
 8000a9e:	220f      	movs	r2, #15
 8000aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa4:	43db      	mvns	r3, r3
 8000aa6:	693a      	ldr	r2, [r7, #16]
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000ab2:	d025      	beq.n	8000b00 <HAL_GPIO_Init+0x204>
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	4a4f      	ldr	r2, [pc, #316]	@ (8000bf4 <HAL_GPIO_Init+0x2f8>)
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d01f      	beq.n	8000afc <HAL_GPIO_Init+0x200>
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	4a4e      	ldr	r2, [pc, #312]	@ (8000bf8 <HAL_GPIO_Init+0x2fc>)
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	d019      	beq.n	8000af8 <HAL_GPIO_Init+0x1fc>
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	4a4d      	ldr	r2, [pc, #308]	@ (8000bfc <HAL_GPIO_Init+0x300>)
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	d013      	beq.n	8000af4 <HAL_GPIO_Init+0x1f8>
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	4a4c      	ldr	r2, [pc, #304]	@ (8000c00 <HAL_GPIO_Init+0x304>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d00d      	beq.n	8000af0 <HAL_GPIO_Init+0x1f4>
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	4a4b      	ldr	r2, [pc, #300]	@ (8000c04 <HAL_GPIO_Init+0x308>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d007      	beq.n	8000aec <HAL_GPIO_Init+0x1f0>
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	4a4a      	ldr	r2, [pc, #296]	@ (8000c08 <HAL_GPIO_Init+0x30c>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d101      	bne.n	8000ae8 <HAL_GPIO_Init+0x1ec>
 8000ae4:	2306      	movs	r3, #6
 8000ae6:	e00c      	b.n	8000b02 <HAL_GPIO_Init+0x206>
 8000ae8:	2307      	movs	r3, #7
 8000aea:	e00a      	b.n	8000b02 <HAL_GPIO_Init+0x206>
 8000aec:	2305      	movs	r3, #5
 8000aee:	e008      	b.n	8000b02 <HAL_GPIO_Init+0x206>
 8000af0:	2304      	movs	r3, #4
 8000af2:	e006      	b.n	8000b02 <HAL_GPIO_Init+0x206>
 8000af4:	2303      	movs	r3, #3
 8000af6:	e004      	b.n	8000b02 <HAL_GPIO_Init+0x206>
 8000af8:	2302      	movs	r3, #2
 8000afa:	e002      	b.n	8000b02 <HAL_GPIO_Init+0x206>
 8000afc:	2301      	movs	r3, #1
 8000afe:	e000      	b.n	8000b02 <HAL_GPIO_Init+0x206>
 8000b00:	2300      	movs	r3, #0
 8000b02:	697a      	ldr	r2, [r7, #20]
 8000b04:	f002 0203 	and.w	r2, r2, #3
 8000b08:	0092      	lsls	r2, r2, #2
 8000b0a:	4093      	lsls	r3, r2
 8000b0c:	693a      	ldr	r2, [r7, #16]
 8000b0e:	4313      	orrs	r3, r2
 8000b10:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b12:	4937      	ldr	r1, [pc, #220]	@ (8000bf0 <HAL_GPIO_Init+0x2f4>)
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	089b      	lsrs	r3, r3, #2
 8000b18:	3302      	adds	r3, #2
 8000b1a:	693a      	ldr	r2, [r7, #16]
 8000b1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b20:	4b3a      	ldr	r3, [pc, #232]	@ (8000c0c <HAL_GPIO_Init+0x310>)
 8000b22:	689b      	ldr	r3, [r3, #8]
 8000b24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	43db      	mvns	r3, r3
 8000b2a:	693a      	ldr	r2, [r7, #16]
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d003      	beq.n	8000b44 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000b3c:	693a      	ldr	r2, [r7, #16]
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	4313      	orrs	r3, r2
 8000b42:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000b44:	4a31      	ldr	r2, [pc, #196]	@ (8000c0c <HAL_GPIO_Init+0x310>)
 8000b46:	693b      	ldr	r3, [r7, #16]
 8000b48:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b4a:	4b30      	ldr	r3, [pc, #192]	@ (8000c0c <HAL_GPIO_Init+0x310>)
 8000b4c:	68db      	ldr	r3, [r3, #12]
 8000b4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	43db      	mvns	r3, r3
 8000b54:	693a      	ldr	r2, [r7, #16]
 8000b56:	4013      	ands	r3, r2
 8000b58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	685b      	ldr	r3, [r3, #4]
 8000b5e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d003      	beq.n	8000b6e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000b66:	693a      	ldr	r2, [r7, #16]
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	4313      	orrs	r3, r2
 8000b6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000b6e:	4a27      	ldr	r2, [pc, #156]	@ (8000c0c <HAL_GPIO_Init+0x310>)
 8000b70:	693b      	ldr	r3, [r7, #16]
 8000b72:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000b74:	4b25      	ldr	r3, [pc, #148]	@ (8000c0c <HAL_GPIO_Init+0x310>)
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	43db      	mvns	r3, r3
 8000b7e:	693a      	ldr	r2, [r7, #16]
 8000b80:	4013      	ands	r3, r2
 8000b82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d003      	beq.n	8000b98 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000b90:	693a      	ldr	r2, [r7, #16]
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	4313      	orrs	r3, r2
 8000b96:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000b98:	4a1c      	ldr	r2, [pc, #112]	@ (8000c0c <HAL_GPIO_Init+0x310>)
 8000b9a:	693b      	ldr	r3, [r7, #16]
 8000b9c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b9e:	4b1b      	ldr	r3, [pc, #108]	@ (8000c0c <HAL_GPIO_Init+0x310>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	43db      	mvns	r3, r3
 8000ba8:	693a      	ldr	r2, [r7, #16]
 8000baa:	4013      	ands	r3, r2
 8000bac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d003      	beq.n	8000bc2 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	4313      	orrs	r3, r2
 8000bc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000bc2:	4a12      	ldr	r2, [pc, #72]	@ (8000c0c <HAL_GPIO_Init+0x310>)
 8000bc4:	693b      	ldr	r3, [r7, #16]
 8000bc6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	3301      	adds	r3, #1
 8000bcc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	681a      	ldr	r2, [r3, #0]
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	fa22 f303 	lsr.w	r3, r2, r3
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	f47f ae97 	bne.w	800090c <HAL_GPIO_Init+0x10>
  }
}
 8000bde:	bf00      	nop
 8000be0:	bf00      	nop
 8000be2:	371c      	adds	r7, #28
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr
 8000bec:	40021000 	.word	0x40021000
 8000bf0:	40010000 	.word	0x40010000
 8000bf4:	48000400 	.word	0x48000400
 8000bf8:	48000800 	.word	0x48000800
 8000bfc:	48000c00 	.word	0x48000c00
 8000c00:	48001000 	.word	0x48001000
 8000c04:	48001400 	.word	0x48001400
 8000c08:	48001800 	.word	0x48001800
 8000c0c:	40010400 	.word	0x40010400

08000c10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
 8000c18:	460b      	mov	r3, r1
 8000c1a:	807b      	strh	r3, [r7, #2]
 8000c1c:	4613      	mov	r3, r2
 8000c1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c20:	787b      	ldrb	r3, [r7, #1]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d003      	beq.n	8000c2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c26:	887a      	ldrh	r2, [r7, #2]
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c2c:	e002      	b.n	8000c34 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c2e:	887a      	ldrh	r2, [r7, #2]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000c34:	bf00      	nop
 8000c36:	370c      	adds	r7, #12
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr

08000c40 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b085      	sub	sp, #20
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	460b      	mov	r3, r1
 8000c4a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	695b      	ldr	r3, [r3, #20]
 8000c50:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000c52:	887a      	ldrh	r2, [r7, #2]
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	4013      	ands	r3, r2
 8000c58:	041a      	lsls	r2, r3, #16
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	43d9      	mvns	r1, r3
 8000c5e:	887b      	ldrh	r3, [r7, #2]
 8000c60:	400b      	ands	r3, r1
 8000c62:	431a      	orrs	r2, r3
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	619a      	str	r2, [r3, #24]
}
 8000c68:	bf00      	nop
 8000c6a:	3714      	adds	r7, #20
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr

08000c74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000c80:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000c84:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c86:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000c8a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d102      	bne.n	8000c9a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000c94:	2301      	movs	r3, #1
 8000c96:	f001 b83a 	b.w	8001d0e <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c9a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000c9e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f003 0301 	and.w	r3, r3, #1
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	f000 816f 	beq.w	8000f8e <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000cb0:	4bb5      	ldr	r3, [pc, #724]	@ (8000f88 <HAL_RCC_OscConfig+0x314>)
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	f003 030c 	and.w	r3, r3, #12
 8000cb8:	2b04      	cmp	r3, #4
 8000cba:	d00c      	beq.n	8000cd6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cbc:	4bb2      	ldr	r3, [pc, #712]	@ (8000f88 <HAL_RCC_OscConfig+0x314>)
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	f003 030c 	and.w	r3, r3, #12
 8000cc4:	2b08      	cmp	r3, #8
 8000cc6:	d15c      	bne.n	8000d82 <HAL_RCC_OscConfig+0x10e>
 8000cc8:	4baf      	ldr	r3, [pc, #700]	@ (8000f88 <HAL_RCC_OscConfig+0x314>)
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8000cd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000cd4:	d155      	bne.n	8000d82 <HAL_RCC_OscConfig+0x10e>
 8000cd6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000cda:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cde:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8000ce2:	fa93 f3a3 	rbit	r3, r3
 8000ce6:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000cea:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cee:	fab3 f383 	clz	r3, r3
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	095b      	lsrs	r3, r3, #5
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	f043 0301 	orr.w	r3, r3, #1
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d102      	bne.n	8000d08 <HAL_RCC_OscConfig+0x94>
 8000d02:	4ba1      	ldr	r3, [pc, #644]	@ (8000f88 <HAL_RCC_OscConfig+0x314>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	e015      	b.n	8000d34 <HAL_RCC_OscConfig+0xc0>
 8000d08:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000d0c:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d10:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8000d14:	fa93 f3a3 	rbit	r3, r3
 8000d18:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8000d1c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000d20:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8000d24:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8000d28:	fa93 f3a3 	rbit	r3, r3
 8000d2c:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8000d30:	4b95      	ldr	r3, [pc, #596]	@ (8000f88 <HAL_RCC_OscConfig+0x314>)
 8000d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d34:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000d38:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8000d3c:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8000d40:	fa92 f2a2 	rbit	r2, r2
 8000d44:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8000d48:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8000d4c:	fab2 f282 	clz	r2, r2
 8000d50:	b2d2      	uxtb	r2, r2
 8000d52:	f042 0220 	orr.w	r2, r2, #32
 8000d56:	b2d2      	uxtb	r2, r2
 8000d58:	f002 021f 	and.w	r2, r2, #31
 8000d5c:	2101      	movs	r1, #1
 8000d5e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d62:	4013      	ands	r3, r2
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	f000 8111 	beq.w	8000f8c <HAL_RCC_OscConfig+0x318>
 8000d6a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000d6e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	f040 8108 	bne.w	8000f8c <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	f000 bfc6 	b.w	8001d0e <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d82:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000d86:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d92:	d106      	bne.n	8000da2 <HAL_RCC_OscConfig+0x12e>
 8000d94:	4b7c      	ldr	r3, [pc, #496]	@ (8000f88 <HAL_RCC_OscConfig+0x314>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a7b      	ldr	r2, [pc, #492]	@ (8000f88 <HAL_RCC_OscConfig+0x314>)
 8000d9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d9e:	6013      	str	r3, [r2, #0]
 8000da0:	e036      	b.n	8000e10 <HAL_RCC_OscConfig+0x19c>
 8000da2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000da6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d10c      	bne.n	8000dcc <HAL_RCC_OscConfig+0x158>
 8000db2:	4b75      	ldr	r3, [pc, #468]	@ (8000f88 <HAL_RCC_OscConfig+0x314>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4a74      	ldr	r2, [pc, #464]	@ (8000f88 <HAL_RCC_OscConfig+0x314>)
 8000db8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000dbc:	6013      	str	r3, [r2, #0]
 8000dbe:	4b72      	ldr	r3, [pc, #456]	@ (8000f88 <HAL_RCC_OscConfig+0x314>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a71      	ldr	r2, [pc, #452]	@ (8000f88 <HAL_RCC_OscConfig+0x314>)
 8000dc4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000dc8:	6013      	str	r3, [r2, #0]
 8000dca:	e021      	b.n	8000e10 <HAL_RCC_OscConfig+0x19c>
 8000dcc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000dd0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000ddc:	d10c      	bne.n	8000df8 <HAL_RCC_OscConfig+0x184>
 8000dde:	4b6a      	ldr	r3, [pc, #424]	@ (8000f88 <HAL_RCC_OscConfig+0x314>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a69      	ldr	r2, [pc, #420]	@ (8000f88 <HAL_RCC_OscConfig+0x314>)
 8000de4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000de8:	6013      	str	r3, [r2, #0]
 8000dea:	4b67      	ldr	r3, [pc, #412]	@ (8000f88 <HAL_RCC_OscConfig+0x314>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a66      	ldr	r2, [pc, #408]	@ (8000f88 <HAL_RCC_OscConfig+0x314>)
 8000df0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000df4:	6013      	str	r3, [r2, #0]
 8000df6:	e00b      	b.n	8000e10 <HAL_RCC_OscConfig+0x19c>
 8000df8:	4b63      	ldr	r3, [pc, #396]	@ (8000f88 <HAL_RCC_OscConfig+0x314>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a62      	ldr	r2, [pc, #392]	@ (8000f88 <HAL_RCC_OscConfig+0x314>)
 8000dfe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e02:	6013      	str	r3, [r2, #0]
 8000e04:	4b60      	ldr	r3, [pc, #384]	@ (8000f88 <HAL_RCC_OscConfig+0x314>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a5f      	ldr	r2, [pc, #380]	@ (8000f88 <HAL_RCC_OscConfig+0x314>)
 8000e0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e0e:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e10:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000e14:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d059      	beq.n	8000ed4 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e20:	f7ff fc7e 	bl	8000720 <HAL_GetTick>
 8000e24:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e28:	e00a      	b.n	8000e40 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e2a:	f7ff fc79 	bl	8000720 <HAL_GetTick>
 8000e2e:	4602      	mov	r2, r0
 8000e30:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000e34:	1ad3      	subs	r3, r2, r3
 8000e36:	2b64      	cmp	r3, #100	@ 0x64
 8000e38:	d902      	bls.n	8000e40 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8000e3a:	2303      	movs	r3, #3
 8000e3c:	f000 bf67 	b.w	8001d0e <HAL_RCC_OscConfig+0x109a>
 8000e40:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e44:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e48:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8000e4c:	fa93 f3a3 	rbit	r3, r3
 8000e50:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8000e54:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e58:	fab3 f383 	clz	r3, r3
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	095b      	lsrs	r3, r3, #5
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	f043 0301 	orr.w	r3, r3, #1
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	d102      	bne.n	8000e72 <HAL_RCC_OscConfig+0x1fe>
 8000e6c:	4b46      	ldr	r3, [pc, #280]	@ (8000f88 <HAL_RCC_OscConfig+0x314>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	e015      	b.n	8000e9e <HAL_RCC_OscConfig+0x22a>
 8000e72:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e76:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e7a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8000e7e:	fa93 f3a3 	rbit	r3, r3
 8000e82:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8000e86:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e8a:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8000e8e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8000e92:	fa93 f3a3 	rbit	r3, r3
 8000e96:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8000e9a:	4b3b      	ldr	r3, [pc, #236]	@ (8000f88 <HAL_RCC_OscConfig+0x314>)
 8000e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e9e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000ea2:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8000ea6:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8000eaa:	fa92 f2a2 	rbit	r2, r2
 8000eae:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8000eb2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8000eb6:	fab2 f282 	clz	r2, r2
 8000eba:	b2d2      	uxtb	r2, r2
 8000ebc:	f042 0220 	orr.w	r2, r2, #32
 8000ec0:	b2d2      	uxtb	r2, r2
 8000ec2:	f002 021f 	and.w	r2, r2, #31
 8000ec6:	2101      	movs	r1, #1
 8000ec8:	fa01 f202 	lsl.w	r2, r1, r2
 8000ecc:	4013      	ands	r3, r2
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d0ab      	beq.n	8000e2a <HAL_RCC_OscConfig+0x1b6>
 8000ed2:	e05c      	b.n	8000f8e <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ed4:	f7ff fc24 	bl	8000720 <HAL_GetTick>
 8000ed8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000edc:	e00a      	b.n	8000ef4 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ede:	f7ff fc1f 	bl	8000720 <HAL_GetTick>
 8000ee2:	4602      	mov	r2, r0
 8000ee4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	2b64      	cmp	r3, #100	@ 0x64
 8000eec:	d902      	bls.n	8000ef4 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8000eee:	2303      	movs	r3, #3
 8000ef0:	f000 bf0d 	b.w	8001d0e <HAL_RCC_OscConfig+0x109a>
 8000ef4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000ef8:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000efc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8000f00:	fa93 f3a3 	rbit	r3, r3
 8000f04:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8000f08:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f0c:	fab3 f383 	clz	r3, r3
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	095b      	lsrs	r3, r3, #5
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	f043 0301 	orr.w	r3, r3, #1
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d102      	bne.n	8000f26 <HAL_RCC_OscConfig+0x2b2>
 8000f20:	4b19      	ldr	r3, [pc, #100]	@ (8000f88 <HAL_RCC_OscConfig+0x314>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	e015      	b.n	8000f52 <HAL_RCC_OscConfig+0x2de>
 8000f26:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f2a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f2e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8000f32:	fa93 f3a3 	rbit	r3, r3
 8000f36:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8000f3a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f3e:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8000f42:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8000f46:	fa93 f3a3 	rbit	r3, r3
 8000f4a:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8000f4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f88 <HAL_RCC_OscConfig+0x314>)
 8000f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f52:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000f56:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8000f5a:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8000f5e:	fa92 f2a2 	rbit	r2, r2
 8000f62:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8000f66:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8000f6a:	fab2 f282 	clz	r2, r2
 8000f6e:	b2d2      	uxtb	r2, r2
 8000f70:	f042 0220 	orr.w	r2, r2, #32
 8000f74:	b2d2      	uxtb	r2, r2
 8000f76:	f002 021f 	and.w	r2, r2, #31
 8000f7a:	2101      	movs	r1, #1
 8000f7c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f80:	4013      	ands	r3, r2
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d1ab      	bne.n	8000ede <HAL_RCC_OscConfig+0x26a>
 8000f86:	e002      	b.n	8000f8e <HAL_RCC_OscConfig+0x31a>
 8000f88:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f8e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000f92:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f003 0302 	and.w	r3, r3, #2
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	f000 817f 	beq.w	80012a2 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000fa4:	4ba7      	ldr	r3, [pc, #668]	@ (8001244 <HAL_RCC_OscConfig+0x5d0>)
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f003 030c 	and.w	r3, r3, #12
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d00c      	beq.n	8000fca <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000fb0:	4ba4      	ldr	r3, [pc, #656]	@ (8001244 <HAL_RCC_OscConfig+0x5d0>)
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f003 030c 	and.w	r3, r3, #12
 8000fb8:	2b08      	cmp	r3, #8
 8000fba:	d173      	bne.n	80010a4 <HAL_RCC_OscConfig+0x430>
 8000fbc:	4ba1      	ldr	r3, [pc, #644]	@ (8001244 <HAL_RCC_OscConfig+0x5d0>)
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8000fc4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000fc8:	d16c      	bne.n	80010a4 <HAL_RCC_OscConfig+0x430>
 8000fca:	2302      	movs	r3, #2
 8000fcc:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fd0:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8000fd4:	fa93 f3a3 	rbit	r3, r3
 8000fd8:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8000fdc:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fe0:	fab3 f383 	clz	r3, r3
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	095b      	lsrs	r3, r3, #5
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	f043 0301 	orr.w	r3, r3, #1
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d102      	bne.n	8000ffa <HAL_RCC_OscConfig+0x386>
 8000ff4:	4b93      	ldr	r3, [pc, #588]	@ (8001244 <HAL_RCC_OscConfig+0x5d0>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	e013      	b.n	8001022 <HAL_RCC_OscConfig+0x3ae>
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001000:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8001004:	fa93 f3a3 	rbit	r3, r3
 8001008:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 800100c:	2302      	movs	r3, #2
 800100e:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001012:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8001016:	fa93 f3a3 	rbit	r3, r3
 800101a:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800101e:	4b89      	ldr	r3, [pc, #548]	@ (8001244 <HAL_RCC_OscConfig+0x5d0>)
 8001020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001022:	2202      	movs	r2, #2
 8001024:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8001028:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 800102c:	fa92 f2a2 	rbit	r2, r2
 8001030:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8001034:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001038:	fab2 f282 	clz	r2, r2
 800103c:	b2d2      	uxtb	r2, r2
 800103e:	f042 0220 	orr.w	r2, r2, #32
 8001042:	b2d2      	uxtb	r2, r2
 8001044:	f002 021f 	and.w	r2, r2, #31
 8001048:	2101      	movs	r1, #1
 800104a:	fa01 f202 	lsl.w	r2, r1, r2
 800104e:	4013      	ands	r3, r2
 8001050:	2b00      	cmp	r3, #0
 8001052:	d00a      	beq.n	800106a <HAL_RCC_OscConfig+0x3f6>
 8001054:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001058:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	2b01      	cmp	r3, #1
 8001062:	d002      	beq.n	800106a <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001064:	2301      	movs	r3, #1
 8001066:	f000 be52 	b.w	8001d0e <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800106a:	4b76      	ldr	r3, [pc, #472]	@ (8001244 <HAL_RCC_OscConfig+0x5d0>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001072:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001076:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	691b      	ldr	r3, [r3, #16]
 800107e:	21f8      	movs	r1, #248	@ 0xf8
 8001080:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001084:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8001088:	fa91 f1a1 	rbit	r1, r1
 800108c:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8001090:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001094:	fab1 f181 	clz	r1, r1
 8001098:	b2c9      	uxtb	r1, r1
 800109a:	408b      	lsls	r3, r1
 800109c:	4969      	ldr	r1, [pc, #420]	@ (8001244 <HAL_RCC_OscConfig+0x5d0>)
 800109e:	4313      	orrs	r3, r2
 80010a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010a2:	e0fe      	b.n	80012a2 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80010a8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	f000 8088 	beq.w	80011c6 <HAL_RCC_OscConfig+0x552>
 80010b6:	2301      	movs	r3, #1
 80010b8:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010bc:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80010c0:	fa93 f3a3 	rbit	r3, r3
 80010c4:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 80010c8:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010cc:	fab3 f383 	clz	r3, r3
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80010d6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	461a      	mov	r2, r3
 80010de:	2301      	movs	r3, #1
 80010e0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010e2:	f7ff fb1d 	bl	8000720 <HAL_GetTick>
 80010e6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010ea:	e00a      	b.n	8001102 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010ec:	f7ff fb18 	bl	8000720 <HAL_GetTick>
 80010f0:	4602      	mov	r2, r0
 80010f2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	2b02      	cmp	r3, #2
 80010fa:	d902      	bls.n	8001102 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80010fc:	2303      	movs	r3, #3
 80010fe:	f000 be06 	b.w	8001d0e <HAL_RCC_OscConfig+0x109a>
 8001102:	2302      	movs	r3, #2
 8001104:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001108:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800110c:	fa93 f3a3 	rbit	r3, r3
 8001110:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8001114:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001118:	fab3 f383 	clz	r3, r3
 800111c:	b2db      	uxtb	r3, r3
 800111e:	095b      	lsrs	r3, r3, #5
 8001120:	b2db      	uxtb	r3, r3
 8001122:	f043 0301 	orr.w	r3, r3, #1
 8001126:	b2db      	uxtb	r3, r3
 8001128:	2b01      	cmp	r3, #1
 800112a:	d102      	bne.n	8001132 <HAL_RCC_OscConfig+0x4be>
 800112c:	4b45      	ldr	r3, [pc, #276]	@ (8001244 <HAL_RCC_OscConfig+0x5d0>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	e013      	b.n	800115a <HAL_RCC_OscConfig+0x4e6>
 8001132:	2302      	movs	r3, #2
 8001134:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001138:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800113c:	fa93 f3a3 	rbit	r3, r3
 8001140:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8001144:	2302      	movs	r3, #2
 8001146:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800114a:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800114e:	fa93 f3a3 	rbit	r3, r3
 8001152:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001156:	4b3b      	ldr	r3, [pc, #236]	@ (8001244 <HAL_RCC_OscConfig+0x5d0>)
 8001158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800115a:	2202      	movs	r2, #2
 800115c:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8001160:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8001164:	fa92 f2a2 	rbit	r2, r2
 8001168:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 800116c:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001170:	fab2 f282 	clz	r2, r2
 8001174:	b2d2      	uxtb	r2, r2
 8001176:	f042 0220 	orr.w	r2, r2, #32
 800117a:	b2d2      	uxtb	r2, r2
 800117c:	f002 021f 	and.w	r2, r2, #31
 8001180:	2101      	movs	r1, #1
 8001182:	fa01 f202 	lsl.w	r2, r1, r2
 8001186:	4013      	ands	r3, r2
 8001188:	2b00      	cmp	r3, #0
 800118a:	d0af      	beq.n	80010ec <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800118c:	4b2d      	ldr	r3, [pc, #180]	@ (8001244 <HAL_RCC_OscConfig+0x5d0>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001194:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001198:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	691b      	ldr	r3, [r3, #16]
 80011a0:	21f8      	movs	r1, #248	@ 0xf8
 80011a2:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011a6:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 80011aa:	fa91 f1a1 	rbit	r1, r1
 80011ae:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 80011b2:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80011b6:	fab1 f181 	clz	r1, r1
 80011ba:	b2c9      	uxtb	r1, r1
 80011bc:	408b      	lsls	r3, r1
 80011be:	4921      	ldr	r1, [pc, #132]	@ (8001244 <HAL_RCC_OscConfig+0x5d0>)
 80011c0:	4313      	orrs	r3, r2
 80011c2:	600b      	str	r3, [r1, #0]
 80011c4:	e06d      	b.n	80012a2 <HAL_RCC_OscConfig+0x62e>
 80011c6:	2301      	movs	r3, #1
 80011c8:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011cc:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80011d0:	fa93 f3a3 	rbit	r3, r3
 80011d4:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 80011d8:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011dc:	fab3 f383 	clz	r3, r3
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80011e6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	461a      	mov	r2, r3
 80011ee:	2300      	movs	r3, #0
 80011f0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f2:	f7ff fa95 	bl	8000720 <HAL_GetTick>
 80011f6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011fa:	e00a      	b.n	8001212 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011fc:	f7ff fa90 	bl	8000720 <HAL_GetTick>
 8001200:	4602      	mov	r2, r0
 8001202:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001206:	1ad3      	subs	r3, r2, r3
 8001208:	2b02      	cmp	r3, #2
 800120a:	d902      	bls.n	8001212 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 800120c:	2303      	movs	r3, #3
 800120e:	f000 bd7e 	b.w	8001d0e <HAL_RCC_OscConfig+0x109a>
 8001212:	2302      	movs	r3, #2
 8001214:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001218:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800121c:	fa93 f3a3 	rbit	r3, r3
 8001220:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8001224:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001228:	fab3 f383 	clz	r3, r3
 800122c:	b2db      	uxtb	r3, r3
 800122e:	095b      	lsrs	r3, r3, #5
 8001230:	b2db      	uxtb	r3, r3
 8001232:	f043 0301 	orr.w	r3, r3, #1
 8001236:	b2db      	uxtb	r3, r3
 8001238:	2b01      	cmp	r3, #1
 800123a:	d105      	bne.n	8001248 <HAL_RCC_OscConfig+0x5d4>
 800123c:	4b01      	ldr	r3, [pc, #4]	@ (8001244 <HAL_RCC_OscConfig+0x5d0>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	e016      	b.n	8001270 <HAL_RCC_OscConfig+0x5fc>
 8001242:	bf00      	nop
 8001244:	40021000 	.word	0x40021000
 8001248:	2302      	movs	r3, #2
 800124a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800124e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001252:	fa93 f3a3 	rbit	r3, r3
 8001256:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 800125a:	2302      	movs	r3, #2
 800125c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001260:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001264:	fa93 f3a3 	rbit	r3, r3
 8001268:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800126c:	4bbf      	ldr	r3, [pc, #764]	@ (800156c <HAL_RCC_OscConfig+0x8f8>)
 800126e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001270:	2202      	movs	r2, #2
 8001272:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8001276:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800127a:	fa92 f2a2 	rbit	r2, r2
 800127e:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8001282:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001286:	fab2 f282 	clz	r2, r2
 800128a:	b2d2      	uxtb	r2, r2
 800128c:	f042 0220 	orr.w	r2, r2, #32
 8001290:	b2d2      	uxtb	r2, r2
 8001292:	f002 021f 	and.w	r2, r2, #31
 8001296:	2101      	movs	r1, #1
 8001298:	fa01 f202 	lsl.w	r2, r1, r2
 800129c:	4013      	ands	r3, r2
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d1ac      	bne.n	80011fc <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012a6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0308 	and.w	r3, r3, #8
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	f000 8113 	beq.w	80014de <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012bc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	695b      	ldr	r3, [r3, #20]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d07c      	beq.n	80013c2 <HAL_RCC_OscConfig+0x74e>
 80012c8:	2301      	movs	r3, #1
 80012ca:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80012d2:	fa93 f3a3 	rbit	r3, r3
 80012d6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 80012da:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012de:	fab3 f383 	clz	r3, r3
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	461a      	mov	r2, r3
 80012e6:	4ba2      	ldr	r3, [pc, #648]	@ (8001570 <HAL_RCC_OscConfig+0x8fc>)
 80012e8:	4413      	add	r3, r2
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	461a      	mov	r2, r3
 80012ee:	2301      	movs	r3, #1
 80012f0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012f2:	f7ff fa15 	bl	8000720 <HAL_GetTick>
 80012f6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012fa:	e00a      	b.n	8001312 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012fc:	f7ff fa10 	bl	8000720 <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001306:	1ad3      	subs	r3, r2, r3
 8001308:	2b02      	cmp	r3, #2
 800130a:	d902      	bls.n	8001312 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 800130c:	2303      	movs	r3, #3
 800130e:	f000 bcfe 	b.w	8001d0e <HAL_RCC_OscConfig+0x109a>
 8001312:	2302      	movs	r3, #2
 8001314:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001318:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800131c:	fa93 f2a3 	rbit	r2, r3
 8001320:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001324:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800132e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001332:	2202      	movs	r2, #2
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800133a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	fa93 f2a3 	rbit	r2, r3
 8001344:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001348:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001352:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001356:	2202      	movs	r2, #2
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800135e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	fa93 f2a3 	rbit	r2, r3
 8001368:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800136c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001370:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001372:	4b7e      	ldr	r3, [pc, #504]	@ (800156c <HAL_RCC_OscConfig+0x8f8>)
 8001374:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001376:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800137a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800137e:	2102      	movs	r1, #2
 8001380:	6019      	str	r1, [r3, #0]
 8001382:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001386:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	fa93 f1a3 	rbit	r1, r3
 8001390:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001394:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001398:	6019      	str	r1, [r3, #0]
  return result;
 800139a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800139e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	fab3 f383 	clz	r3, r3
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	f003 031f 	and.w	r3, r3, #31
 80013b4:	2101      	movs	r1, #1
 80013b6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ba:	4013      	ands	r3, r2
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d09d      	beq.n	80012fc <HAL_RCC_OscConfig+0x688>
 80013c0:	e08d      	b.n	80014de <HAL_RCC_OscConfig+0x86a>
 80013c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013c6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80013ca:	2201      	movs	r2, #1
 80013cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013d2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	fa93 f2a3 	rbit	r2, r3
 80013dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013e0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80013e4:	601a      	str	r2, [r3, #0]
  return result;
 80013e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013ea:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80013ee:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013f0:	fab3 f383 	clz	r3, r3
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	461a      	mov	r2, r3
 80013f8:	4b5d      	ldr	r3, [pc, #372]	@ (8001570 <HAL_RCC_OscConfig+0x8fc>)
 80013fa:	4413      	add	r3, r2
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	461a      	mov	r2, r3
 8001400:	2300      	movs	r3, #0
 8001402:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001404:	f7ff f98c 	bl	8000720 <HAL_GetTick>
 8001408:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800140c:	e00a      	b.n	8001424 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800140e:	f7ff f987 	bl	8000720 <HAL_GetTick>
 8001412:	4602      	mov	r2, r0
 8001414:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	2b02      	cmp	r3, #2
 800141c:	d902      	bls.n	8001424 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	f000 bc75 	b.w	8001d0e <HAL_RCC_OscConfig+0x109a>
 8001424:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001428:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800142c:	2202      	movs	r2, #2
 800142e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001430:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001434:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	fa93 f2a3 	rbit	r2, r3
 800143e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001442:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800144c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001450:	2202      	movs	r2, #2
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001458:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	fa93 f2a3 	rbit	r2, r3
 8001462:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001466:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001470:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001474:	2202      	movs	r2, #2
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800147c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	fa93 f2a3 	rbit	r2, r3
 8001486:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800148a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800148e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001490:	4b36      	ldr	r3, [pc, #216]	@ (800156c <HAL_RCC_OscConfig+0x8f8>)
 8001492:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001494:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001498:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800149c:	2102      	movs	r1, #2
 800149e:	6019      	str	r1, [r3, #0]
 80014a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014a4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	fa93 f1a3 	rbit	r1, r3
 80014ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014b2:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80014b6:	6019      	str	r1, [r3, #0]
  return result;
 80014b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014bc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	fab3 f383 	clz	r3, r3
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	f003 031f 	and.w	r3, r3, #31
 80014d2:	2101      	movs	r1, #1
 80014d4:	fa01 f303 	lsl.w	r3, r1, r3
 80014d8:	4013      	ands	r3, r2
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d197      	bne.n	800140e <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014e2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0304 	and.w	r3, r3, #4
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	f000 81a5 	beq.w	800183e <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014f4:	2300      	movs	r3, #0
 80014f6:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014fa:	4b1c      	ldr	r3, [pc, #112]	@ (800156c <HAL_RCC_OscConfig+0x8f8>)
 80014fc:	69db      	ldr	r3, [r3, #28]
 80014fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d116      	bne.n	8001534 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001506:	4b19      	ldr	r3, [pc, #100]	@ (800156c <HAL_RCC_OscConfig+0x8f8>)
 8001508:	69db      	ldr	r3, [r3, #28]
 800150a:	4a18      	ldr	r2, [pc, #96]	@ (800156c <HAL_RCC_OscConfig+0x8f8>)
 800150c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001510:	61d3      	str	r3, [r2, #28]
 8001512:	4b16      	ldr	r3, [pc, #88]	@ (800156c <HAL_RCC_OscConfig+0x8f8>)
 8001514:	69db      	ldr	r3, [r3, #28]
 8001516:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800151a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800151e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001528:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800152c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800152e:	2301      	movs	r3, #1
 8001530:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001534:	4b0f      	ldr	r3, [pc, #60]	@ (8001574 <HAL_RCC_OscConfig+0x900>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800153c:	2b00      	cmp	r3, #0
 800153e:	d121      	bne.n	8001584 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001540:	4b0c      	ldr	r3, [pc, #48]	@ (8001574 <HAL_RCC_OscConfig+0x900>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a0b      	ldr	r2, [pc, #44]	@ (8001574 <HAL_RCC_OscConfig+0x900>)
 8001546:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800154a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800154c:	f7ff f8e8 	bl	8000720 <HAL_GetTick>
 8001550:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001554:	e010      	b.n	8001578 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001556:	f7ff f8e3 	bl	8000720 <HAL_GetTick>
 800155a:	4602      	mov	r2, r0
 800155c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	2b64      	cmp	r3, #100	@ 0x64
 8001564:	d908      	bls.n	8001578 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e3d1      	b.n	8001d0e <HAL_RCC_OscConfig+0x109a>
 800156a:	bf00      	nop
 800156c:	40021000 	.word	0x40021000
 8001570:	10908120 	.word	0x10908120
 8001574:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001578:	4b8d      	ldr	r3, [pc, #564]	@ (80017b0 <HAL_RCC_OscConfig+0xb3c>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001580:	2b00      	cmp	r3, #0
 8001582:	d0e8      	beq.n	8001556 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001584:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001588:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d106      	bne.n	80015a2 <HAL_RCC_OscConfig+0x92e>
 8001594:	4b87      	ldr	r3, [pc, #540]	@ (80017b4 <HAL_RCC_OscConfig+0xb40>)
 8001596:	6a1b      	ldr	r3, [r3, #32]
 8001598:	4a86      	ldr	r2, [pc, #536]	@ (80017b4 <HAL_RCC_OscConfig+0xb40>)
 800159a:	f043 0301 	orr.w	r3, r3, #1
 800159e:	6213      	str	r3, [r2, #32]
 80015a0:	e035      	b.n	800160e <HAL_RCC_OscConfig+0x99a>
 80015a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015a6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d10c      	bne.n	80015cc <HAL_RCC_OscConfig+0x958>
 80015b2:	4b80      	ldr	r3, [pc, #512]	@ (80017b4 <HAL_RCC_OscConfig+0xb40>)
 80015b4:	6a1b      	ldr	r3, [r3, #32]
 80015b6:	4a7f      	ldr	r2, [pc, #508]	@ (80017b4 <HAL_RCC_OscConfig+0xb40>)
 80015b8:	f023 0301 	bic.w	r3, r3, #1
 80015bc:	6213      	str	r3, [r2, #32]
 80015be:	4b7d      	ldr	r3, [pc, #500]	@ (80017b4 <HAL_RCC_OscConfig+0xb40>)
 80015c0:	6a1b      	ldr	r3, [r3, #32]
 80015c2:	4a7c      	ldr	r2, [pc, #496]	@ (80017b4 <HAL_RCC_OscConfig+0xb40>)
 80015c4:	f023 0304 	bic.w	r3, r3, #4
 80015c8:	6213      	str	r3, [r2, #32]
 80015ca:	e020      	b.n	800160e <HAL_RCC_OscConfig+0x99a>
 80015cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015d0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	2b05      	cmp	r3, #5
 80015da:	d10c      	bne.n	80015f6 <HAL_RCC_OscConfig+0x982>
 80015dc:	4b75      	ldr	r3, [pc, #468]	@ (80017b4 <HAL_RCC_OscConfig+0xb40>)
 80015de:	6a1b      	ldr	r3, [r3, #32]
 80015e0:	4a74      	ldr	r2, [pc, #464]	@ (80017b4 <HAL_RCC_OscConfig+0xb40>)
 80015e2:	f043 0304 	orr.w	r3, r3, #4
 80015e6:	6213      	str	r3, [r2, #32]
 80015e8:	4b72      	ldr	r3, [pc, #456]	@ (80017b4 <HAL_RCC_OscConfig+0xb40>)
 80015ea:	6a1b      	ldr	r3, [r3, #32]
 80015ec:	4a71      	ldr	r2, [pc, #452]	@ (80017b4 <HAL_RCC_OscConfig+0xb40>)
 80015ee:	f043 0301 	orr.w	r3, r3, #1
 80015f2:	6213      	str	r3, [r2, #32]
 80015f4:	e00b      	b.n	800160e <HAL_RCC_OscConfig+0x99a>
 80015f6:	4b6f      	ldr	r3, [pc, #444]	@ (80017b4 <HAL_RCC_OscConfig+0xb40>)
 80015f8:	6a1b      	ldr	r3, [r3, #32]
 80015fa:	4a6e      	ldr	r2, [pc, #440]	@ (80017b4 <HAL_RCC_OscConfig+0xb40>)
 80015fc:	f023 0301 	bic.w	r3, r3, #1
 8001600:	6213      	str	r3, [r2, #32]
 8001602:	4b6c      	ldr	r3, [pc, #432]	@ (80017b4 <HAL_RCC_OscConfig+0xb40>)
 8001604:	6a1b      	ldr	r3, [r3, #32]
 8001606:	4a6b      	ldr	r2, [pc, #428]	@ (80017b4 <HAL_RCC_OscConfig+0xb40>)
 8001608:	f023 0304 	bic.w	r3, r3, #4
 800160c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800160e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001612:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	2b00      	cmp	r3, #0
 800161c:	f000 8081 	beq.w	8001722 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001620:	f7ff f87e 	bl	8000720 <HAL_GetTick>
 8001624:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001628:	e00b      	b.n	8001642 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800162a:	f7ff f879 	bl	8000720 <HAL_GetTick>
 800162e:	4602      	mov	r2, r0
 8001630:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	f241 3288 	movw	r2, #5000	@ 0x1388
 800163a:	4293      	cmp	r3, r2
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e365      	b.n	8001d0e <HAL_RCC_OscConfig+0x109a>
 8001642:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001646:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800164a:	2202      	movs	r2, #2
 800164c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800164e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001652:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	fa93 f2a3 	rbit	r2, r3
 800165c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001660:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800166a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800166e:	2202      	movs	r2, #2
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001676:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	fa93 f2a3 	rbit	r2, r3
 8001680:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001684:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001688:	601a      	str	r2, [r3, #0]
  return result;
 800168a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800168e:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001692:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001694:	fab3 f383 	clz	r3, r3
 8001698:	b2db      	uxtb	r3, r3
 800169a:	095b      	lsrs	r3, r3, #5
 800169c:	b2db      	uxtb	r3, r3
 800169e:	f043 0302 	orr.w	r3, r3, #2
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d102      	bne.n	80016ae <HAL_RCC_OscConfig+0xa3a>
 80016a8:	4b42      	ldr	r3, [pc, #264]	@ (80017b4 <HAL_RCC_OscConfig+0xb40>)
 80016aa:	6a1b      	ldr	r3, [r3, #32]
 80016ac:	e013      	b.n	80016d6 <HAL_RCC_OscConfig+0xa62>
 80016ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016b2:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80016b6:	2202      	movs	r2, #2
 80016b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016be:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	fa93 f2a3 	rbit	r2, r3
 80016c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016cc:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	4b38      	ldr	r3, [pc, #224]	@ (80017b4 <HAL_RCC_OscConfig+0xb40>)
 80016d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016d6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80016da:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80016de:	2102      	movs	r1, #2
 80016e0:	6011      	str	r1, [r2, #0]
 80016e2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80016e6:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80016ea:	6812      	ldr	r2, [r2, #0]
 80016ec:	fa92 f1a2 	rbit	r1, r2
 80016f0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80016f4:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80016f8:	6011      	str	r1, [r2, #0]
  return result;
 80016fa:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80016fe:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8001702:	6812      	ldr	r2, [r2, #0]
 8001704:	fab2 f282 	clz	r2, r2
 8001708:	b2d2      	uxtb	r2, r2
 800170a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800170e:	b2d2      	uxtb	r2, r2
 8001710:	f002 021f 	and.w	r2, r2, #31
 8001714:	2101      	movs	r1, #1
 8001716:	fa01 f202 	lsl.w	r2, r1, r2
 800171a:	4013      	ands	r3, r2
 800171c:	2b00      	cmp	r3, #0
 800171e:	d084      	beq.n	800162a <HAL_RCC_OscConfig+0x9b6>
 8001720:	e083      	b.n	800182a <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001722:	f7fe fffd 	bl	8000720 <HAL_GetTick>
 8001726:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800172a:	e00b      	b.n	8001744 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800172c:	f7fe fff8 	bl	8000720 <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	f241 3288 	movw	r2, #5000	@ 0x1388
 800173c:	4293      	cmp	r3, r2
 800173e:	d901      	bls.n	8001744 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001740:	2303      	movs	r3, #3
 8001742:	e2e4      	b.n	8001d0e <HAL_RCC_OscConfig+0x109a>
 8001744:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001748:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800174c:	2202      	movs	r2, #2
 800174e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001750:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001754:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	fa93 f2a3 	rbit	r2, r3
 800175e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001762:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800176c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001770:	2202      	movs	r2, #2
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001778:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	fa93 f2a3 	rbit	r2, r3
 8001782:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001786:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800178a:	601a      	str	r2, [r3, #0]
  return result;
 800178c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001790:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001794:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001796:	fab3 f383 	clz	r3, r3
 800179a:	b2db      	uxtb	r3, r3
 800179c:	095b      	lsrs	r3, r3, #5
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	f043 0302 	orr.w	r3, r3, #2
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d106      	bne.n	80017b8 <HAL_RCC_OscConfig+0xb44>
 80017aa:	4b02      	ldr	r3, [pc, #8]	@ (80017b4 <HAL_RCC_OscConfig+0xb40>)
 80017ac:	6a1b      	ldr	r3, [r3, #32]
 80017ae:	e017      	b.n	80017e0 <HAL_RCC_OscConfig+0xb6c>
 80017b0:	40007000 	.word	0x40007000
 80017b4:	40021000 	.word	0x40021000
 80017b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017bc:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80017c0:	2202      	movs	r2, #2
 80017c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017c8:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	fa93 f2a3 	rbit	r2, r3
 80017d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017d6:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	4bb3      	ldr	r3, [pc, #716]	@ (8001aac <HAL_RCC_OscConfig+0xe38>)
 80017de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017e0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80017e4:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80017e8:	2102      	movs	r1, #2
 80017ea:	6011      	str	r1, [r2, #0]
 80017ec:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80017f0:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80017f4:	6812      	ldr	r2, [r2, #0]
 80017f6:	fa92 f1a2 	rbit	r1, r2
 80017fa:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80017fe:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8001802:	6011      	str	r1, [r2, #0]
  return result;
 8001804:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001808:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 800180c:	6812      	ldr	r2, [r2, #0]
 800180e:	fab2 f282 	clz	r2, r2
 8001812:	b2d2      	uxtb	r2, r2
 8001814:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001818:	b2d2      	uxtb	r2, r2
 800181a:	f002 021f 	and.w	r2, r2, #31
 800181e:	2101      	movs	r1, #1
 8001820:	fa01 f202 	lsl.w	r2, r1, r2
 8001824:	4013      	ands	r3, r2
 8001826:	2b00      	cmp	r3, #0
 8001828:	d180      	bne.n	800172c <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800182a:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 800182e:	2b01      	cmp	r3, #1
 8001830:	d105      	bne.n	800183e <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001832:	4b9e      	ldr	r3, [pc, #632]	@ (8001aac <HAL_RCC_OscConfig+0xe38>)
 8001834:	69db      	ldr	r3, [r3, #28]
 8001836:	4a9d      	ldr	r2, [pc, #628]	@ (8001aac <HAL_RCC_OscConfig+0xe38>)
 8001838:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800183c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800183e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001842:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	699b      	ldr	r3, [r3, #24]
 800184a:	2b00      	cmp	r3, #0
 800184c:	f000 825e 	beq.w	8001d0c <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001850:	4b96      	ldr	r3, [pc, #600]	@ (8001aac <HAL_RCC_OscConfig+0xe38>)
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f003 030c 	and.w	r3, r3, #12
 8001858:	2b08      	cmp	r3, #8
 800185a:	f000 821f 	beq.w	8001c9c <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800185e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001862:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	699b      	ldr	r3, [r3, #24]
 800186a:	2b02      	cmp	r3, #2
 800186c:	f040 8170 	bne.w	8001b50 <HAL_RCC_OscConfig+0xedc>
 8001870:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001874:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001878:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800187c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800187e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001882:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	fa93 f2a3 	rbit	r2, r3
 800188c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001890:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001894:	601a      	str	r2, [r3, #0]
  return result;
 8001896:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800189a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800189e:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018a0:	fab3 f383 	clz	r3, r3
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80018aa:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	461a      	mov	r2, r3
 80018b2:	2300      	movs	r3, #0
 80018b4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b6:	f7fe ff33 	bl	8000720 <HAL_GetTick>
 80018ba:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018be:	e009      	b.n	80018d4 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018c0:	f7fe ff2e 	bl	8000720 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d901      	bls.n	80018d4 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e21c      	b.n	8001d0e <HAL_RCC_OscConfig+0x109a>
 80018d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018d8:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80018dc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80018e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018e6:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	fa93 f2a3 	rbit	r2, r3
 80018f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018f4:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80018f8:	601a      	str	r2, [r3, #0]
  return result;
 80018fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018fe:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001902:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001904:	fab3 f383 	clz	r3, r3
 8001908:	b2db      	uxtb	r3, r3
 800190a:	095b      	lsrs	r3, r3, #5
 800190c:	b2db      	uxtb	r3, r3
 800190e:	f043 0301 	orr.w	r3, r3, #1
 8001912:	b2db      	uxtb	r3, r3
 8001914:	2b01      	cmp	r3, #1
 8001916:	d102      	bne.n	800191e <HAL_RCC_OscConfig+0xcaa>
 8001918:	4b64      	ldr	r3, [pc, #400]	@ (8001aac <HAL_RCC_OscConfig+0xe38>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	e027      	b.n	800196e <HAL_RCC_OscConfig+0xcfa>
 800191e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001922:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001926:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800192a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800192c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001930:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	fa93 f2a3 	rbit	r2, r3
 800193a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800193e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001948:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800194c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001950:	601a      	str	r2, [r3, #0]
 8001952:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001956:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	fa93 f2a3 	rbit	r2, r3
 8001960:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001964:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	4b50      	ldr	r3, [pc, #320]	@ (8001aac <HAL_RCC_OscConfig+0xe38>)
 800196c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800196e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001972:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001976:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800197a:	6011      	str	r1, [r2, #0]
 800197c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001980:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001984:	6812      	ldr	r2, [r2, #0]
 8001986:	fa92 f1a2 	rbit	r1, r2
 800198a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800198e:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8001992:	6011      	str	r1, [r2, #0]
  return result;
 8001994:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001998:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 800199c:	6812      	ldr	r2, [r2, #0]
 800199e:	fab2 f282 	clz	r2, r2
 80019a2:	b2d2      	uxtb	r2, r2
 80019a4:	f042 0220 	orr.w	r2, r2, #32
 80019a8:	b2d2      	uxtb	r2, r2
 80019aa:	f002 021f 	and.w	r2, r2, #31
 80019ae:	2101      	movs	r1, #1
 80019b0:	fa01 f202 	lsl.w	r2, r1, r2
 80019b4:	4013      	ands	r3, r2
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d182      	bne.n	80018c0 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019ba:	4b3c      	ldr	r3, [pc, #240]	@ (8001aac <HAL_RCC_OscConfig+0xe38>)
 80019bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019be:	f023 020f 	bic.w	r2, r3, #15
 80019c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019c6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ce:	4937      	ldr	r1, [pc, #220]	@ (8001aac <HAL_RCC_OscConfig+0xe38>)
 80019d0:	4313      	orrs	r3, r2
 80019d2:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80019d4:	4b35      	ldr	r3, [pc, #212]	@ (8001aac <HAL_RCC_OscConfig+0xe38>)
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 80019dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019e0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	6a19      	ldr	r1, [r3, #32]
 80019e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019ec:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	69db      	ldr	r3, [r3, #28]
 80019f4:	430b      	orrs	r3, r1
 80019f6:	492d      	ldr	r1, [pc, #180]	@ (8001aac <HAL_RCC_OscConfig+0xe38>)
 80019f8:	4313      	orrs	r3, r2
 80019fa:	604b      	str	r3, [r1, #4]
 80019fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a00:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001a04:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001a08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a0a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a0e:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	fa93 f2a3 	rbit	r2, r3
 8001a18:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a1c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001a20:	601a      	str	r2, [r3, #0]
  return result;
 8001a22:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a26:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001a2a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a2c:	fab3 f383 	clz	r3, r3
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001a36:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	2301      	movs	r3, #1
 8001a40:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a42:	f7fe fe6d 	bl	8000720 <HAL_GetTick>
 8001a46:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a4a:	e009      	b.n	8001a60 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a4c:	f7fe fe68 	bl	8000720 <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d901      	bls.n	8001a60 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	e156      	b.n	8001d0e <HAL_RCC_OscConfig+0x109a>
 8001a60:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a64:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001a68:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a6e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a72:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	fa93 f2a3 	rbit	r2, r3
 8001a7c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a80:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001a84:	601a      	str	r2, [r3, #0]
  return result;
 8001a86:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a8a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001a8e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a90:	fab3 f383 	clz	r3, r3
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	095b      	lsrs	r3, r3, #5
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	f043 0301 	orr.w	r3, r3, #1
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d105      	bne.n	8001ab0 <HAL_RCC_OscConfig+0xe3c>
 8001aa4:	4b01      	ldr	r3, [pc, #4]	@ (8001aac <HAL_RCC_OscConfig+0xe38>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	e02a      	b.n	8001b00 <HAL_RCC_OscConfig+0xe8c>
 8001aaa:	bf00      	nop
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ab4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001ab8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001abc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001abe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ac2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	fa93 f2a3 	rbit	r2, r3
 8001acc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ad0:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ada:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001ade:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ae8:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	fa93 f2a3 	rbit	r2, r3
 8001af2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001af6:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	4b86      	ldr	r3, [pc, #536]	@ (8001d18 <HAL_RCC_OscConfig+0x10a4>)
 8001afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b00:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001b04:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001b08:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001b0c:	6011      	str	r1, [r2, #0]
 8001b0e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001b12:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001b16:	6812      	ldr	r2, [r2, #0]
 8001b18:	fa92 f1a2 	rbit	r1, r2
 8001b1c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001b20:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8001b24:	6011      	str	r1, [r2, #0]
  return result;
 8001b26:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001b2a:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8001b2e:	6812      	ldr	r2, [r2, #0]
 8001b30:	fab2 f282 	clz	r2, r2
 8001b34:	b2d2      	uxtb	r2, r2
 8001b36:	f042 0220 	orr.w	r2, r2, #32
 8001b3a:	b2d2      	uxtb	r2, r2
 8001b3c:	f002 021f 	and.w	r2, r2, #31
 8001b40:	2101      	movs	r1, #1
 8001b42:	fa01 f202 	lsl.w	r2, r1, r2
 8001b46:	4013      	ands	r3, r2
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	f43f af7f 	beq.w	8001a4c <HAL_RCC_OscConfig+0xdd8>
 8001b4e:	e0dd      	b.n	8001d0c <HAL_RCC_OscConfig+0x1098>
 8001b50:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b54:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001b58:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001b5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b5e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b62:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	fa93 f2a3 	rbit	r2, r3
 8001b6c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b70:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001b74:	601a      	str	r2, [r3, #0]
  return result;
 8001b76:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b7a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001b7e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b80:	fab3 f383 	clz	r3, r3
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001b8a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	461a      	mov	r2, r3
 8001b92:	2300      	movs	r3, #0
 8001b94:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b96:	f7fe fdc3 	bl	8000720 <HAL_GetTick>
 8001b9a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b9e:	e009      	b.n	8001bb4 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ba0:	f7fe fdbe 	bl	8000720 <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d901      	bls.n	8001bb4 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e0ac      	b.n	8001d0e <HAL_RCC_OscConfig+0x109a>
 8001bb4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bb8:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001bbc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001bc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bc6:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	fa93 f2a3 	rbit	r2, r3
 8001bd0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bd4:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001bd8:	601a      	str	r2, [r3, #0]
  return result;
 8001bda:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bde:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001be2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001be4:	fab3 f383 	clz	r3, r3
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	095b      	lsrs	r3, r3, #5
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	f043 0301 	orr.w	r3, r3, #1
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d102      	bne.n	8001bfe <HAL_RCC_OscConfig+0xf8a>
 8001bf8:	4b47      	ldr	r3, [pc, #284]	@ (8001d18 <HAL_RCC_OscConfig+0x10a4>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	e027      	b.n	8001c4e <HAL_RCC_OscConfig+0xfda>
 8001bfe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c02:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001c06:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c0c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c10:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	fa93 f2a3 	rbit	r2, r3
 8001c1a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c1e:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c28:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001c2c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c30:	601a      	str	r2, [r3, #0]
 8001c32:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c36:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	fa93 f2a3 	rbit	r2, r3
 8001c40:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c44:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8001c48:	601a      	str	r2, [r3, #0]
 8001c4a:	4b33      	ldr	r3, [pc, #204]	@ (8001d18 <HAL_RCC_OscConfig+0x10a4>)
 8001c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c4e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001c52:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001c56:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001c5a:	6011      	str	r1, [r2, #0]
 8001c5c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001c60:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001c64:	6812      	ldr	r2, [r2, #0]
 8001c66:	fa92 f1a2 	rbit	r1, r2
 8001c6a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001c6e:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8001c72:	6011      	str	r1, [r2, #0]
  return result;
 8001c74:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001c78:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8001c7c:	6812      	ldr	r2, [r2, #0]
 8001c7e:	fab2 f282 	clz	r2, r2
 8001c82:	b2d2      	uxtb	r2, r2
 8001c84:	f042 0220 	orr.w	r2, r2, #32
 8001c88:	b2d2      	uxtb	r2, r2
 8001c8a:	f002 021f 	and.w	r2, r2, #31
 8001c8e:	2101      	movs	r1, #1
 8001c90:	fa01 f202 	lsl.w	r2, r1, r2
 8001c94:	4013      	ands	r3, r2
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d182      	bne.n	8001ba0 <HAL_RCC_OscConfig+0xf2c>
 8001c9a:	e037      	b.n	8001d0c <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c9c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ca0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d101      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e02e      	b.n	8001d0e <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001cb0:	4b19      	ldr	r3, [pc, #100]	@ (8001d18 <HAL_RCC_OscConfig+0x10a4>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001cb8:	4b17      	ldr	r3, [pc, #92]	@ (8001d18 <HAL_RCC_OscConfig+0x10a4>)
 8001cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cbc:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001cc0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001cc4:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8001cc8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ccc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	69db      	ldr	r3, [r3, #28]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d117      	bne.n	8001d08 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001cd8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001cdc:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001ce0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ce4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d10b      	bne.n	8001d08 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001cf0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001cf4:	f003 020f 	and.w	r2, r3, #15
 8001cf8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cfc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d001      	beq.n	8001d0c <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e000      	b.n	8001d0e <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	40021000 	.word	0x40021000

08001d1c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b09e      	sub	sp, #120	@ 0x78
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001d26:	2300      	movs	r3, #0
 8001d28:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d101      	bne.n	8001d34 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e162      	b.n	8001ffa <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d34:	4b90      	ldr	r3, [pc, #576]	@ (8001f78 <HAL_RCC_ClockConfig+0x25c>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0307 	and.w	r3, r3, #7
 8001d3c:	683a      	ldr	r2, [r7, #0]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d910      	bls.n	8001d64 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d42:	4b8d      	ldr	r3, [pc, #564]	@ (8001f78 <HAL_RCC_ClockConfig+0x25c>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f023 0207 	bic.w	r2, r3, #7
 8001d4a:	498b      	ldr	r1, [pc, #556]	@ (8001f78 <HAL_RCC_ClockConfig+0x25c>)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d52:	4b89      	ldr	r3, [pc, #548]	@ (8001f78 <HAL_RCC_ClockConfig+0x25c>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0307 	and.w	r3, r3, #7
 8001d5a:	683a      	ldr	r2, [r7, #0]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d001      	beq.n	8001d64 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e14a      	b.n	8001ffa <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0302 	and.w	r3, r3, #2
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d008      	beq.n	8001d82 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d70:	4b82      	ldr	r3, [pc, #520]	@ (8001f7c <HAL_RCC_ClockConfig+0x260>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	497f      	ldr	r1, [pc, #508]	@ (8001f7c <HAL_RCC_ClockConfig+0x260>)
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0301 	and.w	r3, r3, #1
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	f000 80dc 	beq.w	8001f48 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d13c      	bne.n	8001e12 <HAL_RCC_ClockConfig+0xf6>
 8001d98:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d9c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d9e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001da0:	fa93 f3a3 	rbit	r3, r3
 8001da4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001da6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001da8:	fab3 f383 	clz	r3, r3
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	095b      	lsrs	r3, r3, #5
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	f043 0301 	orr.w	r3, r3, #1
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d102      	bne.n	8001dc2 <HAL_RCC_ClockConfig+0xa6>
 8001dbc:	4b6f      	ldr	r3, [pc, #444]	@ (8001f7c <HAL_RCC_ClockConfig+0x260>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	e00f      	b.n	8001de2 <HAL_RCC_ClockConfig+0xc6>
 8001dc2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001dc6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001dca:	fa93 f3a3 	rbit	r3, r3
 8001dce:	667b      	str	r3, [r7, #100]	@ 0x64
 8001dd0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001dd4:	663b      	str	r3, [r7, #96]	@ 0x60
 8001dd6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001dd8:	fa93 f3a3 	rbit	r3, r3
 8001ddc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001dde:	4b67      	ldr	r3, [pc, #412]	@ (8001f7c <HAL_RCC_ClockConfig+0x260>)
 8001de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001de2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001de6:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001de8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001dea:	fa92 f2a2 	rbit	r2, r2
 8001dee:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8001df0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001df2:	fab2 f282 	clz	r2, r2
 8001df6:	b2d2      	uxtb	r2, r2
 8001df8:	f042 0220 	orr.w	r2, r2, #32
 8001dfc:	b2d2      	uxtb	r2, r2
 8001dfe:	f002 021f 	and.w	r2, r2, #31
 8001e02:	2101      	movs	r1, #1
 8001e04:	fa01 f202 	lsl.w	r2, r1, r2
 8001e08:	4013      	ands	r3, r2
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d17b      	bne.n	8001f06 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e0f3      	b.n	8001ffa <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d13c      	bne.n	8001e94 <HAL_RCC_ClockConfig+0x178>
 8001e1a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e1e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001e22:	fa93 f3a3 	rbit	r3, r3
 8001e26:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001e28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e2a:	fab3 f383 	clz	r3, r3
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	095b      	lsrs	r3, r3, #5
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	f043 0301 	orr.w	r3, r3, #1
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d102      	bne.n	8001e44 <HAL_RCC_ClockConfig+0x128>
 8001e3e:	4b4f      	ldr	r3, [pc, #316]	@ (8001f7c <HAL_RCC_ClockConfig+0x260>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	e00f      	b.n	8001e64 <HAL_RCC_ClockConfig+0x148>
 8001e44:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e48:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e4c:	fa93 f3a3 	rbit	r3, r3
 8001e50:	647b      	str	r3, [r7, #68]	@ 0x44
 8001e52:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e56:	643b      	str	r3, [r7, #64]	@ 0x40
 8001e58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e5a:	fa93 f3a3 	rbit	r3, r3
 8001e5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001e60:	4b46      	ldr	r3, [pc, #280]	@ (8001f7c <HAL_RCC_ClockConfig+0x260>)
 8001e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e64:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e68:	63ba      	str	r2, [r7, #56]	@ 0x38
 8001e6a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001e6c:	fa92 f2a2 	rbit	r2, r2
 8001e70:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8001e72:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001e74:	fab2 f282 	clz	r2, r2
 8001e78:	b2d2      	uxtb	r2, r2
 8001e7a:	f042 0220 	orr.w	r2, r2, #32
 8001e7e:	b2d2      	uxtb	r2, r2
 8001e80:	f002 021f 	and.w	r2, r2, #31
 8001e84:	2101      	movs	r1, #1
 8001e86:	fa01 f202 	lsl.w	r2, r1, r2
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d13a      	bne.n	8001f06 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e0b2      	b.n	8001ffa <HAL_RCC_ClockConfig+0x2de>
 8001e94:	2302      	movs	r3, #2
 8001e96:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e9a:	fa93 f3a3 	rbit	r3, r3
 8001e9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8001ea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ea2:	fab3 f383 	clz	r3, r3
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	095b      	lsrs	r3, r3, #5
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	f043 0301 	orr.w	r3, r3, #1
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d102      	bne.n	8001ebc <HAL_RCC_ClockConfig+0x1a0>
 8001eb6:	4b31      	ldr	r3, [pc, #196]	@ (8001f7c <HAL_RCC_ClockConfig+0x260>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	e00d      	b.n	8001ed8 <HAL_RCC_ClockConfig+0x1bc>
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ec2:	fa93 f3a3 	rbit	r3, r3
 8001ec6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ec8:	2302      	movs	r3, #2
 8001eca:	623b      	str	r3, [r7, #32]
 8001ecc:	6a3b      	ldr	r3, [r7, #32]
 8001ece:	fa93 f3a3 	rbit	r3, r3
 8001ed2:	61fb      	str	r3, [r7, #28]
 8001ed4:	4b29      	ldr	r3, [pc, #164]	@ (8001f7c <HAL_RCC_ClockConfig+0x260>)
 8001ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed8:	2202      	movs	r2, #2
 8001eda:	61ba      	str	r2, [r7, #24]
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	fa92 f2a2 	rbit	r2, r2
 8001ee2:	617a      	str	r2, [r7, #20]
  return result;
 8001ee4:	697a      	ldr	r2, [r7, #20]
 8001ee6:	fab2 f282 	clz	r2, r2
 8001eea:	b2d2      	uxtb	r2, r2
 8001eec:	f042 0220 	orr.w	r2, r2, #32
 8001ef0:	b2d2      	uxtb	r2, r2
 8001ef2:	f002 021f 	and.w	r2, r2, #31
 8001ef6:	2101      	movs	r1, #1
 8001ef8:	fa01 f202 	lsl.w	r2, r1, r2
 8001efc:	4013      	ands	r3, r2
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d101      	bne.n	8001f06 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e079      	b.n	8001ffa <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f06:	4b1d      	ldr	r3, [pc, #116]	@ (8001f7c <HAL_RCC_ClockConfig+0x260>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f023 0203 	bic.w	r2, r3, #3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	491a      	ldr	r1, [pc, #104]	@ (8001f7c <HAL_RCC_ClockConfig+0x260>)
 8001f14:	4313      	orrs	r3, r2
 8001f16:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f18:	f7fe fc02 	bl	8000720 <HAL_GetTick>
 8001f1c:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f1e:	e00a      	b.n	8001f36 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f20:	f7fe fbfe 	bl	8000720 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e061      	b.n	8001ffa <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f36:	4b11      	ldr	r3, [pc, #68]	@ (8001f7c <HAL_RCC_ClockConfig+0x260>)
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f003 020c 	and.w	r2, r3, #12
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d1eb      	bne.n	8001f20 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f48:	4b0b      	ldr	r3, [pc, #44]	@ (8001f78 <HAL_RCC_ClockConfig+0x25c>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0307 	and.w	r3, r3, #7
 8001f50:	683a      	ldr	r2, [r7, #0]
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d214      	bcs.n	8001f80 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f56:	4b08      	ldr	r3, [pc, #32]	@ (8001f78 <HAL_RCC_ClockConfig+0x25c>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f023 0207 	bic.w	r2, r3, #7
 8001f5e:	4906      	ldr	r1, [pc, #24]	@ (8001f78 <HAL_RCC_ClockConfig+0x25c>)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f66:	4b04      	ldr	r3, [pc, #16]	@ (8001f78 <HAL_RCC_ClockConfig+0x25c>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0307 	and.w	r3, r3, #7
 8001f6e:	683a      	ldr	r2, [r7, #0]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d005      	beq.n	8001f80 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e040      	b.n	8001ffa <HAL_RCC_ClockConfig+0x2de>
 8001f78:	40022000 	.word	0x40022000
 8001f7c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0304 	and.w	r3, r3, #4
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d008      	beq.n	8001f9e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f8c:	4b1d      	ldr	r3, [pc, #116]	@ (8002004 <HAL_RCC_ClockConfig+0x2e8>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	491a      	ldr	r1, [pc, #104]	@ (8002004 <HAL_RCC_ClockConfig+0x2e8>)
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0308 	and.w	r3, r3, #8
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d009      	beq.n	8001fbe <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001faa:	4b16      	ldr	r3, [pc, #88]	@ (8002004 <HAL_RCC_ClockConfig+0x2e8>)
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	691b      	ldr	r3, [r3, #16]
 8001fb6:	00db      	lsls	r3, r3, #3
 8001fb8:	4912      	ldr	r1, [pc, #72]	@ (8002004 <HAL_RCC_ClockConfig+0x2e8>)
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001fbe:	f000 f829 	bl	8002014 <HAL_RCC_GetSysClockFreq>
 8001fc2:	4601      	mov	r1, r0
 8001fc4:	4b0f      	ldr	r3, [pc, #60]	@ (8002004 <HAL_RCC_ClockConfig+0x2e8>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001fcc:	22f0      	movs	r2, #240	@ 0xf0
 8001fce:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd0:	693a      	ldr	r2, [r7, #16]
 8001fd2:	fa92 f2a2 	rbit	r2, r2
 8001fd6:	60fa      	str	r2, [r7, #12]
  return result;
 8001fd8:	68fa      	ldr	r2, [r7, #12]
 8001fda:	fab2 f282 	clz	r2, r2
 8001fde:	b2d2      	uxtb	r2, r2
 8001fe0:	40d3      	lsrs	r3, r2
 8001fe2:	4a09      	ldr	r2, [pc, #36]	@ (8002008 <HAL_RCC_ClockConfig+0x2ec>)
 8001fe4:	5cd3      	ldrb	r3, [r2, r3]
 8001fe6:	fa21 f303 	lsr.w	r3, r1, r3
 8001fea:	4a08      	ldr	r2, [pc, #32]	@ (800200c <HAL_RCC_ClockConfig+0x2f0>)
 8001fec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001fee:	4b08      	ldr	r3, [pc, #32]	@ (8002010 <HAL_RCC_ClockConfig+0x2f4>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7fe fa98 	bl	8000528 <HAL_InitTick>
  
  return HAL_OK;
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3778      	adds	r7, #120	@ 0x78
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	40021000 	.word	0x40021000
 8002008:	08006194 	.word	0x08006194
 800200c:	20000000 	.word	0x20000000
 8002010:	20000004 	.word	0x20000004

08002014 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002014:	b480      	push	{r7}
 8002016:	b087      	sub	sp, #28
 8002018:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800201a:	2300      	movs	r3, #0
 800201c:	60fb      	str	r3, [r7, #12]
 800201e:	2300      	movs	r3, #0
 8002020:	60bb      	str	r3, [r7, #8]
 8002022:	2300      	movs	r3, #0
 8002024:	617b      	str	r3, [r7, #20]
 8002026:	2300      	movs	r3, #0
 8002028:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800202a:	2300      	movs	r3, #0
 800202c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800202e:	4b1f      	ldr	r3, [pc, #124]	@ (80020ac <HAL_RCC_GetSysClockFreq+0x98>)
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f003 030c 	and.w	r3, r3, #12
 800203a:	2b04      	cmp	r3, #4
 800203c:	d002      	beq.n	8002044 <HAL_RCC_GetSysClockFreq+0x30>
 800203e:	2b08      	cmp	r3, #8
 8002040:	d003      	beq.n	800204a <HAL_RCC_GetSysClockFreq+0x36>
 8002042:	e029      	b.n	8002098 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002044:	4b1a      	ldr	r3, [pc, #104]	@ (80020b0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002046:	613b      	str	r3, [r7, #16]
      break;
 8002048:	e029      	b.n	800209e <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	0c9b      	lsrs	r3, r3, #18
 800204e:	f003 030f 	and.w	r3, r3, #15
 8002052:	4a18      	ldr	r2, [pc, #96]	@ (80020b4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002054:	5cd3      	ldrb	r3, [r2, r3]
 8002056:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002058:	4b14      	ldr	r3, [pc, #80]	@ (80020ac <HAL_RCC_GetSysClockFreq+0x98>)
 800205a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800205c:	f003 030f 	and.w	r3, r3, #15
 8002060:	4a15      	ldr	r2, [pc, #84]	@ (80020b8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002062:	5cd3      	ldrb	r3, [r2, r3]
 8002064:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d008      	beq.n	8002082 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002070:	4a0f      	ldr	r2, [pc, #60]	@ (80020b0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	fbb2 f2f3 	udiv	r2, r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	fb02 f303 	mul.w	r3, r2, r3
 800207e:	617b      	str	r3, [r7, #20]
 8002080:	e007      	b.n	8002092 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002082:	4a0b      	ldr	r2, [pc, #44]	@ (80020b0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	fbb2 f2f3 	udiv	r2, r2, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	fb02 f303 	mul.w	r3, r2, r3
 8002090:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	613b      	str	r3, [r7, #16]
      break;
 8002096:	e002      	b.n	800209e <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002098:	4b05      	ldr	r3, [pc, #20]	@ (80020b0 <HAL_RCC_GetSysClockFreq+0x9c>)
 800209a:	613b      	str	r3, [r7, #16]
      break;
 800209c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800209e:	693b      	ldr	r3, [r7, #16]
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	371c      	adds	r7, #28
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr
 80020ac:	40021000 	.word	0x40021000
 80020b0:	007a1200 	.word	0x007a1200
 80020b4:	080061ac 	.word	0x080061ac
 80020b8:	080061bc 	.word	0x080061bc

080020bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020c0:	4b03      	ldr	r3, [pc, #12]	@ (80020d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80020c2:	681b      	ldr	r3, [r3, #0]
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	20000000 	.word	0x20000000

080020d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80020da:	f7ff ffef 	bl	80020bc <HAL_RCC_GetHCLKFreq>
 80020de:	4601      	mov	r1, r0
 80020e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002110 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80020e8:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80020ec:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	fa92 f2a2 	rbit	r2, r2
 80020f4:	603a      	str	r2, [r7, #0]
  return result;
 80020f6:	683a      	ldr	r2, [r7, #0]
 80020f8:	fab2 f282 	clz	r2, r2
 80020fc:	b2d2      	uxtb	r2, r2
 80020fe:	40d3      	lsrs	r3, r2
 8002100:	4a04      	ldr	r2, [pc, #16]	@ (8002114 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002102:	5cd3      	ldrb	r3, [r2, r3]
 8002104:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002108:	4618      	mov	r0, r3
 800210a:	3708      	adds	r7, #8
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40021000 	.word	0x40021000
 8002114:	080061a4 	.word	0x080061a4

08002118 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800211e:	f7ff ffcd 	bl	80020bc <HAL_RCC_GetHCLKFreq>
 8002122:	4601      	mov	r1, r0
 8002124:	4b0b      	ldr	r3, [pc, #44]	@ (8002154 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 800212c:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002130:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	fa92 f2a2 	rbit	r2, r2
 8002138:	603a      	str	r2, [r7, #0]
  return result;
 800213a:	683a      	ldr	r2, [r7, #0]
 800213c:	fab2 f282 	clz	r2, r2
 8002140:	b2d2      	uxtb	r2, r2
 8002142:	40d3      	lsrs	r3, r2
 8002144:	4a04      	ldr	r2, [pc, #16]	@ (8002158 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002146:	5cd3      	ldrb	r3, [r2, r3]
 8002148:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800214c:	4618      	mov	r0, r3
 800214e:	3708      	adds	r7, #8
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	40021000 	.word	0x40021000
 8002158:	080061a4 	.word	0x080061a4

0800215c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	220f      	movs	r2, #15
 800216a:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800216c:	4b12      	ldr	r3, [pc, #72]	@ (80021b8 <HAL_RCC_GetClockConfig+0x5c>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f003 0203 	and.w	r2, r3, #3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002178:	4b0f      	ldr	r3, [pc, #60]	@ (80021b8 <HAL_RCC_GetClockConfig+0x5c>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8002184:	4b0c      	ldr	r3, [pc, #48]	@ (80021b8 <HAL_RCC_GetClockConfig+0x5c>)
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002190:	4b09      	ldr	r3, [pc, #36]	@ (80021b8 <HAL_RCC_GetClockConfig+0x5c>)
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	08db      	lsrs	r3, r3, #3
 8002196:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800219e:	4b07      	ldr	r3, [pc, #28]	@ (80021bc <HAL_RCC_GetClockConfig+0x60>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0207 	and.w	r2, r3, #7
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	601a      	str	r2, [r3, #0]
}
 80021aa:	bf00      	nop
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	40021000 	.word	0x40021000
 80021bc:	40022000 	.word	0x40022000

080021c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b092      	sub	sp, #72	@ 0x48
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021c8:	2300      	movs	r3, #0
 80021ca:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80021cc:	2300      	movs	r3, #0
 80021ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80021d0:	2300      	movs	r3, #0
 80021d2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	f000 80d4 	beq.w	800238c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021e4:	4b4e      	ldr	r3, [pc, #312]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021e6:	69db      	ldr	r3, [r3, #28]
 80021e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d10e      	bne.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021f0:	4b4b      	ldr	r3, [pc, #300]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021f2:	69db      	ldr	r3, [r3, #28]
 80021f4:	4a4a      	ldr	r2, [pc, #296]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021fa:	61d3      	str	r3, [r2, #28]
 80021fc:	4b48      	ldr	r3, [pc, #288]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021fe:	69db      	ldr	r3, [r3, #28]
 8002200:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002204:	60bb      	str	r3, [r7, #8]
 8002206:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002208:	2301      	movs	r3, #1
 800220a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800220e:	4b45      	ldr	r3, [pc, #276]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002216:	2b00      	cmp	r3, #0
 8002218:	d118      	bne.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800221a:	4b42      	ldr	r3, [pc, #264]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a41      	ldr	r2, [pc, #260]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002220:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002224:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002226:	f7fe fa7b 	bl	8000720 <HAL_GetTick>
 800222a:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800222c:	e008      	b.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800222e:	f7fe fa77 	bl	8000720 <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	2b64      	cmp	r3, #100	@ 0x64
 800223a:	d901      	bls.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e1d6      	b.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002240:	4b38      	ldr	r3, [pc, #224]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002248:	2b00      	cmp	r3, #0
 800224a:	d0f0      	beq.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800224c:	4b34      	ldr	r3, [pc, #208]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800224e:	6a1b      	ldr	r3, [r3, #32]
 8002250:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002254:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002256:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002258:	2b00      	cmp	r3, #0
 800225a:	f000 8084 	beq.w	8002366 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002266:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002268:	429a      	cmp	r2, r3
 800226a:	d07c      	beq.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800226c:	4b2c      	ldr	r3, [pc, #176]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800226e:	6a1b      	ldr	r3, [r3, #32]
 8002270:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002274:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002276:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800227a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800227e:	fa93 f3a3 	rbit	r3, r3
 8002282:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002284:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002286:	fab3 f383 	clz	r3, r3
 800228a:	b2db      	uxtb	r3, r3
 800228c:	461a      	mov	r2, r3
 800228e:	4b26      	ldr	r3, [pc, #152]	@ (8002328 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002290:	4413      	add	r3, r2
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	461a      	mov	r2, r3
 8002296:	2301      	movs	r3, #1
 8002298:	6013      	str	r3, [r2, #0]
 800229a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800229e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022a2:	fa93 f3a3 	rbit	r3, r3
 80022a6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80022a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80022aa:	fab3 f383 	clz	r3, r3
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	461a      	mov	r2, r3
 80022b2:	4b1d      	ldr	r3, [pc, #116]	@ (8002328 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80022b4:	4413      	add	r3, r2
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	461a      	mov	r2, r3
 80022ba:	2300      	movs	r3, #0
 80022bc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80022be:	4a18      	ldr	r2, [pc, #96]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022c2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80022c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d04b      	beq.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ce:	f7fe fa27 	bl	8000720 <HAL_GetTick>
 80022d2:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022d4:	e00a      	b.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022d6:	f7fe fa23 	bl	8000720 <HAL_GetTick>
 80022da:	4602      	mov	r2, r0
 80022dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d901      	bls.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80022e8:	2303      	movs	r3, #3
 80022ea:	e180      	b.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80022ec:	2302      	movs	r3, #2
 80022ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022f2:	fa93 f3a3 	rbit	r3, r3
 80022f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80022f8:	2302      	movs	r3, #2
 80022fa:	623b      	str	r3, [r7, #32]
 80022fc:	6a3b      	ldr	r3, [r7, #32]
 80022fe:	fa93 f3a3 	rbit	r3, r3
 8002302:	61fb      	str	r3, [r7, #28]
  return result;
 8002304:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002306:	fab3 f383 	clz	r3, r3
 800230a:	b2db      	uxtb	r3, r3
 800230c:	095b      	lsrs	r3, r3, #5
 800230e:	b2db      	uxtb	r3, r3
 8002310:	f043 0302 	orr.w	r3, r3, #2
 8002314:	b2db      	uxtb	r3, r3
 8002316:	2b02      	cmp	r3, #2
 8002318:	d108      	bne.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800231a:	4b01      	ldr	r3, [pc, #4]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800231c:	6a1b      	ldr	r3, [r3, #32]
 800231e:	e00d      	b.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002320:	40021000 	.word	0x40021000
 8002324:	40007000 	.word	0x40007000
 8002328:	10908100 	.word	0x10908100
 800232c:	2302      	movs	r3, #2
 800232e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	fa93 f3a3 	rbit	r3, r3
 8002336:	617b      	str	r3, [r7, #20]
 8002338:	4b9a      	ldr	r3, [pc, #616]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800233a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800233c:	2202      	movs	r2, #2
 800233e:	613a      	str	r2, [r7, #16]
 8002340:	693a      	ldr	r2, [r7, #16]
 8002342:	fa92 f2a2 	rbit	r2, r2
 8002346:	60fa      	str	r2, [r7, #12]
  return result;
 8002348:	68fa      	ldr	r2, [r7, #12]
 800234a:	fab2 f282 	clz	r2, r2
 800234e:	b2d2      	uxtb	r2, r2
 8002350:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002354:	b2d2      	uxtb	r2, r2
 8002356:	f002 021f 	and.w	r2, r2, #31
 800235a:	2101      	movs	r1, #1
 800235c:	fa01 f202 	lsl.w	r2, r1, r2
 8002360:	4013      	ands	r3, r2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d0b7      	beq.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002366:	4b8f      	ldr	r3, [pc, #572]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002368:	6a1b      	ldr	r3, [r3, #32]
 800236a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	498c      	ldr	r1, [pc, #560]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002374:	4313      	orrs	r3, r2
 8002376:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002378:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800237c:	2b01      	cmp	r3, #1
 800237e:	d105      	bne.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002380:	4b88      	ldr	r3, [pc, #544]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002382:	69db      	ldr	r3, [r3, #28]
 8002384:	4a87      	ldr	r2, [pc, #540]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002386:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800238a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0301 	and.w	r3, r3, #1
 8002394:	2b00      	cmp	r3, #0
 8002396:	d008      	beq.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002398:	4b82      	ldr	r3, [pc, #520]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800239a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800239c:	f023 0203 	bic.w	r2, r3, #3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	497f      	ldr	r1, [pc, #508]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0302 	and.w	r3, r3, #2
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d008      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023b6:	4b7b      	ldr	r3, [pc, #492]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80023b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ba:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	4978      	ldr	r1, [pc, #480]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0304 	and.w	r3, r3, #4
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d008      	beq.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80023d4:	4b73      	ldr	r3, [pc, #460]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80023d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	691b      	ldr	r3, [r3, #16]
 80023e0:	4970      	ldr	r1, [pc, #448]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0320 	and.w	r3, r3, #32
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d008      	beq.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023f2:	4b6c      	ldr	r3, [pc, #432]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80023f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023f6:	f023 0210 	bic.w	r2, r3, #16
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	69db      	ldr	r3, [r3, #28]
 80023fe:	4969      	ldr	r1, [pc, #420]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002400:	4313      	orrs	r3, r2
 8002402:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d008      	beq.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002410:	4b64      	ldr	r3, [pc, #400]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800241c:	4961      	ldr	r1, [pc, #388]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800241e:	4313      	orrs	r3, r2
 8002420:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800242a:	2b00      	cmp	r3, #0
 800242c:	d008      	beq.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800242e:	4b5d      	ldr	r3, [pc, #372]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002432:	f023 0220 	bic.w	r2, r3, #32
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a1b      	ldr	r3, [r3, #32]
 800243a:	495a      	ldr	r1, [pc, #360]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800243c:	4313      	orrs	r3, r2
 800243e:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d008      	beq.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800244c:	4b55      	ldr	r3, [pc, #340]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800244e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002450:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002458:	4952      	ldr	r1, [pc, #328]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800245a:	4313      	orrs	r3, r2
 800245c:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0308 	and.w	r3, r3, #8
 8002466:	2b00      	cmp	r3, #0
 8002468:	d008      	beq.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800246a:	4b4e      	ldr	r3, [pc, #312]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800246c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800246e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	695b      	ldr	r3, [r3, #20]
 8002476:	494b      	ldr	r1, [pc, #300]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002478:	4313      	orrs	r3, r2
 800247a:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0310 	and.w	r3, r3, #16
 8002484:	2b00      	cmp	r3, #0
 8002486:	d008      	beq.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002488:	4b46      	ldr	r3, [pc, #280]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800248a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800248c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	4943      	ldr	r1, [pc, #268]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002496:	4313      	orrs	r3, r2
 8002498:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d008      	beq.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80024a6:	4b3f      	ldr	r3, [pc, #252]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024b2:	493c      	ldr	r1, [pc, #240]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d008      	beq.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80024c4:	4b37      	ldr	r3, [pc, #220]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024c8:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024d0:	4934      	ldr	r1, [pc, #208]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d008      	beq.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80024e2:	4b30      	ldr	r3, [pc, #192]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024e6:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024ee:	492d      	ldr	r1, [pc, #180]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024f0:	4313      	orrs	r3, r2
 80024f2:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d008      	beq.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002500:	4b28      	ldr	r3, [pc, #160]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002502:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002504:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800250c:	4925      	ldr	r1, [pc, #148]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800250e:	4313      	orrs	r3, r2
 8002510:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d008      	beq.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800251e:	4b21      	ldr	r3, [pc, #132]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002522:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800252a:	491e      	ldr	r1, [pc, #120]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800252c:	4313      	orrs	r3, r2
 800252e:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d008      	beq.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800253c:	4b19      	ldr	r3, [pc, #100]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800253e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002540:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002548:	4916      	ldr	r1, [pc, #88]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800254a:	4313      	orrs	r3, r2
 800254c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d008      	beq.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800255a:	4b12      	ldr	r3, [pc, #72]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800255c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800255e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002566:	490f      	ldr	r1, [pc, #60]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002568:	4313      	orrs	r3, r2
 800256a:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d008      	beq.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002578:	4b0a      	ldr	r3, [pc, #40]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800257a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800257c:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002584:	4907      	ldr	r1, [pc, #28]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002586:	4313      	orrs	r3, r2
 8002588:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d00c      	beq.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002596:	4b03      	ldr	r3, [pc, #12]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800259a:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	e002      	b.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80025a2:	bf00      	nop
 80025a4:	40021000 	.word	0x40021000
 80025a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025aa:	4913      	ldr	r1, [pc, #76]	@ (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d008      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80025bc:	4b0e      	ldr	r3, [pc, #56]	@ (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80025be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025c8:	490b      	ldr	r1, [pc, #44]	@ (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d008      	beq.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80025da:	4b07      	ldr	r3, [pc, #28]	@ (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80025dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025de:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025e6:	4904      	ldr	r1, [pc, #16]	@ (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80025e8:	4313      	orrs	r3, r2
 80025ea:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3748      	adds	r7, #72	@ 0x48
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	40021000 	.word	0x40021000

080025fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d101      	bne.n	800260e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e049      	b.n	80026a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b00      	cmp	r3, #0
 8002618:	d106      	bne.n	8002628 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f000 f841 	bl	80026aa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2202      	movs	r2, #2
 800262c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	3304      	adds	r3, #4
 8002638:	4619      	mov	r1, r3
 800263a:	4610      	mov	r0, r2
 800263c:	f000 f9da 	bl	80029f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3708      	adds	r7, #8
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}

080026aa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80026aa:	b480      	push	{r7}
 80026ac:	b083      	sub	sp, #12
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80026b2:	bf00      	nop
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
	...

080026c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b085      	sub	sp, #20
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d001      	beq.n	80026d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e04f      	b.n	8002778 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2202      	movs	r2, #2
 80026dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	68da      	ldr	r2, [r3, #12]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f042 0201 	orr.w	r2, r2, #1
 80026ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a23      	ldr	r2, [pc, #140]	@ (8002784 <HAL_TIM_Base_Start_IT+0xc4>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d01d      	beq.n	8002736 <HAL_TIM_Base_Start_IT+0x76>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002702:	d018      	beq.n	8002736 <HAL_TIM_Base_Start_IT+0x76>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a1f      	ldr	r2, [pc, #124]	@ (8002788 <HAL_TIM_Base_Start_IT+0xc8>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d013      	beq.n	8002736 <HAL_TIM_Base_Start_IT+0x76>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a1e      	ldr	r2, [pc, #120]	@ (800278c <HAL_TIM_Base_Start_IT+0xcc>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d00e      	beq.n	8002736 <HAL_TIM_Base_Start_IT+0x76>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a1c      	ldr	r2, [pc, #112]	@ (8002790 <HAL_TIM_Base_Start_IT+0xd0>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d009      	beq.n	8002736 <HAL_TIM_Base_Start_IT+0x76>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a1b      	ldr	r2, [pc, #108]	@ (8002794 <HAL_TIM_Base_Start_IT+0xd4>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d004      	beq.n	8002736 <HAL_TIM_Base_Start_IT+0x76>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a19      	ldr	r2, [pc, #100]	@ (8002798 <HAL_TIM_Base_Start_IT+0xd8>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d115      	bne.n	8002762 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	689a      	ldr	r2, [r3, #8]
 800273c:	4b17      	ldr	r3, [pc, #92]	@ (800279c <HAL_TIM_Base_Start_IT+0xdc>)
 800273e:	4013      	ands	r3, r2
 8002740:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2b06      	cmp	r3, #6
 8002746:	d015      	beq.n	8002774 <HAL_TIM_Base_Start_IT+0xb4>
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800274e:	d011      	beq.n	8002774 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f042 0201 	orr.w	r2, r2, #1
 800275e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002760:	e008      	b.n	8002774 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f042 0201 	orr.w	r2, r2, #1
 8002770:	601a      	str	r2, [r3, #0]
 8002772:	e000      	b.n	8002776 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002774:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002776:	2300      	movs	r3, #0
}
 8002778:	4618      	mov	r0, r3
 800277a:	3714      	adds	r7, #20
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr
 8002784:	40012c00 	.word	0x40012c00
 8002788:	40000400 	.word	0x40000400
 800278c:	40000800 	.word	0x40000800
 8002790:	40013400 	.word	0x40013400
 8002794:	40014000 	.word	0x40014000
 8002798:	40015000 	.word	0x40015000
 800279c:	00010007 	.word	0x00010007

080027a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	691b      	ldr	r3, [r3, #16]
 80027b6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d020      	beq.n	8002804 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f003 0302 	and.w	r3, r3, #2
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d01b      	beq.n	8002804 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f06f 0202 	mvn.w	r2, #2
 80027d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2201      	movs	r2, #1
 80027da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	699b      	ldr	r3, [r3, #24]
 80027e2:	f003 0303 	and.w	r3, r3, #3
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d003      	beq.n	80027f2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f000 f8e4 	bl	80029b8 <HAL_TIM_IC_CaptureCallback>
 80027f0:	e005      	b.n	80027fe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f000 f8d6 	bl	80029a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f000 f8e7 	bl	80029cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	f003 0304 	and.w	r3, r3, #4
 800280a:	2b00      	cmp	r3, #0
 800280c:	d020      	beq.n	8002850 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f003 0304 	and.w	r3, r3, #4
 8002814:	2b00      	cmp	r3, #0
 8002816:	d01b      	beq.n	8002850 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f06f 0204 	mvn.w	r2, #4
 8002820:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2202      	movs	r2, #2
 8002826:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	699b      	ldr	r3, [r3, #24]
 800282e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002832:	2b00      	cmp	r3, #0
 8002834:	d003      	beq.n	800283e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f000 f8be 	bl	80029b8 <HAL_TIM_IC_CaptureCallback>
 800283c:	e005      	b.n	800284a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f000 f8b0 	bl	80029a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f000 f8c1 	bl	80029cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	f003 0308 	and.w	r3, r3, #8
 8002856:	2b00      	cmp	r3, #0
 8002858:	d020      	beq.n	800289c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	f003 0308 	and.w	r3, r3, #8
 8002860:	2b00      	cmp	r3, #0
 8002862:	d01b      	beq.n	800289c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f06f 0208 	mvn.w	r2, #8
 800286c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2204      	movs	r2, #4
 8002872:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	69db      	ldr	r3, [r3, #28]
 800287a:	f003 0303 	and.w	r3, r3, #3
 800287e:	2b00      	cmp	r3, #0
 8002880:	d003      	beq.n	800288a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f000 f898 	bl	80029b8 <HAL_TIM_IC_CaptureCallback>
 8002888:	e005      	b.n	8002896 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f000 f88a 	bl	80029a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f000 f89b 	bl	80029cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	f003 0310 	and.w	r3, r3, #16
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d020      	beq.n	80028e8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f003 0310 	and.w	r3, r3, #16
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d01b      	beq.n	80028e8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f06f 0210 	mvn.w	r2, #16
 80028b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2208      	movs	r2, #8
 80028be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	69db      	ldr	r3, [r3, #28]
 80028c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d003      	beq.n	80028d6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f000 f872 	bl	80029b8 <HAL_TIM_IC_CaptureCallback>
 80028d4:	e005      	b.n	80028e2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f000 f864 	bl	80029a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f000 f875 	bl	80029cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d00c      	beq.n	800290c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	f003 0301 	and.w	r3, r3, #1
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d007      	beq.n	800290c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f06f 0201 	mvn.w	r2, #1
 8002904:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f7fd fd8c 	bl	8000424 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002912:	2b00      	cmp	r3, #0
 8002914:	d00c      	beq.n	8002930 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800291c:	2b00      	cmp	r3, #0
 800291e:	d007      	beq.n	8002930 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002928:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 f916 	bl	8002b5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002936:	2b00      	cmp	r3, #0
 8002938:	d00c      	beq.n	8002954 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002940:	2b00      	cmp	r3, #0
 8002942:	d007      	beq.n	8002954 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800294c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f000 f90e 	bl	8002b70 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00c      	beq.n	8002978 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002964:	2b00      	cmp	r3, #0
 8002966:	d007      	beq.n	8002978 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002970:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f000 f834 	bl	80029e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	f003 0320 	and.w	r3, r3, #32
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00c      	beq.n	800299c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f003 0320 	and.w	r3, r3, #32
 8002988:	2b00      	cmp	r3, #0
 800298a:	d007      	beq.n	800299c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f06f 0220 	mvn.w	r2, #32
 8002994:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f000 f8d6 	bl	8002b48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800299c:	bf00      	nop
 800299e:	3710      	adds	r7, #16
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80029ac:	bf00      	nop
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80029c0:	bf00      	nop
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029d4:	bf00      	nop
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029e8:	bf00      	nop
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr

080029f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b085      	sub	sp, #20
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4a48      	ldr	r2, [pc, #288]	@ (8002b28 <TIM_Base_SetConfig+0x134>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d013      	beq.n	8002a34 <TIM_Base_SetConfig+0x40>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a12:	d00f      	beq.n	8002a34 <TIM_Base_SetConfig+0x40>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4a45      	ldr	r2, [pc, #276]	@ (8002b2c <TIM_Base_SetConfig+0x138>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d00b      	beq.n	8002a34 <TIM_Base_SetConfig+0x40>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4a44      	ldr	r2, [pc, #272]	@ (8002b30 <TIM_Base_SetConfig+0x13c>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d007      	beq.n	8002a34 <TIM_Base_SetConfig+0x40>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	4a43      	ldr	r2, [pc, #268]	@ (8002b34 <TIM_Base_SetConfig+0x140>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d003      	beq.n	8002a34 <TIM_Base_SetConfig+0x40>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	4a42      	ldr	r2, [pc, #264]	@ (8002b38 <TIM_Base_SetConfig+0x144>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d108      	bne.n	8002a46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	68fa      	ldr	r2, [r7, #12]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a37      	ldr	r2, [pc, #220]	@ (8002b28 <TIM_Base_SetConfig+0x134>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d01f      	beq.n	8002a8e <TIM_Base_SetConfig+0x9a>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a54:	d01b      	beq.n	8002a8e <TIM_Base_SetConfig+0x9a>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a34      	ldr	r2, [pc, #208]	@ (8002b2c <TIM_Base_SetConfig+0x138>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d017      	beq.n	8002a8e <TIM_Base_SetConfig+0x9a>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a33      	ldr	r2, [pc, #204]	@ (8002b30 <TIM_Base_SetConfig+0x13c>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d013      	beq.n	8002a8e <TIM_Base_SetConfig+0x9a>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a32      	ldr	r2, [pc, #200]	@ (8002b34 <TIM_Base_SetConfig+0x140>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d00f      	beq.n	8002a8e <TIM_Base_SetConfig+0x9a>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a32      	ldr	r2, [pc, #200]	@ (8002b3c <TIM_Base_SetConfig+0x148>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d00b      	beq.n	8002a8e <TIM_Base_SetConfig+0x9a>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a31      	ldr	r2, [pc, #196]	@ (8002b40 <TIM_Base_SetConfig+0x14c>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d007      	beq.n	8002a8e <TIM_Base_SetConfig+0x9a>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a30      	ldr	r2, [pc, #192]	@ (8002b44 <TIM_Base_SetConfig+0x150>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d003      	beq.n	8002a8e <TIM_Base_SetConfig+0x9a>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a2b      	ldr	r2, [pc, #172]	@ (8002b38 <TIM_Base_SetConfig+0x144>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d108      	bne.n	8002aa0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	68fa      	ldr	r2, [r7, #12]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	695b      	ldr	r3, [r3, #20]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	68fa      	ldr	r2, [r7, #12]
 8002ab2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	689a      	ldr	r2, [r3, #8]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	4a18      	ldr	r2, [pc, #96]	@ (8002b28 <TIM_Base_SetConfig+0x134>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d013      	beq.n	8002af4 <TIM_Base_SetConfig+0x100>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	4a19      	ldr	r2, [pc, #100]	@ (8002b34 <TIM_Base_SetConfig+0x140>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d00f      	beq.n	8002af4 <TIM_Base_SetConfig+0x100>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4a19      	ldr	r2, [pc, #100]	@ (8002b3c <TIM_Base_SetConfig+0x148>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d00b      	beq.n	8002af4 <TIM_Base_SetConfig+0x100>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	4a18      	ldr	r2, [pc, #96]	@ (8002b40 <TIM_Base_SetConfig+0x14c>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d007      	beq.n	8002af4 <TIM_Base_SetConfig+0x100>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4a17      	ldr	r2, [pc, #92]	@ (8002b44 <TIM_Base_SetConfig+0x150>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d003      	beq.n	8002af4 <TIM_Base_SetConfig+0x100>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	4a12      	ldr	r2, [pc, #72]	@ (8002b38 <TIM_Base_SetConfig+0x144>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d103      	bne.n	8002afc <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	691a      	ldr	r2, [r3, #16]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d105      	bne.n	8002b1a <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	f023 0201 	bic.w	r2, r3, #1
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	611a      	str	r2, [r3, #16]
  }
}
 8002b1a:	bf00      	nop
 8002b1c:	3714      	adds	r7, #20
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	40012c00 	.word	0x40012c00
 8002b2c:	40000400 	.word	0x40000400
 8002b30:	40000800 	.word	0x40000800
 8002b34:	40013400 	.word	0x40013400
 8002b38:	40015000 	.word	0x40015000
 8002b3c:	40014000 	.word	0x40014000
 8002b40:	40014400 	.word	0x40014400
 8002b44:	40014800 	.word	0x40014800

08002b48 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b50:	bf00      	nop
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b64:	bf00      	nop
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002b78:	bf00      	nop
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d101      	bne.n	8002b96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e040      	b.n	8002c18 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d106      	bne.n	8002bac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f7fd fc7c 	bl	80004a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2224      	movs	r2, #36	@ 0x24
 8002bb0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f022 0201 	bic.w	r2, r2, #1
 8002bc0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d002      	beq.n	8002bd0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f000 f9fc 	bl	8002fc8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f000 f825 	bl	8002c20 <UART_SetConfig>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d101      	bne.n	8002be0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e01b      	b.n	8002c18 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	685a      	ldr	r2, [r3, #4]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002bee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	689a      	ldr	r2, [r3, #8]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002bfe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f042 0201 	orr.w	r2, r2, #1
 8002c0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f000 fa7b 	bl	800310c <UART_CheckIdleState>
 8002c16:	4603      	mov	r3, r0
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3708      	adds	r7, #8
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b088      	sub	sp, #32
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	689a      	ldr	r2, [r3, #8]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	691b      	ldr	r3, [r3, #16]
 8002c34:	431a      	orrs	r2, r3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	695b      	ldr	r3, [r3, #20]
 8002c3a:	431a      	orrs	r2, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	69db      	ldr	r3, [r3, #28]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	4b92      	ldr	r3, [pc, #584]	@ (8002e94 <UART_SetConfig+0x274>)
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	6812      	ldr	r2, [r2, #0]
 8002c52:	6979      	ldr	r1, [r7, #20]
 8002c54:	430b      	orrs	r3, r1
 8002c56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	68da      	ldr	r2, [r3, #12]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	430a      	orrs	r2, r1
 8002c6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	699b      	ldr	r3, [r3, #24]
 8002c72:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a1b      	ldr	r3, [r3, #32]
 8002c78:	697a      	ldr	r2, [r7, #20]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	697a      	ldr	r2, [r7, #20]
 8002c8e:	430a      	orrs	r2, r1
 8002c90:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a80      	ldr	r2, [pc, #512]	@ (8002e98 <UART_SetConfig+0x278>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d120      	bne.n	8002cde <UART_SetConfig+0xbe>
 8002c9c:	4b7f      	ldr	r3, [pc, #508]	@ (8002e9c <UART_SetConfig+0x27c>)
 8002c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ca0:	f003 0303 	and.w	r3, r3, #3
 8002ca4:	2b03      	cmp	r3, #3
 8002ca6:	d817      	bhi.n	8002cd8 <UART_SetConfig+0xb8>
 8002ca8:	a201      	add	r2, pc, #4	@ (adr r2, 8002cb0 <UART_SetConfig+0x90>)
 8002caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cae:	bf00      	nop
 8002cb0:	08002cc1 	.word	0x08002cc1
 8002cb4:	08002ccd 	.word	0x08002ccd
 8002cb8:	08002cd3 	.word	0x08002cd3
 8002cbc:	08002cc7 	.word	0x08002cc7
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	77fb      	strb	r3, [r7, #31]
 8002cc4:	e0b5      	b.n	8002e32 <UART_SetConfig+0x212>
 8002cc6:	2302      	movs	r3, #2
 8002cc8:	77fb      	strb	r3, [r7, #31]
 8002cca:	e0b2      	b.n	8002e32 <UART_SetConfig+0x212>
 8002ccc:	2304      	movs	r3, #4
 8002cce:	77fb      	strb	r3, [r7, #31]
 8002cd0:	e0af      	b.n	8002e32 <UART_SetConfig+0x212>
 8002cd2:	2308      	movs	r3, #8
 8002cd4:	77fb      	strb	r3, [r7, #31]
 8002cd6:	e0ac      	b.n	8002e32 <UART_SetConfig+0x212>
 8002cd8:	2310      	movs	r3, #16
 8002cda:	77fb      	strb	r3, [r7, #31]
 8002cdc:	e0a9      	b.n	8002e32 <UART_SetConfig+0x212>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a6f      	ldr	r2, [pc, #444]	@ (8002ea0 <UART_SetConfig+0x280>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d124      	bne.n	8002d32 <UART_SetConfig+0x112>
 8002ce8:	4b6c      	ldr	r3, [pc, #432]	@ (8002e9c <UART_SetConfig+0x27c>)
 8002cea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002cf0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002cf4:	d011      	beq.n	8002d1a <UART_SetConfig+0xfa>
 8002cf6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002cfa:	d817      	bhi.n	8002d2c <UART_SetConfig+0x10c>
 8002cfc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002d00:	d011      	beq.n	8002d26 <UART_SetConfig+0x106>
 8002d02:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002d06:	d811      	bhi.n	8002d2c <UART_SetConfig+0x10c>
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d003      	beq.n	8002d14 <UART_SetConfig+0xf4>
 8002d0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d10:	d006      	beq.n	8002d20 <UART_SetConfig+0x100>
 8002d12:	e00b      	b.n	8002d2c <UART_SetConfig+0x10c>
 8002d14:	2300      	movs	r3, #0
 8002d16:	77fb      	strb	r3, [r7, #31]
 8002d18:	e08b      	b.n	8002e32 <UART_SetConfig+0x212>
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	77fb      	strb	r3, [r7, #31]
 8002d1e:	e088      	b.n	8002e32 <UART_SetConfig+0x212>
 8002d20:	2304      	movs	r3, #4
 8002d22:	77fb      	strb	r3, [r7, #31]
 8002d24:	e085      	b.n	8002e32 <UART_SetConfig+0x212>
 8002d26:	2308      	movs	r3, #8
 8002d28:	77fb      	strb	r3, [r7, #31]
 8002d2a:	e082      	b.n	8002e32 <UART_SetConfig+0x212>
 8002d2c:	2310      	movs	r3, #16
 8002d2e:	77fb      	strb	r3, [r7, #31]
 8002d30:	e07f      	b.n	8002e32 <UART_SetConfig+0x212>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a5b      	ldr	r2, [pc, #364]	@ (8002ea4 <UART_SetConfig+0x284>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d124      	bne.n	8002d86 <UART_SetConfig+0x166>
 8002d3c:	4b57      	ldr	r3, [pc, #348]	@ (8002e9c <UART_SetConfig+0x27c>)
 8002d3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d40:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8002d44:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002d48:	d011      	beq.n	8002d6e <UART_SetConfig+0x14e>
 8002d4a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002d4e:	d817      	bhi.n	8002d80 <UART_SetConfig+0x160>
 8002d50:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002d54:	d011      	beq.n	8002d7a <UART_SetConfig+0x15a>
 8002d56:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002d5a:	d811      	bhi.n	8002d80 <UART_SetConfig+0x160>
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d003      	beq.n	8002d68 <UART_SetConfig+0x148>
 8002d60:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002d64:	d006      	beq.n	8002d74 <UART_SetConfig+0x154>
 8002d66:	e00b      	b.n	8002d80 <UART_SetConfig+0x160>
 8002d68:	2300      	movs	r3, #0
 8002d6a:	77fb      	strb	r3, [r7, #31]
 8002d6c:	e061      	b.n	8002e32 <UART_SetConfig+0x212>
 8002d6e:	2302      	movs	r3, #2
 8002d70:	77fb      	strb	r3, [r7, #31]
 8002d72:	e05e      	b.n	8002e32 <UART_SetConfig+0x212>
 8002d74:	2304      	movs	r3, #4
 8002d76:	77fb      	strb	r3, [r7, #31]
 8002d78:	e05b      	b.n	8002e32 <UART_SetConfig+0x212>
 8002d7a:	2308      	movs	r3, #8
 8002d7c:	77fb      	strb	r3, [r7, #31]
 8002d7e:	e058      	b.n	8002e32 <UART_SetConfig+0x212>
 8002d80:	2310      	movs	r3, #16
 8002d82:	77fb      	strb	r3, [r7, #31]
 8002d84:	e055      	b.n	8002e32 <UART_SetConfig+0x212>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a47      	ldr	r2, [pc, #284]	@ (8002ea8 <UART_SetConfig+0x288>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d124      	bne.n	8002dda <UART_SetConfig+0x1ba>
 8002d90:	4b42      	ldr	r3, [pc, #264]	@ (8002e9c <UART_SetConfig+0x27c>)
 8002d92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d94:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002d98:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002d9c:	d011      	beq.n	8002dc2 <UART_SetConfig+0x1a2>
 8002d9e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002da2:	d817      	bhi.n	8002dd4 <UART_SetConfig+0x1b4>
 8002da4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002da8:	d011      	beq.n	8002dce <UART_SetConfig+0x1ae>
 8002daa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002dae:	d811      	bhi.n	8002dd4 <UART_SetConfig+0x1b4>
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d003      	beq.n	8002dbc <UART_SetConfig+0x19c>
 8002db4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002db8:	d006      	beq.n	8002dc8 <UART_SetConfig+0x1a8>
 8002dba:	e00b      	b.n	8002dd4 <UART_SetConfig+0x1b4>
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	77fb      	strb	r3, [r7, #31]
 8002dc0:	e037      	b.n	8002e32 <UART_SetConfig+0x212>
 8002dc2:	2302      	movs	r3, #2
 8002dc4:	77fb      	strb	r3, [r7, #31]
 8002dc6:	e034      	b.n	8002e32 <UART_SetConfig+0x212>
 8002dc8:	2304      	movs	r3, #4
 8002dca:	77fb      	strb	r3, [r7, #31]
 8002dcc:	e031      	b.n	8002e32 <UART_SetConfig+0x212>
 8002dce:	2308      	movs	r3, #8
 8002dd0:	77fb      	strb	r3, [r7, #31]
 8002dd2:	e02e      	b.n	8002e32 <UART_SetConfig+0x212>
 8002dd4:	2310      	movs	r3, #16
 8002dd6:	77fb      	strb	r3, [r7, #31]
 8002dd8:	e02b      	b.n	8002e32 <UART_SetConfig+0x212>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a33      	ldr	r2, [pc, #204]	@ (8002eac <UART_SetConfig+0x28c>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d124      	bne.n	8002e2e <UART_SetConfig+0x20e>
 8002de4:	4b2d      	ldr	r3, [pc, #180]	@ (8002e9c <UART_SetConfig+0x27c>)
 8002de6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002de8:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8002dec:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002df0:	d011      	beq.n	8002e16 <UART_SetConfig+0x1f6>
 8002df2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002df6:	d817      	bhi.n	8002e28 <UART_SetConfig+0x208>
 8002df8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002dfc:	d011      	beq.n	8002e22 <UART_SetConfig+0x202>
 8002dfe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002e02:	d811      	bhi.n	8002e28 <UART_SetConfig+0x208>
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d003      	beq.n	8002e10 <UART_SetConfig+0x1f0>
 8002e08:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e0c:	d006      	beq.n	8002e1c <UART_SetConfig+0x1fc>
 8002e0e:	e00b      	b.n	8002e28 <UART_SetConfig+0x208>
 8002e10:	2300      	movs	r3, #0
 8002e12:	77fb      	strb	r3, [r7, #31]
 8002e14:	e00d      	b.n	8002e32 <UART_SetConfig+0x212>
 8002e16:	2302      	movs	r3, #2
 8002e18:	77fb      	strb	r3, [r7, #31]
 8002e1a:	e00a      	b.n	8002e32 <UART_SetConfig+0x212>
 8002e1c:	2304      	movs	r3, #4
 8002e1e:	77fb      	strb	r3, [r7, #31]
 8002e20:	e007      	b.n	8002e32 <UART_SetConfig+0x212>
 8002e22:	2308      	movs	r3, #8
 8002e24:	77fb      	strb	r3, [r7, #31]
 8002e26:	e004      	b.n	8002e32 <UART_SetConfig+0x212>
 8002e28:	2310      	movs	r3, #16
 8002e2a:	77fb      	strb	r3, [r7, #31]
 8002e2c:	e001      	b.n	8002e32 <UART_SetConfig+0x212>
 8002e2e:	2310      	movs	r3, #16
 8002e30:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	69db      	ldr	r3, [r3, #28]
 8002e36:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e3a:	d16b      	bne.n	8002f14 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8002e3c:	7ffb      	ldrb	r3, [r7, #31]
 8002e3e:	2b08      	cmp	r3, #8
 8002e40:	d838      	bhi.n	8002eb4 <UART_SetConfig+0x294>
 8002e42:	a201      	add	r2, pc, #4	@ (adr r2, 8002e48 <UART_SetConfig+0x228>)
 8002e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e48:	08002e6d 	.word	0x08002e6d
 8002e4c:	08002e75 	.word	0x08002e75
 8002e50:	08002e7d 	.word	0x08002e7d
 8002e54:	08002eb5 	.word	0x08002eb5
 8002e58:	08002e83 	.word	0x08002e83
 8002e5c:	08002eb5 	.word	0x08002eb5
 8002e60:	08002eb5 	.word	0x08002eb5
 8002e64:	08002eb5 	.word	0x08002eb5
 8002e68:	08002e8b 	.word	0x08002e8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e6c:	f7ff f932 	bl	80020d4 <HAL_RCC_GetPCLK1Freq>
 8002e70:	61b8      	str	r0, [r7, #24]
        break;
 8002e72:	e024      	b.n	8002ebe <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e74:	f7ff f950 	bl	8002118 <HAL_RCC_GetPCLK2Freq>
 8002e78:	61b8      	str	r0, [r7, #24]
        break;
 8002e7a:	e020      	b.n	8002ebe <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e7c:	4b0c      	ldr	r3, [pc, #48]	@ (8002eb0 <UART_SetConfig+0x290>)
 8002e7e:	61bb      	str	r3, [r7, #24]
        break;
 8002e80:	e01d      	b.n	8002ebe <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e82:	f7ff f8c7 	bl	8002014 <HAL_RCC_GetSysClockFreq>
 8002e86:	61b8      	str	r0, [r7, #24]
        break;
 8002e88:	e019      	b.n	8002ebe <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002e8e:	61bb      	str	r3, [r7, #24]
        break;
 8002e90:	e015      	b.n	8002ebe <UART_SetConfig+0x29e>
 8002e92:	bf00      	nop
 8002e94:	efff69f3 	.word	0xefff69f3
 8002e98:	40013800 	.word	0x40013800
 8002e9c:	40021000 	.word	0x40021000
 8002ea0:	40004400 	.word	0x40004400
 8002ea4:	40004800 	.word	0x40004800
 8002ea8:	40004c00 	.word	0x40004c00
 8002eac:	40005000 	.word	0x40005000
 8002eb0:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	77bb      	strb	r3, [r7, #30]
        break;
 8002ebc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d073      	beq.n	8002fac <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	005a      	lsls	r2, r3, #1
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	085b      	lsrs	r3, r3, #1
 8002ece:	441a      	add	r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ed8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	2b0f      	cmp	r3, #15
 8002ede:	d916      	bls.n	8002f0e <UART_SetConfig+0x2ee>
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ee6:	d212      	bcs.n	8002f0e <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	f023 030f 	bic.w	r3, r3, #15
 8002ef0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	085b      	lsrs	r3, r3, #1
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	f003 0307 	and.w	r3, r3, #7
 8002efc:	b29a      	uxth	r2, r3
 8002efe:	89fb      	ldrh	r3, [r7, #14]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	89fa      	ldrh	r2, [r7, #14]
 8002f0a:	60da      	str	r2, [r3, #12]
 8002f0c:	e04e      	b.n	8002fac <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	77bb      	strb	r3, [r7, #30]
 8002f12:	e04b      	b.n	8002fac <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002f14:	7ffb      	ldrb	r3, [r7, #31]
 8002f16:	2b08      	cmp	r3, #8
 8002f18:	d827      	bhi.n	8002f6a <UART_SetConfig+0x34a>
 8002f1a:	a201      	add	r2, pc, #4	@ (adr r2, 8002f20 <UART_SetConfig+0x300>)
 8002f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f20:	08002f45 	.word	0x08002f45
 8002f24:	08002f4d 	.word	0x08002f4d
 8002f28:	08002f55 	.word	0x08002f55
 8002f2c:	08002f6b 	.word	0x08002f6b
 8002f30:	08002f5b 	.word	0x08002f5b
 8002f34:	08002f6b 	.word	0x08002f6b
 8002f38:	08002f6b 	.word	0x08002f6b
 8002f3c:	08002f6b 	.word	0x08002f6b
 8002f40:	08002f63 	.word	0x08002f63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f44:	f7ff f8c6 	bl	80020d4 <HAL_RCC_GetPCLK1Freq>
 8002f48:	61b8      	str	r0, [r7, #24]
        break;
 8002f4a:	e013      	b.n	8002f74 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f4c:	f7ff f8e4 	bl	8002118 <HAL_RCC_GetPCLK2Freq>
 8002f50:	61b8      	str	r0, [r7, #24]
        break;
 8002f52:	e00f      	b.n	8002f74 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f54:	4b1b      	ldr	r3, [pc, #108]	@ (8002fc4 <UART_SetConfig+0x3a4>)
 8002f56:	61bb      	str	r3, [r7, #24]
        break;
 8002f58:	e00c      	b.n	8002f74 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f5a:	f7ff f85b 	bl	8002014 <HAL_RCC_GetSysClockFreq>
 8002f5e:	61b8      	str	r0, [r7, #24]
        break;
 8002f60:	e008      	b.n	8002f74 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002f66:	61bb      	str	r3, [r7, #24]
        break;
 8002f68:	e004      	b.n	8002f74 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	77bb      	strb	r3, [r7, #30]
        break;
 8002f72:	bf00      	nop
    }

    if (pclk != 0U)
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d018      	beq.n	8002fac <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	085a      	lsrs	r2, r3, #1
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	441a      	add	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f8c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	2b0f      	cmp	r3, #15
 8002f92:	d909      	bls.n	8002fa8 <UART_SetConfig+0x388>
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f9a:	d205      	bcs.n	8002fa8 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	b29a      	uxth	r2, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	60da      	str	r2, [r3, #12]
 8002fa6:	e001      	b.n	8002fac <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002fb8:	7fbb      	ldrb	r3, [r7, #30]
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3720      	adds	r7, #32
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	007a1200 	.word	0x007a1200

08002fc8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd4:	f003 0308 	and.w	r3, r3, #8
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d00a      	beq.n	8002ff2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00a      	beq.n	8003014 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	430a      	orrs	r2, r1
 8003012:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003018:	f003 0302 	and.w	r3, r3, #2
 800301c:	2b00      	cmp	r3, #0
 800301e:	d00a      	beq.n	8003036 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	430a      	orrs	r2, r1
 8003034:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800303a:	f003 0304 	and.w	r3, r3, #4
 800303e:	2b00      	cmp	r3, #0
 8003040:	d00a      	beq.n	8003058 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	430a      	orrs	r2, r1
 8003056:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800305c:	f003 0310 	and.w	r3, r3, #16
 8003060:	2b00      	cmp	r3, #0
 8003062:	d00a      	beq.n	800307a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	430a      	orrs	r2, r1
 8003078:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800307e:	f003 0320 	and.w	r3, r3, #32
 8003082:	2b00      	cmp	r3, #0
 8003084:	d00a      	beq.n	800309c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	430a      	orrs	r2, r1
 800309a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d01a      	beq.n	80030de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	430a      	orrs	r2, r1
 80030bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80030c6:	d10a      	bne.n	80030de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	430a      	orrs	r2, r1
 80030dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00a      	beq.n	8003100 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	430a      	orrs	r2, r1
 80030fe:	605a      	str	r2, [r3, #4]
  }
}
 8003100:	bf00      	nop
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr

0800310c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b098      	sub	sp, #96	@ 0x60
 8003110:	af02      	add	r7, sp, #8
 8003112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800311c:	f7fd fb00 	bl	8000720 <HAL_GetTick>
 8003120:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0308 	and.w	r3, r3, #8
 800312c:	2b08      	cmp	r3, #8
 800312e:	d12e      	bne.n	800318e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003130:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003134:	9300      	str	r3, [sp, #0]
 8003136:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003138:	2200      	movs	r2, #0
 800313a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f000 f88c 	bl	800325c <UART_WaitOnFlagUntilTimeout>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d021      	beq.n	800318e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003150:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003152:	e853 3f00 	ldrex	r3, [r3]
 8003156:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003158:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800315a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800315e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	461a      	mov	r2, r3
 8003166:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003168:	647b      	str	r3, [r7, #68]	@ 0x44
 800316a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800316c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800316e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003170:	e841 2300 	strex	r3, r2, [r1]
 8003174:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003176:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003178:	2b00      	cmp	r3, #0
 800317a:	d1e6      	bne.n	800314a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2220      	movs	r2, #32
 8003180:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e062      	b.n	8003254 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0304 	and.w	r3, r3, #4
 8003198:	2b04      	cmp	r3, #4
 800319a:	d149      	bne.n	8003230 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800319c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80031a0:	9300      	str	r3, [sp, #0]
 80031a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031a4:	2200      	movs	r2, #0
 80031a6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 f856 	bl	800325c <UART_WaitOnFlagUntilTimeout>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d03c      	beq.n	8003230 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031be:	e853 3f00 	ldrex	r3, [r3]
 80031c2:	623b      	str	r3, [r7, #32]
   return(result);
 80031c4:	6a3b      	ldr	r3, [r7, #32]
 80031c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80031ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	461a      	mov	r2, r3
 80031d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80031d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031d8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80031da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031dc:	e841 2300 	strex	r3, r2, [r1]
 80031e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80031e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d1e6      	bne.n	80031b6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	3308      	adds	r3, #8
 80031ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	e853 3f00 	ldrex	r3, [r3]
 80031f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f023 0301 	bic.w	r3, r3, #1
 80031fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	3308      	adds	r3, #8
 8003206:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003208:	61fa      	str	r2, [r7, #28]
 800320a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800320c:	69b9      	ldr	r1, [r7, #24]
 800320e:	69fa      	ldr	r2, [r7, #28]
 8003210:	e841 2300 	strex	r3, r2, [r1]
 8003214:	617b      	str	r3, [r7, #20]
   return(result);
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d1e5      	bne.n	80031e8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2220      	movs	r2, #32
 8003220:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e011      	b.n	8003254 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2220      	movs	r2, #32
 8003234:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2220      	movs	r2, #32
 800323a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003252:	2300      	movs	r3, #0
}
 8003254:	4618      	mov	r0, r3
 8003256:	3758      	adds	r7, #88	@ 0x58
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}

0800325c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	603b      	str	r3, [r7, #0]
 8003268:	4613      	mov	r3, r2
 800326a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800326c:	e04f      	b.n	800330e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800326e:	69bb      	ldr	r3, [r7, #24]
 8003270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003274:	d04b      	beq.n	800330e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003276:	f7fd fa53 	bl	8000720 <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	69ba      	ldr	r2, [r7, #24]
 8003282:	429a      	cmp	r2, r3
 8003284:	d302      	bcc.n	800328c <UART_WaitOnFlagUntilTimeout+0x30>
 8003286:	69bb      	ldr	r3, [r7, #24]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d101      	bne.n	8003290 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e04e      	b.n	800332e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0304 	and.w	r3, r3, #4
 800329a:	2b00      	cmp	r3, #0
 800329c:	d037      	beq.n	800330e <UART_WaitOnFlagUntilTimeout+0xb2>
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	2b80      	cmp	r3, #128	@ 0x80
 80032a2:	d034      	beq.n	800330e <UART_WaitOnFlagUntilTimeout+0xb2>
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	2b40      	cmp	r3, #64	@ 0x40
 80032a8:	d031      	beq.n	800330e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	69db      	ldr	r3, [r3, #28]
 80032b0:	f003 0308 	and.w	r3, r3, #8
 80032b4:	2b08      	cmp	r3, #8
 80032b6:	d110      	bne.n	80032da <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2208      	movs	r2, #8
 80032be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80032c0:	68f8      	ldr	r0, [r7, #12]
 80032c2:	f000 f838 	bl	8003336 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2208      	movs	r2, #8
 80032ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e029      	b.n	800332e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	69db      	ldr	r3, [r3, #28]
 80032e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80032e8:	d111      	bne.n	800330e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80032f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80032f4:	68f8      	ldr	r0, [r7, #12]
 80032f6:	f000 f81e 	bl	8003336 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2220      	movs	r2, #32
 80032fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e00f      	b.n	800332e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	69da      	ldr	r2, [r3, #28]
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	4013      	ands	r3, r2
 8003318:	68ba      	ldr	r2, [r7, #8]
 800331a:	429a      	cmp	r2, r3
 800331c:	bf0c      	ite	eq
 800331e:	2301      	moveq	r3, #1
 8003320:	2300      	movne	r3, #0
 8003322:	b2db      	uxtb	r3, r3
 8003324:	461a      	mov	r2, r3
 8003326:	79fb      	ldrb	r3, [r7, #7]
 8003328:	429a      	cmp	r2, r3
 800332a:	d0a0      	beq.n	800326e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3710      	adds	r7, #16
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}

08003336 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003336:	b480      	push	{r7}
 8003338:	b095      	sub	sp, #84	@ 0x54
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003344:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003346:	e853 3f00 	ldrex	r3, [r3]
 800334a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800334c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800334e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003352:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	461a      	mov	r2, r3
 800335a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800335c:	643b      	str	r3, [r7, #64]	@ 0x40
 800335e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003360:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003362:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003364:	e841 2300 	strex	r3, r2, [r1]
 8003368:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800336a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800336c:	2b00      	cmp	r3, #0
 800336e:	d1e6      	bne.n	800333e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	3308      	adds	r3, #8
 8003376:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003378:	6a3b      	ldr	r3, [r7, #32]
 800337a:	e853 3f00 	ldrex	r3, [r3]
 800337e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	f023 0301 	bic.w	r3, r3, #1
 8003386:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	3308      	adds	r3, #8
 800338e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003390:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003392:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003394:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003396:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003398:	e841 2300 	strex	r3, r2, [r1]
 800339c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800339e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d1e5      	bne.n	8003370 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d118      	bne.n	80033de <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	e853 3f00 	ldrex	r3, [r3]
 80033b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	f023 0310 	bic.w	r3, r3, #16
 80033c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	461a      	mov	r2, r3
 80033c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033ca:	61bb      	str	r3, [r7, #24]
 80033cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ce:	6979      	ldr	r1, [r7, #20]
 80033d0:	69ba      	ldr	r2, [r7, #24]
 80033d2:	e841 2300 	strex	r3, r2, [r1]
 80033d6:	613b      	str	r3, [r7, #16]
   return(result);
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d1e6      	bne.n	80033ac <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2220      	movs	r2, #32
 80033e2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80033f2:	bf00      	nop
 80033f4:	3754      	adds	r7, #84	@ 0x54
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
	...

08003400 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003400:	b480      	push	{r7}
 8003402:	b085      	sub	sp, #20
 8003404:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003406:	f3ef 8305 	mrs	r3, IPSR
 800340a:	60bb      	str	r3, [r7, #8]
  return(result);
 800340c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800340e:	2b00      	cmp	r3, #0
 8003410:	d10f      	bne.n	8003432 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003412:	f3ef 8310 	mrs	r3, PRIMASK
 8003416:	607b      	str	r3, [r7, #4]
  return(result);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d109      	bne.n	8003432 <osKernelInitialize+0x32>
 800341e:	4b11      	ldr	r3, [pc, #68]	@ (8003464 <osKernelInitialize+0x64>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2b02      	cmp	r3, #2
 8003424:	d109      	bne.n	800343a <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003426:	f3ef 8311 	mrs	r3, BASEPRI
 800342a:	603b      	str	r3, [r7, #0]
  return(result);
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d003      	beq.n	800343a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003432:	f06f 0305 	mvn.w	r3, #5
 8003436:	60fb      	str	r3, [r7, #12]
 8003438:	e00c      	b.n	8003454 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800343a:	4b0a      	ldr	r3, [pc, #40]	@ (8003464 <osKernelInitialize+0x64>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d105      	bne.n	800344e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8003442:	4b08      	ldr	r3, [pc, #32]	@ (8003464 <osKernelInitialize+0x64>)
 8003444:	2201      	movs	r2, #1
 8003446:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003448:	2300      	movs	r3, #0
 800344a:	60fb      	str	r3, [r7, #12]
 800344c:	e002      	b.n	8003454 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800344e:	f04f 33ff 	mov.w	r3, #4294967295
 8003452:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003454:	68fb      	ldr	r3, [r7, #12]
}
 8003456:	4618      	mov	r0, r3
 8003458:	3714      	adds	r7, #20
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	20000158 	.word	0x20000158

08003468 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800346e:	f3ef 8305 	mrs	r3, IPSR
 8003472:	60bb      	str	r3, [r7, #8]
  return(result);
 8003474:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003476:	2b00      	cmp	r3, #0
 8003478:	d10f      	bne.n	800349a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800347a:	f3ef 8310 	mrs	r3, PRIMASK
 800347e:	607b      	str	r3, [r7, #4]
  return(result);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d109      	bne.n	800349a <osKernelStart+0x32>
 8003486:	4b11      	ldr	r3, [pc, #68]	@ (80034cc <osKernelStart+0x64>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	2b02      	cmp	r3, #2
 800348c:	d109      	bne.n	80034a2 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800348e:	f3ef 8311 	mrs	r3, BASEPRI
 8003492:	603b      	str	r3, [r7, #0]
  return(result);
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d003      	beq.n	80034a2 <osKernelStart+0x3a>
    stat = osErrorISR;
 800349a:	f06f 0305 	mvn.w	r3, #5
 800349e:	60fb      	str	r3, [r7, #12]
 80034a0:	e00e      	b.n	80034c0 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80034a2:	4b0a      	ldr	r3, [pc, #40]	@ (80034cc <osKernelStart+0x64>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d107      	bne.n	80034ba <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80034aa:	4b08      	ldr	r3, [pc, #32]	@ (80034cc <osKernelStart+0x64>)
 80034ac:	2202      	movs	r2, #2
 80034ae:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80034b0:	f001 f8b0 	bl	8004614 <vTaskStartScheduler>
      stat = osOK;
 80034b4:	2300      	movs	r3, #0
 80034b6:	60fb      	str	r3, [r7, #12]
 80034b8:	e002      	b.n	80034c0 <osKernelStart+0x58>
    } else {
      stat = osError;
 80034ba:	f04f 33ff 	mov.w	r3, #4294967295
 80034be:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80034c0:	68fb      	ldr	r3, [r7, #12]
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3710      	adds	r7, #16
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	20000158 	.word	0x20000158

080034d0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b092      	sub	sp, #72	@ 0x48
 80034d4:	af04      	add	r7, sp, #16
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	60b9      	str	r1, [r7, #8]
 80034da:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80034dc:	2300      	movs	r3, #0
 80034de:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80034e0:	f3ef 8305 	mrs	r3, IPSR
 80034e4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80034e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	f040 8094 	bne.w	8003616 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034ee:	f3ef 8310 	mrs	r3, PRIMASK
 80034f2:	623b      	str	r3, [r7, #32]
  return(result);
 80034f4:	6a3b      	ldr	r3, [r7, #32]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	f040 808d 	bne.w	8003616 <osThreadNew+0x146>
 80034fc:	4b48      	ldr	r3, [pc, #288]	@ (8003620 <osThreadNew+0x150>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2b02      	cmp	r3, #2
 8003502:	d106      	bne.n	8003512 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003504:	f3ef 8311 	mrs	r3, BASEPRI
 8003508:	61fb      	str	r3, [r7, #28]
  return(result);
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	2b00      	cmp	r3, #0
 800350e:	f040 8082 	bne.w	8003616 <osThreadNew+0x146>
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d07e      	beq.n	8003616 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8003518:	2380      	movs	r3, #128	@ 0x80
 800351a:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800351c:	2318      	movs	r3, #24
 800351e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 8003520:	2300      	movs	r3, #0
 8003522:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8003524:	f107 031b 	add.w	r3, r7, #27
 8003528:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 800352a:	f04f 33ff 	mov.w	r3, #4294967295
 800352e:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d045      	beq.n	80035c2 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d002      	beq.n	8003544 <osThreadNew+0x74>
        name = attr->name;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	699b      	ldr	r3, [r3, #24]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d002      	beq.n	8003552 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	699b      	ldr	r3, [r3, #24]
 8003550:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003552:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003554:	2b00      	cmp	r3, #0
 8003556:	d008      	beq.n	800356a <osThreadNew+0x9a>
 8003558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800355a:	2b38      	cmp	r3, #56	@ 0x38
 800355c:	d805      	bhi.n	800356a <osThreadNew+0x9a>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f003 0301 	and.w	r3, r3, #1
 8003566:	2b00      	cmp	r3, #0
 8003568:	d001      	beq.n	800356e <osThreadNew+0x9e>
        return (NULL);
 800356a:	2300      	movs	r3, #0
 800356c:	e054      	b.n	8003618 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	695b      	ldr	r3, [r3, #20]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d003      	beq.n	800357e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	695b      	ldr	r3, [r3, #20]
 800357a:	089b      	lsrs	r3, r3, #2
 800357c:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d00e      	beq.n	80035a4 <osThreadNew+0xd4>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	2ba7      	cmp	r3, #167	@ 0xa7
 800358c:	d90a      	bls.n	80035a4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003592:	2b00      	cmp	r3, #0
 8003594:	d006      	beq.n	80035a4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	695b      	ldr	r3, [r3, #20]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d002      	beq.n	80035a4 <osThreadNew+0xd4>
        mem = 1;
 800359e:	2301      	movs	r3, #1
 80035a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80035a2:	e010      	b.n	80035c6 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d10c      	bne.n	80035c6 <osThreadNew+0xf6>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d108      	bne.n	80035c6 <osThreadNew+0xf6>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	691b      	ldr	r3, [r3, #16]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d104      	bne.n	80035c6 <osThreadNew+0xf6>
          mem = 0;
 80035bc:	2300      	movs	r3, #0
 80035be:	62bb      	str	r3, [r7, #40]	@ 0x28
 80035c0:	e001      	b.n	80035c6 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80035c2:	2300      	movs	r3, #0
 80035c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 80035c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d110      	bne.n	80035ee <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80035d4:	9202      	str	r2, [sp, #8]
 80035d6:	9301      	str	r3, [sp, #4]
 80035d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035da:	9300      	str	r3, [sp, #0]
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035e0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80035e2:	68f8      	ldr	r0, [r7, #12]
 80035e4:	f000 fe2c 	bl	8004240 <xTaskCreateStatic>
 80035e8:	4603      	mov	r3, r0
 80035ea:	617b      	str	r3, [r7, #20]
 80035ec:	e013      	b.n	8003616 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80035ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d110      	bne.n	8003616 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80035f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035f6:	b29a      	uxth	r2, r3
 80035f8:	f107 0314 	add.w	r3, r7, #20
 80035fc:	9301      	str	r3, [sp, #4]
 80035fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003600:	9300      	str	r3, [sp, #0]
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003606:	68f8      	ldr	r0, [r7, #12]
 8003608:	f000 fe79 	bl	80042fe <xTaskCreate>
 800360c:	4603      	mov	r3, r0
 800360e:	2b01      	cmp	r3, #1
 8003610:	d001      	beq.n	8003616 <osThreadNew+0x146>
          hTask = NULL;
 8003612:	2300      	movs	r3, #0
 8003614:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003616:	697b      	ldr	r3, [r7, #20]
}
 8003618:	4618      	mov	r0, r3
 800361a:	3738      	adds	r7, #56	@ 0x38
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}
 8003620:	20000158 	.word	0x20000158

08003624 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003624:	b580      	push	{r7, lr}
 8003626:	b086      	sub	sp, #24
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800362c:	f3ef 8305 	mrs	r3, IPSR
 8003630:	613b      	str	r3, [r7, #16]
  return(result);
 8003632:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003634:	2b00      	cmp	r3, #0
 8003636:	d10f      	bne.n	8003658 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003638:	f3ef 8310 	mrs	r3, PRIMASK
 800363c:	60fb      	str	r3, [r7, #12]
  return(result);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d109      	bne.n	8003658 <osDelay+0x34>
 8003644:	4b0d      	ldr	r3, [pc, #52]	@ (800367c <osDelay+0x58>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2b02      	cmp	r3, #2
 800364a:	d109      	bne.n	8003660 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800364c:	f3ef 8311 	mrs	r3, BASEPRI
 8003650:	60bb      	str	r3, [r7, #8]
  return(result);
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d003      	beq.n	8003660 <osDelay+0x3c>
    stat = osErrorISR;
 8003658:	f06f 0305 	mvn.w	r3, #5
 800365c:	617b      	str	r3, [r7, #20]
 800365e:	e007      	b.n	8003670 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003660:	2300      	movs	r3, #0
 8003662:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d002      	beq.n	8003670 <osDelay+0x4c>
      vTaskDelay(ticks);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 ff9c 	bl	80045a8 <vTaskDelay>
    }
  }

  return (stat);
 8003670:	697b      	ldr	r3, [r7, #20]
}
 8003672:	4618      	mov	r0, r3
 8003674:	3718      	adds	r7, #24
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	20000158 	.word	0x20000158

08003680 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003680:	b480      	push	{r7}
 8003682:	b085      	sub	sp, #20
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	4a07      	ldr	r2, [pc, #28]	@ (80036ac <vApplicationGetIdleTaskMemory+0x2c>)
 8003690:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	4a06      	ldr	r2, [pc, #24]	@ (80036b0 <vApplicationGetIdleTaskMemory+0x30>)
 8003696:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2280      	movs	r2, #128	@ 0x80
 800369c:	601a      	str	r2, [r3, #0]
}
 800369e:	bf00      	nop
 80036a0:	3714      	adds	r7, #20
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr
 80036aa:	bf00      	nop
 80036ac:	2000015c 	.word	0x2000015c
 80036b0:	20000204 	.word	0x20000204

080036b4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80036b4:	b480      	push	{r7}
 80036b6:	b085      	sub	sp, #20
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	60b9      	str	r1, [r7, #8]
 80036be:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	4a07      	ldr	r2, [pc, #28]	@ (80036e0 <vApplicationGetTimerTaskMemory+0x2c>)
 80036c4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	4a06      	ldr	r2, [pc, #24]	@ (80036e4 <vApplicationGetTimerTaskMemory+0x30>)
 80036ca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80036d2:	601a      	str	r2, [r3, #0]
}
 80036d4:	bf00      	nop
 80036d6:	3714      	adds	r7, #20
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr
 80036e0:	20000404 	.word	0x20000404
 80036e4:	200004ac 	.word	0x200004ac

080036e8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f103 0208 	add.w	r2, r3, #8
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003700:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f103 0208 	add.w	r2, r3, #8
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f103 0208 	add.w	r2, r3, #8
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800371c:	bf00      	nop
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003736:	bf00      	nop
 8003738:	370c      	adds	r7, #12
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr

08003742 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003742:	b480      	push	{r7}
 8003744:	b085      	sub	sp, #20
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
 800374a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	68fa      	ldr	r2, [r7, #12]
 8003756:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	689a      	ldr	r2, [r3, #8]
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	683a      	ldr	r2, [r7, #0]
 8003766:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	683a      	ldr	r2, [r7, #0]
 800376c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	1c5a      	adds	r2, r3, #1
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	601a      	str	r2, [r3, #0]
}
 800377e:	bf00      	nop
 8003780:	3714      	adds	r7, #20
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr

0800378a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800378a:	b480      	push	{r7}
 800378c:	b085      	sub	sp, #20
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
 8003792:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037a0:	d103      	bne.n	80037aa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	60fb      	str	r3, [r7, #12]
 80037a8:	e00c      	b.n	80037c4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	3308      	adds	r3, #8
 80037ae:	60fb      	str	r3, [r7, #12]
 80037b0:	e002      	b.n	80037b8 <vListInsert+0x2e>
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	60fb      	str	r3, [r7, #12]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	68ba      	ldr	r2, [r7, #8]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d2f6      	bcs.n	80037b2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	685a      	ldr	r2, [r3, #4]
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	683a      	ldr	r2, [r7, #0]
 80037d2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	68fa      	ldr	r2, [r7, #12]
 80037d8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	683a      	ldr	r2, [r7, #0]
 80037de:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	1c5a      	adds	r2, r3, #1
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	601a      	str	r2, [r3, #0]
}
 80037f0:	bf00      	nop
 80037f2:	3714      	adds	r7, #20
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80037fc:	b480      	push	{r7}
 80037fe:	b085      	sub	sp, #20
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	691b      	ldr	r3, [r3, #16]
 8003808:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	6892      	ldr	r2, [r2, #8]
 8003812:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	6852      	ldr	r2, [r2, #4]
 800381c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	429a      	cmp	r2, r3
 8003826:	d103      	bne.n	8003830 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	689a      	ldr	r2, [r3, #8]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	1e5a      	subs	r2, r3, #1
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
}
 8003844:	4618      	mov	r0, r3
 8003846:	3714      	adds	r7, #20
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr

08003850 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d10b      	bne.n	800387c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003868:	f383 8811 	msr	BASEPRI, r3
 800386c:	f3bf 8f6f 	isb	sy
 8003870:	f3bf 8f4f 	dsb	sy
 8003874:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003876:	bf00      	nop
 8003878:	bf00      	nop
 800387a:	e7fd      	b.n	8003878 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800387c:	f002 f86c 	bl	8005958 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003888:	68f9      	ldr	r1, [r7, #12]
 800388a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800388c:	fb01 f303 	mul.w	r3, r1, r3
 8003890:	441a      	add	r2, r3
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2200      	movs	r2, #0
 800389a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038ac:	3b01      	subs	r3, #1
 80038ae:	68f9      	ldr	r1, [r7, #12]
 80038b0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80038b2:	fb01 f303 	mul.w	r3, r1, r3
 80038b6:	441a      	add	r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	22ff      	movs	r2, #255	@ 0xff
 80038c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	22ff      	movs	r2, #255	@ 0xff
 80038c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d114      	bne.n	80038fc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d01a      	beq.n	8003910 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	3310      	adds	r3, #16
 80038de:	4618      	mov	r0, r3
 80038e0:	f001 f93c 	bl	8004b5c <xTaskRemoveFromEventList>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d012      	beq.n	8003910 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80038ea:	4b0d      	ldr	r3, [pc, #52]	@ (8003920 <xQueueGenericReset+0xd0>)
 80038ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038f0:	601a      	str	r2, [r3, #0]
 80038f2:	f3bf 8f4f 	dsb	sy
 80038f6:	f3bf 8f6f 	isb	sy
 80038fa:	e009      	b.n	8003910 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	3310      	adds	r3, #16
 8003900:	4618      	mov	r0, r3
 8003902:	f7ff fef1 	bl	80036e8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	3324      	adds	r3, #36	@ 0x24
 800390a:	4618      	mov	r0, r3
 800390c:	f7ff feec 	bl	80036e8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003910:	f002 f854 	bl	80059bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003914:	2301      	movs	r3, #1
}
 8003916:	4618      	mov	r0, r3
 8003918:	3710      	adds	r7, #16
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	e000ed04 	.word	0xe000ed04

08003924 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003924:	b580      	push	{r7, lr}
 8003926:	b08e      	sub	sp, #56	@ 0x38
 8003928:	af02      	add	r7, sp, #8
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	607a      	str	r2, [r7, #4]
 8003930:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d10b      	bne.n	8003950 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003938:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800393c:	f383 8811 	msr	BASEPRI, r3
 8003940:	f3bf 8f6f 	isb	sy
 8003944:	f3bf 8f4f 	dsb	sy
 8003948:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800394a:	bf00      	nop
 800394c:	bf00      	nop
 800394e:	e7fd      	b.n	800394c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d10b      	bne.n	800396e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800395a:	f383 8811 	msr	BASEPRI, r3
 800395e:	f3bf 8f6f 	isb	sy
 8003962:	f3bf 8f4f 	dsb	sy
 8003966:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003968:	bf00      	nop
 800396a:	bf00      	nop
 800396c:	e7fd      	b.n	800396a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d002      	beq.n	800397a <xQueueGenericCreateStatic+0x56>
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d001      	beq.n	800397e <xQueueGenericCreateStatic+0x5a>
 800397a:	2301      	movs	r3, #1
 800397c:	e000      	b.n	8003980 <xQueueGenericCreateStatic+0x5c>
 800397e:	2300      	movs	r3, #0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d10b      	bne.n	800399c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003984:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003988:	f383 8811 	msr	BASEPRI, r3
 800398c:	f3bf 8f6f 	isb	sy
 8003990:	f3bf 8f4f 	dsb	sy
 8003994:	623b      	str	r3, [r7, #32]
}
 8003996:	bf00      	nop
 8003998:	bf00      	nop
 800399a:	e7fd      	b.n	8003998 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d102      	bne.n	80039a8 <xQueueGenericCreateStatic+0x84>
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d101      	bne.n	80039ac <xQueueGenericCreateStatic+0x88>
 80039a8:	2301      	movs	r3, #1
 80039aa:	e000      	b.n	80039ae <xQueueGenericCreateStatic+0x8a>
 80039ac:	2300      	movs	r3, #0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d10b      	bne.n	80039ca <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80039b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039b6:	f383 8811 	msr	BASEPRI, r3
 80039ba:	f3bf 8f6f 	isb	sy
 80039be:	f3bf 8f4f 	dsb	sy
 80039c2:	61fb      	str	r3, [r7, #28]
}
 80039c4:	bf00      	nop
 80039c6:	bf00      	nop
 80039c8:	e7fd      	b.n	80039c6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80039ca:	2350      	movs	r3, #80	@ 0x50
 80039cc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	2b50      	cmp	r3, #80	@ 0x50
 80039d2:	d00b      	beq.n	80039ec <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80039d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039d8:	f383 8811 	msr	BASEPRI, r3
 80039dc:	f3bf 8f6f 	isb	sy
 80039e0:	f3bf 8f4f 	dsb	sy
 80039e4:	61bb      	str	r3, [r7, #24]
}
 80039e6:	bf00      	nop
 80039e8:	bf00      	nop
 80039ea:	e7fd      	b.n	80039e8 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80039f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d00d      	beq.n	8003a12 <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80039f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039f8:	2201      	movs	r2, #1
 80039fa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80039fe:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003a02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a04:	9300      	str	r3, [sp, #0]
 8003a06:	4613      	mov	r3, r2
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	68b9      	ldr	r1, [r7, #8]
 8003a0c:	68f8      	ldr	r0, [r7, #12]
 8003a0e:	f000 f805 	bl	8003a1c <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003a12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3730      	adds	r7, #48	@ 0x30
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	60b9      	str	r1, [r7, #8]
 8003a26:	607a      	str	r2, [r7, #4]
 8003a28:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d103      	bne.n	8003a38 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	69ba      	ldr	r2, [r7, #24]
 8003a34:	601a      	str	r2, [r3, #0]
 8003a36:	e002      	b.n	8003a3e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	68fa      	ldr	r2, [r7, #12]
 8003a42:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003a44:	69bb      	ldr	r3, [r7, #24]
 8003a46:	68ba      	ldr	r2, [r7, #8]
 8003a48:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003a4a:	2101      	movs	r1, #1
 8003a4c:	69b8      	ldr	r0, [r7, #24]
 8003a4e:	f7ff feff 	bl	8003850 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003a52:	69bb      	ldr	r3, [r7, #24]
 8003a54:	78fa      	ldrb	r2, [r7, #3]
 8003a56:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003a5a:	bf00      	nop
 8003a5c:	3710      	adds	r7, #16
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
	...

08003a64 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b08e      	sub	sp, #56	@ 0x38
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	607a      	str	r2, [r7, #4]
 8003a70:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003a72:	2300      	movs	r3, #0
 8003a74:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d10b      	bne.n	8003a98 <xQueueGenericSend+0x34>
	__asm volatile
 8003a80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a84:	f383 8811 	msr	BASEPRI, r3
 8003a88:	f3bf 8f6f 	isb	sy
 8003a8c:	f3bf 8f4f 	dsb	sy
 8003a90:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003a92:	bf00      	nop
 8003a94:	bf00      	nop
 8003a96:	e7fd      	b.n	8003a94 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d103      	bne.n	8003aa6 <xQueueGenericSend+0x42>
 8003a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d101      	bne.n	8003aaa <xQueueGenericSend+0x46>
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e000      	b.n	8003aac <xQueueGenericSend+0x48>
 8003aaa:	2300      	movs	r3, #0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d10b      	bne.n	8003ac8 <xQueueGenericSend+0x64>
	__asm volatile
 8003ab0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ab4:	f383 8811 	msr	BASEPRI, r3
 8003ab8:	f3bf 8f6f 	isb	sy
 8003abc:	f3bf 8f4f 	dsb	sy
 8003ac0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003ac2:	bf00      	nop
 8003ac4:	bf00      	nop
 8003ac6:	e7fd      	b.n	8003ac4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d103      	bne.n	8003ad6 <xQueueGenericSend+0x72>
 8003ace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ad0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d101      	bne.n	8003ada <xQueueGenericSend+0x76>
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e000      	b.n	8003adc <xQueueGenericSend+0x78>
 8003ada:	2300      	movs	r3, #0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d10b      	bne.n	8003af8 <xQueueGenericSend+0x94>
	__asm volatile
 8003ae0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ae4:	f383 8811 	msr	BASEPRI, r3
 8003ae8:	f3bf 8f6f 	isb	sy
 8003aec:	f3bf 8f4f 	dsb	sy
 8003af0:	623b      	str	r3, [r7, #32]
}
 8003af2:	bf00      	nop
 8003af4:	bf00      	nop
 8003af6:	e7fd      	b.n	8003af4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003af8:	f001 f9fc 	bl	8004ef4 <xTaskGetSchedulerState>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d102      	bne.n	8003b08 <xQueueGenericSend+0xa4>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d101      	bne.n	8003b0c <xQueueGenericSend+0xa8>
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e000      	b.n	8003b0e <xQueueGenericSend+0xaa>
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d10b      	bne.n	8003b2a <xQueueGenericSend+0xc6>
	__asm volatile
 8003b12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b16:	f383 8811 	msr	BASEPRI, r3
 8003b1a:	f3bf 8f6f 	isb	sy
 8003b1e:	f3bf 8f4f 	dsb	sy
 8003b22:	61fb      	str	r3, [r7, #28]
}
 8003b24:	bf00      	nop
 8003b26:	bf00      	nop
 8003b28:	e7fd      	b.n	8003b26 <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003b2a:	f001 ff15 	bl	8005958 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d302      	bcc.n	8003b40 <xQueueGenericSend+0xdc>
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d129      	bne.n	8003b94 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003b40:	683a      	ldr	r2, [r7, #0]
 8003b42:	68b9      	ldr	r1, [r7, #8]
 8003b44:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003b46:	f000 fa0d 	bl	8003f64 <prvCopyDataToQueue>
 8003b4a:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d010      	beq.n	8003b76 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b56:	3324      	adds	r3, #36	@ 0x24
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f000 ffff 	bl	8004b5c <xTaskRemoveFromEventList>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d013      	beq.n	8003b8c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003b64:	4b3f      	ldr	r3, [pc, #252]	@ (8003c64 <xQueueGenericSend+0x200>)
 8003b66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b6a:	601a      	str	r2, [r3, #0]
 8003b6c:	f3bf 8f4f 	dsb	sy
 8003b70:	f3bf 8f6f 	isb	sy
 8003b74:	e00a      	b.n	8003b8c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003b76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d007      	beq.n	8003b8c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003b7c:	4b39      	ldr	r3, [pc, #228]	@ (8003c64 <xQueueGenericSend+0x200>)
 8003b7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b82:	601a      	str	r2, [r3, #0]
 8003b84:	f3bf 8f4f 	dsb	sy
 8003b88:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003b8c:	f001 ff16 	bl	80059bc <vPortExitCritical>
				return pdPASS;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e063      	b.n	8003c5c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d103      	bne.n	8003ba2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003b9a:	f001 ff0f 	bl	80059bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	e05c      	b.n	8003c5c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003ba2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d106      	bne.n	8003bb6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003ba8:	f107 0314 	add.w	r3, r7, #20
 8003bac:	4618      	mov	r0, r3
 8003bae:	f001 f839 	bl	8004c24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003bb6:	f001 ff01 	bl	80059bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003bba:	f000 fd9b 	bl	80046f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003bbe:	f001 fecb 	bl	8005958 <vPortEnterCritical>
 8003bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bc4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003bc8:	b25b      	sxtb	r3, r3
 8003bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bce:	d103      	bne.n	8003bd8 <xQueueGenericSend+0x174>
 8003bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bda:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003bde:	b25b      	sxtb	r3, r3
 8003be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003be4:	d103      	bne.n	8003bee <xQueueGenericSend+0x18a>
 8003be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003be8:	2200      	movs	r2, #0
 8003bea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003bee:	f001 fee5 	bl	80059bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003bf2:	1d3a      	adds	r2, r7, #4
 8003bf4:	f107 0314 	add.w	r3, r7, #20
 8003bf8:	4611      	mov	r1, r2
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f001 f828 	bl	8004c50 <xTaskCheckForTimeOut>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d124      	bne.n	8003c50 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003c06:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003c08:	f000 faa4 	bl	8004154 <prvIsQueueFull>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d018      	beq.n	8003c44 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c14:	3310      	adds	r3, #16
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	4611      	mov	r1, r2
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f000 ff4c 	bl	8004ab8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003c20:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003c22:	f000 fa2f 	bl	8004084 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003c26:	f000 fd73 	bl	8004710 <xTaskResumeAll>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	f47f af7c 	bne.w	8003b2a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003c32:	4b0c      	ldr	r3, [pc, #48]	@ (8003c64 <xQueueGenericSend+0x200>)
 8003c34:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c38:	601a      	str	r2, [r3, #0]
 8003c3a:	f3bf 8f4f 	dsb	sy
 8003c3e:	f3bf 8f6f 	isb	sy
 8003c42:	e772      	b.n	8003b2a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003c44:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003c46:	f000 fa1d 	bl	8004084 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003c4a:	f000 fd61 	bl	8004710 <xTaskResumeAll>
 8003c4e:	e76c      	b.n	8003b2a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003c50:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003c52:	f000 fa17 	bl	8004084 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003c56:	f000 fd5b 	bl	8004710 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003c5a:	2300      	movs	r3, #0
		}
	}
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3738      	adds	r7, #56	@ 0x38
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	e000ed04 	.word	0xe000ed04

08003c68 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b08e      	sub	sp, #56	@ 0x38
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	607a      	str	r2, [r7, #4]
 8003c74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d10b      	bne.n	8003c98 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003c80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c84:	f383 8811 	msr	BASEPRI, r3
 8003c88:	f3bf 8f6f 	isb	sy
 8003c8c:	f3bf 8f4f 	dsb	sy
 8003c90:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003c92:	bf00      	nop
 8003c94:	bf00      	nop
 8003c96:	e7fd      	b.n	8003c94 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d103      	bne.n	8003ca6 <xQueueGenericSendFromISR+0x3e>
 8003c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d101      	bne.n	8003caa <xQueueGenericSendFromISR+0x42>
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e000      	b.n	8003cac <xQueueGenericSendFromISR+0x44>
 8003caa:	2300      	movs	r3, #0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d10b      	bne.n	8003cc8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003cb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cb4:	f383 8811 	msr	BASEPRI, r3
 8003cb8:	f3bf 8f6f 	isb	sy
 8003cbc:	f3bf 8f4f 	dsb	sy
 8003cc0:	623b      	str	r3, [r7, #32]
}
 8003cc2:	bf00      	nop
 8003cc4:	bf00      	nop
 8003cc6:	e7fd      	b.n	8003cc4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d103      	bne.n	8003cd6 <xQueueGenericSendFromISR+0x6e>
 8003cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d101      	bne.n	8003cda <xQueueGenericSendFromISR+0x72>
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e000      	b.n	8003cdc <xQueueGenericSendFromISR+0x74>
 8003cda:	2300      	movs	r3, #0
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d10b      	bne.n	8003cf8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003ce0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ce4:	f383 8811 	msr	BASEPRI, r3
 8003ce8:	f3bf 8f6f 	isb	sy
 8003cec:	f3bf 8f4f 	dsb	sy
 8003cf0:	61fb      	str	r3, [r7, #28]
}
 8003cf2:	bf00      	nop
 8003cf4:	bf00      	nop
 8003cf6:	e7fd      	b.n	8003cf4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003cf8:	f001 ff0e 	bl	8005b18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003cfc:	f3ef 8211 	mrs	r2, BASEPRI
 8003d00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d04:	f383 8811 	msr	BASEPRI, r3
 8003d08:	f3bf 8f6f 	isb	sy
 8003d0c:	f3bf 8f4f 	dsb	sy
 8003d10:	61ba      	str	r2, [r7, #24]
 8003d12:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003d14:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003d16:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003d18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d1a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d302      	bcc.n	8003d2a <xQueueGenericSendFromISR+0xc2>
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d12c      	bne.n	8003d84 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d2c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003d30:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003d34:	683a      	ldr	r2, [r7, #0]
 8003d36:	68b9      	ldr	r1, [r7, #8]
 8003d38:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003d3a:	f000 f913 	bl	8003f64 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003d3e:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8003d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d46:	d112      	bne.n	8003d6e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d016      	beq.n	8003d7e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d52:	3324      	adds	r3, #36	@ 0x24
 8003d54:	4618      	mov	r0, r3
 8003d56:	f000 ff01 	bl	8004b5c <xTaskRemoveFromEventList>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d00e      	beq.n	8003d7e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d00b      	beq.n	8003d7e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	601a      	str	r2, [r3, #0]
 8003d6c:	e007      	b.n	8003d7e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003d6e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003d72:	3301      	adds	r3, #1
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	b25a      	sxtb	r2, r3
 8003d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d7a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8003d82:	e001      	b.n	8003d88 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003d84:	2300      	movs	r3, #0
 8003d86:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d8a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003d92:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003d94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3738      	adds	r7, #56	@ 0x38
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
	...

08003da0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b08c      	sub	sp, #48	@ 0x30
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	60f8      	str	r0, [r7, #12]
 8003da8:	60b9      	str	r1, [r7, #8]
 8003daa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003dac:	2300      	movs	r3, #0
 8003dae:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003db4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d10b      	bne.n	8003dd2 <xQueueReceive+0x32>
	__asm volatile
 8003dba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dbe:	f383 8811 	msr	BASEPRI, r3
 8003dc2:	f3bf 8f6f 	isb	sy
 8003dc6:	f3bf 8f4f 	dsb	sy
 8003dca:	623b      	str	r3, [r7, #32]
}
 8003dcc:	bf00      	nop
 8003dce:	bf00      	nop
 8003dd0:	e7fd      	b.n	8003dce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d103      	bne.n	8003de0 <xQueueReceive+0x40>
 8003dd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d101      	bne.n	8003de4 <xQueueReceive+0x44>
 8003de0:	2301      	movs	r3, #1
 8003de2:	e000      	b.n	8003de6 <xQueueReceive+0x46>
 8003de4:	2300      	movs	r3, #0
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d10b      	bne.n	8003e02 <xQueueReceive+0x62>
	__asm volatile
 8003dea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dee:	f383 8811 	msr	BASEPRI, r3
 8003df2:	f3bf 8f6f 	isb	sy
 8003df6:	f3bf 8f4f 	dsb	sy
 8003dfa:	61fb      	str	r3, [r7, #28]
}
 8003dfc:	bf00      	nop
 8003dfe:	bf00      	nop
 8003e00:	e7fd      	b.n	8003dfe <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003e02:	f001 f877 	bl	8004ef4 <xTaskGetSchedulerState>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d102      	bne.n	8003e12 <xQueueReceive+0x72>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d101      	bne.n	8003e16 <xQueueReceive+0x76>
 8003e12:	2301      	movs	r3, #1
 8003e14:	e000      	b.n	8003e18 <xQueueReceive+0x78>
 8003e16:	2300      	movs	r3, #0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d10b      	bne.n	8003e34 <xQueueReceive+0x94>
	__asm volatile
 8003e1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e20:	f383 8811 	msr	BASEPRI, r3
 8003e24:	f3bf 8f6f 	isb	sy
 8003e28:	f3bf 8f4f 	dsb	sy
 8003e2c:	61bb      	str	r3, [r7, #24]
}
 8003e2e:	bf00      	nop
 8003e30:	bf00      	nop
 8003e32:	e7fd      	b.n	8003e30 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003e34:	f001 fd90 	bl	8005958 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e3c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d01f      	beq.n	8003e84 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003e44:	68b9      	ldr	r1, [r7, #8]
 8003e46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003e48:	f000 f8f6 	bl	8004038 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e4e:	1e5a      	subs	r2, r3, #1
 8003e50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e52:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e56:	691b      	ldr	r3, [r3, #16]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d00f      	beq.n	8003e7c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e5e:	3310      	adds	r3, #16
 8003e60:	4618      	mov	r0, r3
 8003e62:	f000 fe7b 	bl	8004b5c <xTaskRemoveFromEventList>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d007      	beq.n	8003e7c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003e6c:	4b3c      	ldr	r3, [pc, #240]	@ (8003f60 <xQueueReceive+0x1c0>)
 8003e6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e72:	601a      	str	r2, [r3, #0]
 8003e74:	f3bf 8f4f 	dsb	sy
 8003e78:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003e7c:	f001 fd9e 	bl	80059bc <vPortExitCritical>
				return pdPASS;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e069      	b.n	8003f58 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d103      	bne.n	8003e92 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003e8a:	f001 fd97 	bl	80059bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	e062      	b.n	8003f58 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003e92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d106      	bne.n	8003ea6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003e98:	f107 0310 	add.w	r3, r7, #16
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f000 fec1 	bl	8004c24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003ea6:	f001 fd89 	bl	80059bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003eaa:	f000 fc23 	bl	80046f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003eae:	f001 fd53 	bl	8005958 <vPortEnterCritical>
 8003eb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eb4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003eb8:	b25b      	sxtb	r3, r3
 8003eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ebe:	d103      	bne.n	8003ec8 <xQueueReceive+0x128>
 8003ec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003ece:	b25b      	sxtb	r3, r3
 8003ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed4:	d103      	bne.n	8003ede <xQueueReceive+0x13e>
 8003ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003ede:	f001 fd6d 	bl	80059bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ee2:	1d3a      	adds	r2, r7, #4
 8003ee4:	f107 0310 	add.w	r3, r7, #16
 8003ee8:	4611      	mov	r1, r2
 8003eea:	4618      	mov	r0, r3
 8003eec:	f000 feb0 	bl	8004c50 <xTaskCheckForTimeOut>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d123      	bne.n	8003f3e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ef6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003ef8:	f000 f916 	bl	8004128 <prvIsQueueEmpty>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d017      	beq.n	8003f32 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003f02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f04:	3324      	adds	r3, #36	@ 0x24
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	4611      	mov	r1, r2
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f000 fdd4 	bl	8004ab8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003f10:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f12:	f000 f8b7 	bl	8004084 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003f16:	f000 fbfb 	bl	8004710 <xTaskResumeAll>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d189      	bne.n	8003e34 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003f20:	4b0f      	ldr	r3, [pc, #60]	@ (8003f60 <xQueueReceive+0x1c0>)
 8003f22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f26:	601a      	str	r2, [r3, #0]
 8003f28:	f3bf 8f4f 	dsb	sy
 8003f2c:	f3bf 8f6f 	isb	sy
 8003f30:	e780      	b.n	8003e34 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003f32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f34:	f000 f8a6 	bl	8004084 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003f38:	f000 fbea 	bl	8004710 <xTaskResumeAll>
 8003f3c:	e77a      	b.n	8003e34 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003f3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f40:	f000 f8a0 	bl	8004084 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003f44:	f000 fbe4 	bl	8004710 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f48:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f4a:	f000 f8ed 	bl	8004128 <prvIsQueueEmpty>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	f43f af6f 	beq.w	8003e34 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003f56:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3730      	adds	r7, #48	@ 0x30
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	e000ed04 	.word	0xe000ed04

08003f64 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b086      	sub	sp, #24
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	60b9      	str	r1, [r7, #8]
 8003f6e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003f70:	2300      	movs	r3, #0
 8003f72:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f78:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d10d      	bne.n	8003f9e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d14d      	bne.n	8004026 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f000 ffce 	bl	8004f30 <xTaskPriorityDisinherit>
 8003f94:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	605a      	str	r2, [r3, #4]
 8003f9c:	e043      	b.n	8004026 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d119      	bne.n	8003fd8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6898      	ldr	r0, [r3, #8]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fac:	461a      	mov	r2, r3
 8003fae:	68b9      	ldr	r1, [r7, #8]
 8003fb0:	f002 f858 	bl	8006064 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	689a      	ldr	r2, [r3, #8]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fbc:	441a      	add	r2, r3
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	689a      	ldr	r2, [r3, #8]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d32b      	bcc.n	8004026 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	609a      	str	r2, [r3, #8]
 8003fd6:	e026      	b.n	8004026 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	68d8      	ldr	r0, [r3, #12]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	68b9      	ldr	r1, [r7, #8]
 8003fe4:	f002 f83e 	bl	8006064 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	68da      	ldr	r2, [r3, #12]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff0:	425b      	negs	r3, r3
 8003ff2:	441a      	add	r2, r3
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	68da      	ldr	r2, [r3, #12]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	429a      	cmp	r2, r3
 8004002:	d207      	bcs.n	8004014 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	685a      	ldr	r2, [r3, #4]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800400c:	425b      	negs	r3, r3
 800400e:	441a      	add	r2, r3
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2b02      	cmp	r3, #2
 8004018:	d105      	bne.n	8004026 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d002      	beq.n	8004026 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	3b01      	subs	r3, #1
 8004024:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	1c5a      	adds	r2, r3, #1
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800402e:	697b      	ldr	r3, [r7, #20]
}
 8004030:	4618      	mov	r0, r3
 8004032:	3718      	adds	r7, #24
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b082      	sub	sp, #8
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004046:	2b00      	cmp	r3, #0
 8004048:	d018      	beq.n	800407c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	68da      	ldr	r2, [r3, #12]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004052:	441a      	add	r2, r3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	68da      	ldr	r2, [r3, #12]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	429a      	cmp	r2, r3
 8004062:	d303      	bcc.n	800406c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	68d9      	ldr	r1, [r3, #12]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004074:	461a      	mov	r2, r3
 8004076:	6838      	ldr	r0, [r7, #0]
 8004078:	f001 fff4 	bl	8006064 <memcpy>
	}
}
 800407c:	bf00      	nop
 800407e:	3708      	adds	r7, #8
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}

08004084 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800408c:	f001 fc64 	bl	8005958 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004096:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004098:	e011      	b.n	80040be <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d012      	beq.n	80040c8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	3324      	adds	r3, #36	@ 0x24
 80040a6:	4618      	mov	r0, r3
 80040a8:	f000 fd58 	bl	8004b5c <xTaskRemoveFromEventList>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d001      	beq.n	80040b6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80040b2:	f000 fe31 	bl	8004d18 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80040b6:	7bfb      	ldrb	r3, [r7, #15]
 80040b8:	3b01      	subs	r3, #1
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80040be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	dce9      	bgt.n	800409a <prvUnlockQueue+0x16>
 80040c6:	e000      	b.n	80040ca <prvUnlockQueue+0x46>
					break;
 80040c8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	22ff      	movs	r2, #255	@ 0xff
 80040ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80040d2:	f001 fc73 	bl	80059bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80040d6:	f001 fc3f 	bl	8005958 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80040e0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80040e2:	e011      	b.n	8004108 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	691b      	ldr	r3, [r3, #16]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d012      	beq.n	8004112 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	3310      	adds	r3, #16
 80040f0:	4618      	mov	r0, r3
 80040f2:	f000 fd33 	bl	8004b5c <xTaskRemoveFromEventList>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d001      	beq.n	8004100 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80040fc:	f000 fe0c 	bl	8004d18 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004100:	7bbb      	ldrb	r3, [r7, #14]
 8004102:	3b01      	subs	r3, #1
 8004104:	b2db      	uxtb	r3, r3
 8004106:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004108:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800410c:	2b00      	cmp	r3, #0
 800410e:	dce9      	bgt.n	80040e4 <prvUnlockQueue+0x60>
 8004110:	e000      	b.n	8004114 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004112:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	22ff      	movs	r2, #255	@ 0xff
 8004118:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800411c:	f001 fc4e 	bl	80059bc <vPortExitCritical>
}
 8004120:	bf00      	nop
 8004122:	3710      	adds	r7, #16
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004130:	f001 fc12 	bl	8005958 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004138:	2b00      	cmp	r3, #0
 800413a:	d102      	bne.n	8004142 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800413c:	2301      	movs	r3, #1
 800413e:	60fb      	str	r3, [r7, #12]
 8004140:	e001      	b.n	8004146 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004142:	2300      	movs	r3, #0
 8004144:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004146:	f001 fc39 	bl	80059bc <vPortExitCritical>

	return xReturn;
 800414a:	68fb      	ldr	r3, [r7, #12]
}
 800414c:	4618      	mov	r0, r3
 800414e:	3710      	adds	r7, #16
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}

08004154 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b084      	sub	sp, #16
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800415c:	f001 fbfc 	bl	8005958 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004168:	429a      	cmp	r2, r3
 800416a:	d102      	bne.n	8004172 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800416c:	2301      	movs	r3, #1
 800416e:	60fb      	str	r3, [r7, #12]
 8004170:	e001      	b.n	8004176 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004172:	2300      	movs	r3, #0
 8004174:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004176:	f001 fc21 	bl	80059bc <vPortExitCritical>

	return xReturn;
 800417a:	68fb      	ldr	r3, [r7, #12]
}
 800417c:	4618      	mov	r0, r3
 800417e:	3710      	adds	r7, #16
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}

08004184 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004184:	b480      	push	{r7}
 8004186:	b085      	sub	sp, #20
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800418e:	2300      	movs	r3, #0
 8004190:	60fb      	str	r3, [r7, #12]
 8004192:	e014      	b.n	80041be <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004194:	4a0f      	ldr	r2, [pc, #60]	@ (80041d4 <vQueueAddToRegistry+0x50>)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d10b      	bne.n	80041b8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80041a0:	490c      	ldr	r1, [pc, #48]	@ (80041d4 <vQueueAddToRegistry+0x50>)
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	683a      	ldr	r2, [r7, #0]
 80041a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80041aa:	4a0a      	ldr	r2, [pc, #40]	@ (80041d4 <vQueueAddToRegistry+0x50>)
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	00db      	lsls	r3, r3, #3
 80041b0:	4413      	add	r3, r2
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80041b6:	e006      	b.n	80041c6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	3301      	adds	r3, #1
 80041bc:	60fb      	str	r3, [r7, #12]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2b07      	cmp	r3, #7
 80041c2:	d9e7      	bls.n	8004194 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80041c4:	bf00      	nop
 80041c6:	bf00      	nop
 80041c8:	3714      	adds	r7, #20
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr
 80041d2:	bf00      	nop
 80041d4:	200008ac 	.word	0x200008ac

080041d8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b086      	sub	sp, #24
 80041dc:	af00      	add	r7, sp, #0
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80041e8:	f001 fbb6 	bl	8005958 <vPortEnterCritical>
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80041f2:	b25b      	sxtb	r3, r3
 80041f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f8:	d103      	bne.n	8004202 <vQueueWaitForMessageRestricted+0x2a>
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004208:	b25b      	sxtb	r3, r3
 800420a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800420e:	d103      	bne.n	8004218 <vQueueWaitForMessageRestricted+0x40>
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	2200      	movs	r2, #0
 8004214:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004218:	f001 fbd0 	bl	80059bc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004220:	2b00      	cmp	r3, #0
 8004222:	d106      	bne.n	8004232 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	3324      	adds	r3, #36	@ 0x24
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	68b9      	ldr	r1, [r7, #8]
 800422c:	4618      	mov	r0, r3
 800422e:	f000 fc69 	bl	8004b04 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004232:	6978      	ldr	r0, [r7, #20]
 8004234:	f7ff ff26 	bl	8004084 <prvUnlockQueue>
	}
 8004238:	bf00      	nop
 800423a:	3718      	adds	r7, #24
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004240:	b580      	push	{r7, lr}
 8004242:	b08e      	sub	sp, #56	@ 0x38
 8004244:	af04      	add	r7, sp, #16
 8004246:	60f8      	str	r0, [r7, #12]
 8004248:	60b9      	str	r1, [r7, #8]
 800424a:	607a      	str	r2, [r7, #4]
 800424c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800424e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004250:	2b00      	cmp	r3, #0
 8004252:	d10b      	bne.n	800426c <xTaskCreateStatic+0x2c>
	__asm volatile
 8004254:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004258:	f383 8811 	msr	BASEPRI, r3
 800425c:	f3bf 8f6f 	isb	sy
 8004260:	f3bf 8f4f 	dsb	sy
 8004264:	623b      	str	r3, [r7, #32]
}
 8004266:	bf00      	nop
 8004268:	bf00      	nop
 800426a:	e7fd      	b.n	8004268 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800426c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800426e:	2b00      	cmp	r3, #0
 8004270:	d10b      	bne.n	800428a <xTaskCreateStatic+0x4a>
	__asm volatile
 8004272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004276:	f383 8811 	msr	BASEPRI, r3
 800427a:	f3bf 8f6f 	isb	sy
 800427e:	f3bf 8f4f 	dsb	sy
 8004282:	61fb      	str	r3, [r7, #28]
}
 8004284:	bf00      	nop
 8004286:	bf00      	nop
 8004288:	e7fd      	b.n	8004286 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800428a:	23a8      	movs	r3, #168	@ 0xa8
 800428c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	2ba8      	cmp	r3, #168	@ 0xa8
 8004292:	d00b      	beq.n	80042ac <xTaskCreateStatic+0x6c>
	__asm volatile
 8004294:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004298:	f383 8811 	msr	BASEPRI, r3
 800429c:	f3bf 8f6f 	isb	sy
 80042a0:	f3bf 8f4f 	dsb	sy
 80042a4:	61bb      	str	r3, [r7, #24]
}
 80042a6:	bf00      	nop
 80042a8:	bf00      	nop
 80042aa:	e7fd      	b.n	80042a8 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80042ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d01e      	beq.n	80042f0 <xTaskCreateStatic+0xb0>
 80042b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d01b      	beq.n	80042f0 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80042b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042ba:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80042bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80042c0:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80042c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c4:	2202      	movs	r2, #2
 80042c6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80042ca:	2300      	movs	r3, #0
 80042cc:	9303      	str	r3, [sp, #12]
 80042ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d0:	9302      	str	r3, [sp, #8]
 80042d2:	f107 0314 	add.w	r3, r7, #20
 80042d6:	9301      	str	r3, [sp, #4]
 80042d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042da:	9300      	str	r3, [sp, #0]
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	68b9      	ldr	r1, [r7, #8]
 80042e2:	68f8      	ldr	r0, [r7, #12]
 80042e4:	f000 f850 	bl	8004388 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80042e8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80042ea:	f000 f8ed 	bl	80044c8 <prvAddNewTaskToReadyList>
 80042ee:	e001      	b.n	80042f4 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 80042f0:	2300      	movs	r3, #0
 80042f2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80042f4:	697b      	ldr	r3, [r7, #20]
	}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3728      	adds	r7, #40	@ 0x28
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}

080042fe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80042fe:	b580      	push	{r7, lr}
 8004300:	b08c      	sub	sp, #48	@ 0x30
 8004302:	af04      	add	r7, sp, #16
 8004304:	60f8      	str	r0, [r7, #12]
 8004306:	60b9      	str	r1, [r7, #8]
 8004308:	603b      	str	r3, [r7, #0]
 800430a:	4613      	mov	r3, r2
 800430c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800430e:	88fb      	ldrh	r3, [r7, #6]
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	4618      	mov	r0, r3
 8004314:	f001 fc42 	bl	8005b9c <pvPortMalloc>
 8004318:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d00e      	beq.n	800433e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004320:	20a8      	movs	r0, #168	@ 0xa8
 8004322:	f001 fc3b 	bl	8005b9c <pvPortMalloc>
 8004326:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d003      	beq.n	8004336 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	697a      	ldr	r2, [r7, #20]
 8004332:	631a      	str	r2, [r3, #48]	@ 0x30
 8004334:	e005      	b.n	8004342 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004336:	6978      	ldr	r0, [r7, #20]
 8004338:	f001 fcf8 	bl	8005d2c <vPortFree>
 800433c:	e001      	b.n	8004342 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800433e:	2300      	movs	r3, #0
 8004340:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d017      	beq.n	8004378 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	2200      	movs	r2, #0
 800434c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004350:	88fa      	ldrh	r2, [r7, #6]
 8004352:	2300      	movs	r3, #0
 8004354:	9303      	str	r3, [sp, #12]
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	9302      	str	r3, [sp, #8]
 800435a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800435c:	9301      	str	r3, [sp, #4]
 800435e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004360:	9300      	str	r3, [sp, #0]
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	68b9      	ldr	r1, [r7, #8]
 8004366:	68f8      	ldr	r0, [r7, #12]
 8004368:	f000 f80e 	bl	8004388 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800436c:	69f8      	ldr	r0, [r7, #28]
 800436e:	f000 f8ab 	bl	80044c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004372:	2301      	movs	r3, #1
 8004374:	61bb      	str	r3, [r7, #24]
 8004376:	e002      	b.n	800437e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004378:	f04f 33ff 	mov.w	r3, #4294967295
 800437c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800437e:	69bb      	ldr	r3, [r7, #24]
	}
 8004380:	4618      	mov	r0, r3
 8004382:	3720      	adds	r7, #32
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b088      	sub	sp, #32
 800438c:	af00      	add	r7, sp, #0
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	607a      	str	r2, [r7, #4]
 8004394:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004398:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	461a      	mov	r2, r3
 80043a0:	21a5      	movs	r1, #165	@ 0xa5
 80043a2:	f001 fddb 	bl	8005f5c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80043a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80043b0:	3b01      	subs	r3, #1
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	4413      	add	r3, r2
 80043b6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80043b8:	69bb      	ldr	r3, [r7, #24]
 80043ba:	f023 0307 	bic.w	r3, r3, #7
 80043be:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80043c0:	69bb      	ldr	r3, [r7, #24]
 80043c2:	f003 0307 	and.w	r3, r3, #7
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d00b      	beq.n	80043e2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80043ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043ce:	f383 8811 	msr	BASEPRI, r3
 80043d2:	f3bf 8f6f 	isb	sy
 80043d6:	f3bf 8f4f 	dsb	sy
 80043da:	617b      	str	r3, [r7, #20]
}
 80043dc:	bf00      	nop
 80043de:	bf00      	nop
 80043e0:	e7fd      	b.n	80043de <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80043e2:	2300      	movs	r3, #0
 80043e4:	61fb      	str	r3, [r7, #28]
 80043e6:	e012      	b.n	800440e <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80043e8:	68ba      	ldr	r2, [r7, #8]
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	4413      	add	r3, r2
 80043ee:	7819      	ldrb	r1, [r3, #0]
 80043f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	4413      	add	r3, r2
 80043f6:	3334      	adds	r3, #52	@ 0x34
 80043f8:	460a      	mov	r2, r1
 80043fa:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80043fc:	68ba      	ldr	r2, [r7, #8]
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	4413      	add	r3, r2
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d006      	beq.n	8004416 <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	3301      	adds	r3, #1
 800440c:	61fb      	str	r3, [r7, #28]
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	2b0f      	cmp	r3, #15
 8004412:	d9e9      	bls.n	80043e8 <prvInitialiseNewTask+0x60>
 8004414:	e000      	b.n	8004418 <prvInitialiseNewTask+0x90>
		{
			break;
 8004416:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800441a:	2200      	movs	r2, #0
 800441c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004422:	2b37      	cmp	r3, #55	@ 0x37
 8004424:	d901      	bls.n	800442a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004426:	2337      	movs	r3, #55	@ 0x37
 8004428:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800442a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800442c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800442e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004432:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004434:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004438:	2200      	movs	r2, #0
 800443a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800443c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800443e:	3304      	adds	r3, #4
 8004440:	4618      	mov	r0, r3
 8004442:	f7ff f971 	bl	8003728 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004448:	3318      	adds	r3, #24
 800444a:	4618      	mov	r0, r3
 800444c:	f7ff f96c 	bl	8003728 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004452:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004454:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004458:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800445c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800445e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004462:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004464:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004468:	2200      	movs	r2, #0
 800446a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800446e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004470:	2200      	movs	r2, #0
 8004472:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004478:	3354      	adds	r3, #84	@ 0x54
 800447a:	224c      	movs	r2, #76	@ 0x4c
 800447c:	2100      	movs	r1, #0
 800447e:	4618      	mov	r0, r3
 8004480:	f001 fd6c 	bl	8005f5c <memset>
 8004484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004486:	4a0d      	ldr	r2, [pc, #52]	@ (80044bc <prvInitialiseNewTask+0x134>)
 8004488:	659a      	str	r2, [r3, #88]	@ 0x58
 800448a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800448c:	4a0c      	ldr	r2, [pc, #48]	@ (80044c0 <prvInitialiseNewTask+0x138>)
 800448e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004492:	4a0c      	ldr	r2, [pc, #48]	@ (80044c4 <prvInitialiseNewTask+0x13c>)
 8004494:	661a      	str	r2, [r3, #96]	@ 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004496:	683a      	ldr	r2, [r7, #0]
 8004498:	68f9      	ldr	r1, [r7, #12]
 800449a:	69b8      	ldr	r0, [r7, #24]
 800449c:	f001 f92c 	bl	80056f8 <pxPortInitialiseStack>
 80044a0:	4602      	mov	r2, r0
 80044a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044a4:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80044a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d002      	beq.n	80044b2 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80044ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80044b2:	bf00      	nop
 80044b4:	3720      	adds	r7, #32
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	20001b38 	.word	0x20001b38
 80044c0:	20001ba0 	.word	0x20001ba0
 80044c4:	20001c08 	.word	0x20001c08

080044c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80044d0:	f001 fa42 	bl	8005958 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80044d4:	4b2d      	ldr	r3, [pc, #180]	@ (800458c <prvAddNewTaskToReadyList+0xc4>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	3301      	adds	r3, #1
 80044da:	4a2c      	ldr	r2, [pc, #176]	@ (800458c <prvAddNewTaskToReadyList+0xc4>)
 80044dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80044de:	4b2c      	ldr	r3, [pc, #176]	@ (8004590 <prvAddNewTaskToReadyList+0xc8>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d109      	bne.n	80044fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80044e6:	4a2a      	ldr	r2, [pc, #168]	@ (8004590 <prvAddNewTaskToReadyList+0xc8>)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80044ec:	4b27      	ldr	r3, [pc, #156]	@ (800458c <prvAddNewTaskToReadyList+0xc4>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d110      	bne.n	8004516 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80044f4:	f000 fc34 	bl	8004d60 <prvInitialiseTaskLists>
 80044f8:	e00d      	b.n	8004516 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80044fa:	4b26      	ldr	r3, [pc, #152]	@ (8004594 <prvAddNewTaskToReadyList+0xcc>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d109      	bne.n	8004516 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004502:	4b23      	ldr	r3, [pc, #140]	@ (8004590 <prvAddNewTaskToReadyList+0xc8>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800450c:	429a      	cmp	r2, r3
 800450e:	d802      	bhi.n	8004516 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004510:	4a1f      	ldr	r2, [pc, #124]	@ (8004590 <prvAddNewTaskToReadyList+0xc8>)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004516:	4b20      	ldr	r3, [pc, #128]	@ (8004598 <prvAddNewTaskToReadyList+0xd0>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	3301      	adds	r3, #1
 800451c:	4a1e      	ldr	r2, [pc, #120]	@ (8004598 <prvAddNewTaskToReadyList+0xd0>)
 800451e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004520:	4b1d      	ldr	r3, [pc, #116]	@ (8004598 <prvAddNewTaskToReadyList+0xd0>)
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800452c:	4b1b      	ldr	r3, [pc, #108]	@ (800459c <prvAddNewTaskToReadyList+0xd4>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	429a      	cmp	r2, r3
 8004532:	d903      	bls.n	800453c <prvAddNewTaskToReadyList+0x74>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004538:	4a18      	ldr	r2, [pc, #96]	@ (800459c <prvAddNewTaskToReadyList+0xd4>)
 800453a:	6013      	str	r3, [r2, #0]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004540:	4613      	mov	r3, r2
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	4413      	add	r3, r2
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	4a15      	ldr	r2, [pc, #84]	@ (80045a0 <prvAddNewTaskToReadyList+0xd8>)
 800454a:	441a      	add	r2, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	3304      	adds	r3, #4
 8004550:	4619      	mov	r1, r3
 8004552:	4610      	mov	r0, r2
 8004554:	f7ff f8f5 	bl	8003742 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004558:	f001 fa30 	bl	80059bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800455c:	4b0d      	ldr	r3, [pc, #52]	@ (8004594 <prvAddNewTaskToReadyList+0xcc>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d00e      	beq.n	8004582 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004564:	4b0a      	ldr	r3, [pc, #40]	@ (8004590 <prvAddNewTaskToReadyList+0xc8>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800456e:	429a      	cmp	r2, r3
 8004570:	d207      	bcs.n	8004582 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004572:	4b0c      	ldr	r3, [pc, #48]	@ (80045a4 <prvAddNewTaskToReadyList+0xdc>)
 8004574:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004578:	601a      	str	r2, [r3, #0]
 800457a:	f3bf 8f4f 	dsb	sy
 800457e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004582:	bf00      	nop
 8004584:	3708      	adds	r7, #8
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
 800458a:	bf00      	nop
 800458c:	20000dc0 	.word	0x20000dc0
 8004590:	200008ec 	.word	0x200008ec
 8004594:	20000dcc 	.word	0x20000dcc
 8004598:	20000ddc 	.word	0x20000ddc
 800459c:	20000dc8 	.word	0x20000dc8
 80045a0:	200008f0 	.word	0x200008f0
 80045a4:	e000ed04 	.word	0xe000ed04

080045a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80045b0:	2300      	movs	r3, #0
 80045b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d018      	beq.n	80045ec <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80045ba:	4b14      	ldr	r3, [pc, #80]	@ (800460c <vTaskDelay+0x64>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00b      	beq.n	80045da <vTaskDelay+0x32>
	__asm volatile
 80045c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045c6:	f383 8811 	msr	BASEPRI, r3
 80045ca:	f3bf 8f6f 	isb	sy
 80045ce:	f3bf 8f4f 	dsb	sy
 80045d2:	60bb      	str	r3, [r7, #8]
}
 80045d4:	bf00      	nop
 80045d6:	bf00      	nop
 80045d8:	e7fd      	b.n	80045d6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80045da:	f000 f88b 	bl	80046f4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80045de:	2100      	movs	r1, #0
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f000 fd15 	bl	8005010 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80045e6:	f000 f893 	bl	8004710 <xTaskResumeAll>
 80045ea:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d107      	bne.n	8004602 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80045f2:	4b07      	ldr	r3, [pc, #28]	@ (8004610 <vTaskDelay+0x68>)
 80045f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045f8:	601a      	str	r2, [r3, #0]
 80045fa:	f3bf 8f4f 	dsb	sy
 80045fe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004602:	bf00      	nop
 8004604:	3710      	adds	r7, #16
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	20000de8 	.word	0x20000de8
 8004610:	e000ed04 	.word	0xe000ed04

08004614 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b08a      	sub	sp, #40	@ 0x28
 8004618:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800461a:	2300      	movs	r3, #0
 800461c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800461e:	2300      	movs	r3, #0
 8004620:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004622:	463a      	mov	r2, r7
 8004624:	1d39      	adds	r1, r7, #4
 8004626:	f107 0308 	add.w	r3, r7, #8
 800462a:	4618      	mov	r0, r3
 800462c:	f7ff f828 	bl	8003680 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004630:	6839      	ldr	r1, [r7, #0]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	68ba      	ldr	r2, [r7, #8]
 8004636:	9202      	str	r2, [sp, #8]
 8004638:	9301      	str	r3, [sp, #4]
 800463a:	2300      	movs	r3, #0
 800463c:	9300      	str	r3, [sp, #0]
 800463e:	2300      	movs	r3, #0
 8004640:	460a      	mov	r2, r1
 8004642:	4924      	ldr	r1, [pc, #144]	@ (80046d4 <vTaskStartScheduler+0xc0>)
 8004644:	4824      	ldr	r0, [pc, #144]	@ (80046d8 <vTaskStartScheduler+0xc4>)
 8004646:	f7ff fdfb 	bl	8004240 <xTaskCreateStatic>
 800464a:	4603      	mov	r3, r0
 800464c:	4a23      	ldr	r2, [pc, #140]	@ (80046dc <vTaskStartScheduler+0xc8>)
 800464e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004650:	4b22      	ldr	r3, [pc, #136]	@ (80046dc <vTaskStartScheduler+0xc8>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d002      	beq.n	800465e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004658:	2301      	movs	r3, #1
 800465a:	617b      	str	r3, [r7, #20]
 800465c:	e001      	b.n	8004662 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800465e:	2300      	movs	r3, #0
 8004660:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	2b01      	cmp	r3, #1
 8004666:	d102      	bne.n	800466e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004668:	f000 fd26 	bl	80050b8 <xTimerCreateTimerTask>
 800466c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	2b01      	cmp	r3, #1
 8004672:	d11b      	bne.n	80046ac <vTaskStartScheduler+0x98>
	__asm volatile
 8004674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004678:	f383 8811 	msr	BASEPRI, r3
 800467c:	f3bf 8f6f 	isb	sy
 8004680:	f3bf 8f4f 	dsb	sy
 8004684:	613b      	str	r3, [r7, #16]
}
 8004686:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004688:	4b15      	ldr	r3, [pc, #84]	@ (80046e0 <vTaskStartScheduler+0xcc>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	3354      	adds	r3, #84	@ 0x54
 800468e:	4a15      	ldr	r2, [pc, #84]	@ (80046e4 <vTaskStartScheduler+0xd0>)
 8004690:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004692:	4b15      	ldr	r3, [pc, #84]	@ (80046e8 <vTaskStartScheduler+0xd4>)
 8004694:	f04f 32ff 	mov.w	r2, #4294967295
 8004698:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800469a:	4b14      	ldr	r3, [pc, #80]	@ (80046ec <vTaskStartScheduler+0xd8>)
 800469c:	2201      	movs	r2, #1
 800469e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80046a0:	4b13      	ldr	r3, [pc, #76]	@ (80046f0 <vTaskStartScheduler+0xdc>)
 80046a2:	2200      	movs	r2, #0
 80046a4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80046a6:	f001 f8b3 	bl	8005810 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80046aa:	e00f      	b.n	80046cc <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b2:	d10b      	bne.n	80046cc <vTaskStartScheduler+0xb8>
	__asm volatile
 80046b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046b8:	f383 8811 	msr	BASEPRI, r3
 80046bc:	f3bf 8f6f 	isb	sy
 80046c0:	f3bf 8f4f 	dsb	sy
 80046c4:	60fb      	str	r3, [r7, #12]
}
 80046c6:	bf00      	nop
 80046c8:	bf00      	nop
 80046ca:	e7fd      	b.n	80046c8 <vTaskStartScheduler+0xb4>
}
 80046cc:	bf00      	nop
 80046ce:	3718      	adds	r7, #24
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	08006158 	.word	0x08006158
 80046d8:	08004d31 	.word	0x08004d31
 80046dc:	20000de4 	.word	0x20000de4
 80046e0:	200008ec 	.word	0x200008ec
 80046e4:	20000010 	.word	0x20000010
 80046e8:	20000de0 	.word	0x20000de0
 80046ec:	20000dcc 	.word	0x20000dcc
 80046f0:	20000dc4 	.word	0x20000dc4

080046f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80046f4:	b480      	push	{r7}
 80046f6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80046f8:	4b04      	ldr	r3, [pc, #16]	@ (800470c <vTaskSuspendAll+0x18>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	3301      	adds	r3, #1
 80046fe:	4a03      	ldr	r2, [pc, #12]	@ (800470c <vTaskSuspendAll+0x18>)
 8004700:	6013      	str	r3, [r2, #0]
}
 8004702:	bf00      	nop
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr
 800470c:	20000de8 	.word	0x20000de8

08004710 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004716:	2300      	movs	r3, #0
 8004718:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800471a:	2300      	movs	r3, #0
 800471c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800471e:	4b42      	ldr	r3, [pc, #264]	@ (8004828 <xTaskResumeAll+0x118>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d10b      	bne.n	800473e <xTaskResumeAll+0x2e>
	__asm volatile
 8004726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800472a:	f383 8811 	msr	BASEPRI, r3
 800472e:	f3bf 8f6f 	isb	sy
 8004732:	f3bf 8f4f 	dsb	sy
 8004736:	603b      	str	r3, [r7, #0]
}
 8004738:	bf00      	nop
 800473a:	bf00      	nop
 800473c:	e7fd      	b.n	800473a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800473e:	f001 f90b 	bl	8005958 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004742:	4b39      	ldr	r3, [pc, #228]	@ (8004828 <xTaskResumeAll+0x118>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	3b01      	subs	r3, #1
 8004748:	4a37      	ldr	r2, [pc, #220]	@ (8004828 <xTaskResumeAll+0x118>)
 800474a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800474c:	4b36      	ldr	r3, [pc, #216]	@ (8004828 <xTaskResumeAll+0x118>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d162      	bne.n	800481a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004754:	4b35      	ldr	r3, [pc, #212]	@ (800482c <xTaskResumeAll+0x11c>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d05e      	beq.n	800481a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800475c:	e02f      	b.n	80047be <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800475e:	4b34      	ldr	r3, [pc, #208]	@ (8004830 <xTaskResumeAll+0x120>)
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	3318      	adds	r3, #24
 800476a:	4618      	mov	r0, r3
 800476c:	f7ff f846 	bl	80037fc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	3304      	adds	r3, #4
 8004774:	4618      	mov	r0, r3
 8004776:	f7ff f841 	bl	80037fc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800477e:	4b2d      	ldr	r3, [pc, #180]	@ (8004834 <xTaskResumeAll+0x124>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	429a      	cmp	r2, r3
 8004784:	d903      	bls.n	800478e <xTaskResumeAll+0x7e>
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800478a:	4a2a      	ldr	r2, [pc, #168]	@ (8004834 <xTaskResumeAll+0x124>)
 800478c:	6013      	str	r3, [r2, #0]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004792:	4613      	mov	r3, r2
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	4413      	add	r3, r2
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	4a27      	ldr	r2, [pc, #156]	@ (8004838 <xTaskResumeAll+0x128>)
 800479c:	441a      	add	r2, r3
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	3304      	adds	r3, #4
 80047a2:	4619      	mov	r1, r3
 80047a4:	4610      	mov	r0, r2
 80047a6:	f7fe ffcc 	bl	8003742 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047ae:	4b23      	ldr	r3, [pc, #140]	@ (800483c <xTaskResumeAll+0x12c>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d302      	bcc.n	80047be <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80047b8:	4b21      	ldr	r3, [pc, #132]	@ (8004840 <xTaskResumeAll+0x130>)
 80047ba:	2201      	movs	r2, #1
 80047bc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80047be:	4b1c      	ldr	r3, [pc, #112]	@ (8004830 <xTaskResumeAll+0x120>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d1cb      	bne.n	800475e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d001      	beq.n	80047d0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80047cc:	f000 fb6c 	bl	8004ea8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80047d0:	4b1c      	ldr	r3, [pc, #112]	@ (8004844 <xTaskResumeAll+0x134>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d010      	beq.n	80047fe <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80047dc:	f000 f846 	bl	800486c <xTaskIncrementTick>
 80047e0:	4603      	mov	r3, r0
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d002      	beq.n	80047ec <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80047e6:	4b16      	ldr	r3, [pc, #88]	@ (8004840 <xTaskResumeAll+0x130>)
 80047e8:	2201      	movs	r2, #1
 80047ea:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	3b01      	subs	r3, #1
 80047f0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d1f1      	bne.n	80047dc <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 80047f8:	4b12      	ldr	r3, [pc, #72]	@ (8004844 <xTaskResumeAll+0x134>)
 80047fa:	2200      	movs	r2, #0
 80047fc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80047fe:	4b10      	ldr	r3, [pc, #64]	@ (8004840 <xTaskResumeAll+0x130>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d009      	beq.n	800481a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004806:	2301      	movs	r3, #1
 8004808:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800480a:	4b0f      	ldr	r3, [pc, #60]	@ (8004848 <xTaskResumeAll+0x138>)
 800480c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004810:	601a      	str	r2, [r3, #0]
 8004812:	f3bf 8f4f 	dsb	sy
 8004816:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800481a:	f001 f8cf 	bl	80059bc <vPortExitCritical>

	return xAlreadyYielded;
 800481e:	68bb      	ldr	r3, [r7, #8]
}
 8004820:	4618      	mov	r0, r3
 8004822:	3710      	adds	r7, #16
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}
 8004828:	20000de8 	.word	0x20000de8
 800482c:	20000dc0 	.word	0x20000dc0
 8004830:	20000d80 	.word	0x20000d80
 8004834:	20000dc8 	.word	0x20000dc8
 8004838:	200008f0 	.word	0x200008f0
 800483c:	200008ec 	.word	0x200008ec
 8004840:	20000dd4 	.word	0x20000dd4
 8004844:	20000dd0 	.word	0x20000dd0
 8004848:	e000ed04 	.word	0xe000ed04

0800484c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004852:	4b05      	ldr	r3, [pc, #20]	@ (8004868 <xTaskGetTickCount+0x1c>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004858:	687b      	ldr	r3, [r7, #4]
}
 800485a:	4618      	mov	r0, r3
 800485c:	370c      	adds	r7, #12
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr
 8004866:	bf00      	nop
 8004868:	20000dc4 	.word	0x20000dc4

0800486c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b086      	sub	sp, #24
 8004870:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004872:	2300      	movs	r3, #0
 8004874:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004876:	4b52      	ldr	r3, [pc, #328]	@ (80049c0 <xTaskIncrementTick+0x154>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2b00      	cmp	r3, #0
 800487c:	f040 808f 	bne.w	800499e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004880:	4b50      	ldr	r3, [pc, #320]	@ (80049c4 <xTaskIncrementTick+0x158>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	3301      	adds	r3, #1
 8004886:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004888:	4a4e      	ldr	r2, [pc, #312]	@ (80049c4 <xTaskIncrementTick+0x158>)
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d121      	bne.n	80048d8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004894:	4b4c      	ldr	r3, [pc, #304]	@ (80049c8 <xTaskIncrementTick+0x15c>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d00b      	beq.n	80048b6 <xTaskIncrementTick+0x4a>
	__asm volatile
 800489e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048a2:	f383 8811 	msr	BASEPRI, r3
 80048a6:	f3bf 8f6f 	isb	sy
 80048aa:	f3bf 8f4f 	dsb	sy
 80048ae:	603b      	str	r3, [r7, #0]
}
 80048b0:	bf00      	nop
 80048b2:	bf00      	nop
 80048b4:	e7fd      	b.n	80048b2 <xTaskIncrementTick+0x46>
 80048b6:	4b44      	ldr	r3, [pc, #272]	@ (80049c8 <xTaskIncrementTick+0x15c>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	60fb      	str	r3, [r7, #12]
 80048bc:	4b43      	ldr	r3, [pc, #268]	@ (80049cc <xTaskIncrementTick+0x160>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a41      	ldr	r2, [pc, #260]	@ (80049c8 <xTaskIncrementTick+0x15c>)
 80048c2:	6013      	str	r3, [r2, #0]
 80048c4:	4a41      	ldr	r2, [pc, #260]	@ (80049cc <xTaskIncrementTick+0x160>)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6013      	str	r3, [r2, #0]
 80048ca:	4b41      	ldr	r3, [pc, #260]	@ (80049d0 <xTaskIncrementTick+0x164>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	3301      	adds	r3, #1
 80048d0:	4a3f      	ldr	r2, [pc, #252]	@ (80049d0 <xTaskIncrementTick+0x164>)
 80048d2:	6013      	str	r3, [r2, #0]
 80048d4:	f000 fae8 	bl	8004ea8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80048d8:	4b3e      	ldr	r3, [pc, #248]	@ (80049d4 <xTaskIncrementTick+0x168>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	693a      	ldr	r2, [r7, #16]
 80048de:	429a      	cmp	r2, r3
 80048e0:	d34e      	bcc.n	8004980 <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80048e2:	4b39      	ldr	r3, [pc, #228]	@ (80049c8 <xTaskIncrementTick+0x15c>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d101      	bne.n	80048f0 <xTaskIncrementTick+0x84>
 80048ec:	2301      	movs	r3, #1
 80048ee:	e000      	b.n	80048f2 <xTaskIncrementTick+0x86>
 80048f0:	2300      	movs	r3, #0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d004      	beq.n	8004900 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048f6:	4b37      	ldr	r3, [pc, #220]	@ (80049d4 <xTaskIncrementTick+0x168>)
 80048f8:	f04f 32ff 	mov.w	r2, #4294967295
 80048fc:	601a      	str	r2, [r3, #0]
					break;
 80048fe:	e03f      	b.n	8004980 <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004900:	4b31      	ldr	r3, [pc, #196]	@ (80049c8 <xTaskIncrementTick+0x15c>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004910:	693a      	ldr	r2, [r7, #16]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	429a      	cmp	r2, r3
 8004916:	d203      	bcs.n	8004920 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004918:	4a2e      	ldr	r2, [pc, #184]	@ (80049d4 <xTaskIncrementTick+0x168>)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6013      	str	r3, [r2, #0]
						break;
 800491e:	e02f      	b.n	8004980 <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	3304      	adds	r3, #4
 8004924:	4618      	mov	r0, r3
 8004926:	f7fe ff69 	bl	80037fc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800492e:	2b00      	cmp	r3, #0
 8004930:	d004      	beq.n	800493c <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	3318      	adds	r3, #24
 8004936:	4618      	mov	r0, r3
 8004938:	f7fe ff60 	bl	80037fc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004940:	4b25      	ldr	r3, [pc, #148]	@ (80049d8 <xTaskIncrementTick+0x16c>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	429a      	cmp	r2, r3
 8004946:	d903      	bls.n	8004950 <xTaskIncrementTick+0xe4>
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800494c:	4a22      	ldr	r2, [pc, #136]	@ (80049d8 <xTaskIncrementTick+0x16c>)
 800494e:	6013      	str	r3, [r2, #0]
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004954:	4613      	mov	r3, r2
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	4413      	add	r3, r2
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	4a1f      	ldr	r2, [pc, #124]	@ (80049dc <xTaskIncrementTick+0x170>)
 800495e:	441a      	add	r2, r3
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	3304      	adds	r3, #4
 8004964:	4619      	mov	r1, r3
 8004966:	4610      	mov	r0, r2
 8004968:	f7fe feeb 	bl	8003742 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004970:	4b1b      	ldr	r3, [pc, #108]	@ (80049e0 <xTaskIncrementTick+0x174>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004976:	429a      	cmp	r2, r3
 8004978:	d3b3      	bcc.n	80048e2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800497a:	2301      	movs	r3, #1
 800497c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800497e:	e7b0      	b.n	80048e2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004980:	4b17      	ldr	r3, [pc, #92]	@ (80049e0 <xTaskIncrementTick+0x174>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004986:	4915      	ldr	r1, [pc, #84]	@ (80049dc <xTaskIncrementTick+0x170>)
 8004988:	4613      	mov	r3, r2
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	4413      	add	r3, r2
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	440b      	add	r3, r1
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	2b01      	cmp	r3, #1
 8004996:	d907      	bls.n	80049a8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004998:	2301      	movs	r3, #1
 800499a:	617b      	str	r3, [r7, #20]
 800499c:	e004      	b.n	80049a8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800499e:	4b11      	ldr	r3, [pc, #68]	@ (80049e4 <xTaskIncrementTick+0x178>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	3301      	adds	r3, #1
 80049a4:	4a0f      	ldr	r2, [pc, #60]	@ (80049e4 <xTaskIncrementTick+0x178>)
 80049a6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80049a8:	4b0f      	ldr	r3, [pc, #60]	@ (80049e8 <xTaskIncrementTick+0x17c>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d001      	beq.n	80049b4 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 80049b0:	2301      	movs	r3, #1
 80049b2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80049b4:	697b      	ldr	r3, [r7, #20]
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3718      	adds	r7, #24
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	20000de8 	.word	0x20000de8
 80049c4:	20000dc4 	.word	0x20000dc4
 80049c8:	20000d78 	.word	0x20000d78
 80049cc:	20000d7c 	.word	0x20000d7c
 80049d0:	20000dd8 	.word	0x20000dd8
 80049d4:	20000de0 	.word	0x20000de0
 80049d8:	20000dc8 	.word	0x20000dc8
 80049dc:	200008f0 	.word	0x200008f0
 80049e0:	200008ec 	.word	0x200008ec
 80049e4:	20000dd0 	.word	0x20000dd0
 80049e8:	20000dd4 	.word	0x20000dd4

080049ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80049ec:	b480      	push	{r7}
 80049ee:	b085      	sub	sp, #20
 80049f0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80049f2:	4b2b      	ldr	r3, [pc, #172]	@ (8004aa0 <vTaskSwitchContext+0xb4>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d003      	beq.n	8004a02 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80049fa:	4b2a      	ldr	r3, [pc, #168]	@ (8004aa4 <vTaskSwitchContext+0xb8>)
 80049fc:	2201      	movs	r2, #1
 80049fe:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004a00:	e047      	b.n	8004a92 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8004a02:	4b28      	ldr	r3, [pc, #160]	@ (8004aa4 <vTaskSwitchContext+0xb8>)
 8004a04:	2200      	movs	r2, #0
 8004a06:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004a08:	4b27      	ldr	r3, [pc, #156]	@ (8004aa8 <vTaskSwitchContext+0xbc>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	60fb      	str	r3, [r7, #12]
 8004a0e:	e011      	b.n	8004a34 <vTaskSwitchContext+0x48>
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d10b      	bne.n	8004a2e <vTaskSwitchContext+0x42>
	__asm volatile
 8004a16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a1a:	f383 8811 	msr	BASEPRI, r3
 8004a1e:	f3bf 8f6f 	isb	sy
 8004a22:	f3bf 8f4f 	dsb	sy
 8004a26:	607b      	str	r3, [r7, #4]
}
 8004a28:	bf00      	nop
 8004a2a:	bf00      	nop
 8004a2c:	e7fd      	b.n	8004a2a <vTaskSwitchContext+0x3e>
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	3b01      	subs	r3, #1
 8004a32:	60fb      	str	r3, [r7, #12]
 8004a34:	491d      	ldr	r1, [pc, #116]	@ (8004aac <vTaskSwitchContext+0xc0>)
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	4613      	mov	r3, r2
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	4413      	add	r3, r2
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	440b      	add	r3, r1
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d0e3      	beq.n	8004a10 <vTaskSwitchContext+0x24>
 8004a48:	68fa      	ldr	r2, [r7, #12]
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	4413      	add	r3, r2
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	4a16      	ldr	r2, [pc, #88]	@ (8004aac <vTaskSwitchContext+0xc0>)
 8004a54:	4413      	add	r3, r2
 8004a56:	60bb      	str	r3, [r7, #8]
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	685a      	ldr	r2, [r3, #4]
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	605a      	str	r2, [r3, #4]
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	685a      	ldr	r2, [r3, #4]
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	3308      	adds	r3, #8
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d104      	bne.n	8004a78 <vTaskSwitchContext+0x8c>
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	685a      	ldr	r2, [r3, #4]
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	605a      	str	r2, [r3, #4]
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	4a0c      	ldr	r2, [pc, #48]	@ (8004ab0 <vTaskSwitchContext+0xc4>)
 8004a80:	6013      	str	r3, [r2, #0]
 8004a82:	4a09      	ldr	r2, [pc, #36]	@ (8004aa8 <vTaskSwitchContext+0xbc>)
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004a88:	4b09      	ldr	r3, [pc, #36]	@ (8004ab0 <vTaskSwitchContext+0xc4>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	3354      	adds	r3, #84	@ 0x54
 8004a8e:	4a09      	ldr	r2, [pc, #36]	@ (8004ab4 <vTaskSwitchContext+0xc8>)
 8004a90:	6013      	str	r3, [r2, #0]
}
 8004a92:	bf00      	nop
 8004a94:	3714      	adds	r7, #20
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr
 8004a9e:	bf00      	nop
 8004aa0:	20000de8 	.word	0x20000de8
 8004aa4:	20000dd4 	.word	0x20000dd4
 8004aa8:	20000dc8 	.word	0x20000dc8
 8004aac:	200008f0 	.word	0x200008f0
 8004ab0:	200008ec 	.word	0x200008ec
 8004ab4:	20000010 	.word	0x20000010

08004ab8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b084      	sub	sp, #16
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d10b      	bne.n	8004ae0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004ac8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004acc:	f383 8811 	msr	BASEPRI, r3
 8004ad0:	f3bf 8f6f 	isb	sy
 8004ad4:	f3bf 8f4f 	dsb	sy
 8004ad8:	60fb      	str	r3, [r7, #12]
}
 8004ada:	bf00      	nop
 8004adc:	bf00      	nop
 8004ade:	e7fd      	b.n	8004adc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004ae0:	4b07      	ldr	r3, [pc, #28]	@ (8004b00 <vTaskPlaceOnEventList+0x48>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	3318      	adds	r3, #24
 8004ae6:	4619      	mov	r1, r3
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f7fe fe4e 	bl	800378a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004aee:	2101      	movs	r1, #1
 8004af0:	6838      	ldr	r0, [r7, #0]
 8004af2:	f000 fa8d 	bl	8005010 <prvAddCurrentTaskToDelayedList>
}
 8004af6:	bf00      	nop
 8004af8:	3710      	adds	r7, #16
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop
 8004b00:	200008ec 	.word	0x200008ec

08004b04 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b086      	sub	sp, #24
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	60b9      	str	r1, [r7, #8]
 8004b0e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d10b      	bne.n	8004b2e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004b16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b1a:	f383 8811 	msr	BASEPRI, r3
 8004b1e:	f3bf 8f6f 	isb	sy
 8004b22:	f3bf 8f4f 	dsb	sy
 8004b26:	617b      	str	r3, [r7, #20]
}
 8004b28:	bf00      	nop
 8004b2a:	bf00      	nop
 8004b2c:	e7fd      	b.n	8004b2a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004b2e:	4b0a      	ldr	r3, [pc, #40]	@ (8004b58 <vTaskPlaceOnEventListRestricted+0x54>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	3318      	adds	r3, #24
 8004b34:	4619      	mov	r1, r3
 8004b36:	68f8      	ldr	r0, [r7, #12]
 8004b38:	f7fe fe03 	bl	8003742 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d002      	beq.n	8004b48 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004b42:	f04f 33ff 	mov.w	r3, #4294967295
 8004b46:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004b48:	6879      	ldr	r1, [r7, #4]
 8004b4a:	68b8      	ldr	r0, [r7, #8]
 8004b4c:	f000 fa60 	bl	8005010 <prvAddCurrentTaskToDelayedList>
	}
 8004b50:	bf00      	nop
 8004b52:	3718      	adds	r7, #24
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	200008ec 	.word	0x200008ec

08004b5c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b086      	sub	sp, #24
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d10b      	bne.n	8004b8a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004b72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b76:	f383 8811 	msr	BASEPRI, r3
 8004b7a:	f3bf 8f6f 	isb	sy
 8004b7e:	f3bf 8f4f 	dsb	sy
 8004b82:	60fb      	str	r3, [r7, #12]
}
 8004b84:	bf00      	nop
 8004b86:	bf00      	nop
 8004b88:	e7fd      	b.n	8004b86 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	3318      	adds	r3, #24
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f7fe fe34 	bl	80037fc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b94:	4b1d      	ldr	r3, [pc, #116]	@ (8004c0c <xTaskRemoveFromEventList+0xb0>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d11d      	bne.n	8004bd8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	3304      	adds	r3, #4
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f7fe fe2b 	bl	80037fc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004baa:	4b19      	ldr	r3, [pc, #100]	@ (8004c10 <xTaskRemoveFromEventList+0xb4>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d903      	bls.n	8004bba <xTaskRemoveFromEventList+0x5e>
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bb6:	4a16      	ldr	r2, [pc, #88]	@ (8004c10 <xTaskRemoveFromEventList+0xb4>)
 8004bb8:	6013      	str	r3, [r2, #0]
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bbe:	4613      	mov	r3, r2
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	4413      	add	r3, r2
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	4a13      	ldr	r2, [pc, #76]	@ (8004c14 <xTaskRemoveFromEventList+0xb8>)
 8004bc8:	441a      	add	r2, r3
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	3304      	adds	r3, #4
 8004bce:	4619      	mov	r1, r3
 8004bd0:	4610      	mov	r0, r2
 8004bd2:	f7fe fdb6 	bl	8003742 <vListInsertEnd>
 8004bd6:	e005      	b.n	8004be4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	3318      	adds	r3, #24
 8004bdc:	4619      	mov	r1, r3
 8004bde:	480e      	ldr	r0, [pc, #56]	@ (8004c18 <xTaskRemoveFromEventList+0xbc>)
 8004be0:	f7fe fdaf 	bl	8003742 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004be8:	4b0c      	ldr	r3, [pc, #48]	@ (8004c1c <xTaskRemoveFromEventList+0xc0>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d905      	bls.n	8004bfe <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004bf6:	4b0a      	ldr	r3, [pc, #40]	@ (8004c20 <xTaskRemoveFromEventList+0xc4>)
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	601a      	str	r2, [r3, #0]
 8004bfc:	e001      	b.n	8004c02 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004c02:	697b      	ldr	r3, [r7, #20]
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3718      	adds	r7, #24
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	20000de8 	.word	0x20000de8
 8004c10:	20000dc8 	.word	0x20000dc8
 8004c14:	200008f0 	.word	0x200008f0
 8004c18:	20000d80 	.word	0x20000d80
 8004c1c:	200008ec 	.word	0x200008ec
 8004c20:	20000dd4 	.word	0x20000dd4

08004c24 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004c2c:	4b06      	ldr	r3, [pc, #24]	@ (8004c48 <vTaskInternalSetTimeOutState+0x24>)
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004c34:	4b05      	ldr	r3, [pc, #20]	@ (8004c4c <vTaskInternalSetTimeOutState+0x28>)
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	605a      	str	r2, [r3, #4]
}
 8004c3c:	bf00      	nop
 8004c3e:	370c      	adds	r7, #12
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr
 8004c48:	20000dd8 	.word	0x20000dd8
 8004c4c:	20000dc4 	.word	0x20000dc4

08004c50 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b088      	sub	sp, #32
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d10b      	bne.n	8004c78 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004c60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c64:	f383 8811 	msr	BASEPRI, r3
 8004c68:	f3bf 8f6f 	isb	sy
 8004c6c:	f3bf 8f4f 	dsb	sy
 8004c70:	613b      	str	r3, [r7, #16]
}
 8004c72:	bf00      	nop
 8004c74:	bf00      	nop
 8004c76:	e7fd      	b.n	8004c74 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d10b      	bne.n	8004c96 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004c7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c82:	f383 8811 	msr	BASEPRI, r3
 8004c86:	f3bf 8f6f 	isb	sy
 8004c8a:	f3bf 8f4f 	dsb	sy
 8004c8e:	60fb      	str	r3, [r7, #12]
}
 8004c90:	bf00      	nop
 8004c92:	bf00      	nop
 8004c94:	e7fd      	b.n	8004c92 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004c96:	f000 fe5f 	bl	8005958 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004c9a:	4b1d      	ldr	r3, [pc, #116]	@ (8004d10 <xTaskCheckForTimeOut+0xc0>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	69ba      	ldr	r2, [r7, #24]
 8004ca6:	1ad3      	subs	r3, r2, r3
 8004ca8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb2:	d102      	bne.n	8004cba <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	61fb      	str	r3, [r7, #28]
 8004cb8:	e023      	b.n	8004d02 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	4b15      	ldr	r3, [pc, #84]	@ (8004d14 <xTaskCheckForTimeOut+0xc4>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d007      	beq.n	8004cd6 <xTaskCheckForTimeOut+0x86>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	69ba      	ldr	r2, [r7, #24]
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d302      	bcc.n	8004cd6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	61fb      	str	r3, [r7, #28]
 8004cd4:	e015      	b.n	8004d02 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	697a      	ldr	r2, [r7, #20]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d20b      	bcs.n	8004cf8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	1ad2      	subs	r2, r2, r3
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f7ff ff99 	bl	8004c24 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	61fb      	str	r3, [r7, #28]
 8004cf6:	e004      	b.n	8004d02 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004d02:	f000 fe5b 	bl	80059bc <vPortExitCritical>

	return xReturn;
 8004d06:	69fb      	ldr	r3, [r7, #28]
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3720      	adds	r7, #32
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	20000dc4 	.word	0x20000dc4
 8004d14:	20000dd8 	.word	0x20000dd8

08004d18 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004d18:	b480      	push	{r7}
 8004d1a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004d1c:	4b03      	ldr	r3, [pc, #12]	@ (8004d2c <vTaskMissedYield+0x14>)
 8004d1e:	2201      	movs	r2, #1
 8004d20:	601a      	str	r2, [r3, #0]
}
 8004d22:	bf00      	nop
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr
 8004d2c:	20000dd4 	.word	0x20000dd4

08004d30 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b082      	sub	sp, #8
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004d38:	f000 f852 	bl	8004de0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004d3c:	4b06      	ldr	r3, [pc, #24]	@ (8004d58 <prvIdleTask+0x28>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d9f9      	bls.n	8004d38 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004d44:	4b05      	ldr	r3, [pc, #20]	@ (8004d5c <prvIdleTask+0x2c>)
 8004d46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d4a:	601a      	str	r2, [r3, #0]
 8004d4c:	f3bf 8f4f 	dsb	sy
 8004d50:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004d54:	e7f0      	b.n	8004d38 <prvIdleTask+0x8>
 8004d56:	bf00      	nop
 8004d58:	200008f0 	.word	0x200008f0
 8004d5c:	e000ed04 	.word	0xe000ed04

08004d60 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b082      	sub	sp, #8
 8004d64:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d66:	2300      	movs	r3, #0
 8004d68:	607b      	str	r3, [r7, #4]
 8004d6a:	e00c      	b.n	8004d86 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	4613      	mov	r3, r2
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	4413      	add	r3, r2
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	4a12      	ldr	r2, [pc, #72]	@ (8004dc0 <prvInitialiseTaskLists+0x60>)
 8004d78:	4413      	add	r3, r2
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f7fe fcb4 	bl	80036e8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	3301      	adds	r3, #1
 8004d84:	607b      	str	r3, [r7, #4]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2b37      	cmp	r3, #55	@ 0x37
 8004d8a:	d9ef      	bls.n	8004d6c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004d8c:	480d      	ldr	r0, [pc, #52]	@ (8004dc4 <prvInitialiseTaskLists+0x64>)
 8004d8e:	f7fe fcab 	bl	80036e8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004d92:	480d      	ldr	r0, [pc, #52]	@ (8004dc8 <prvInitialiseTaskLists+0x68>)
 8004d94:	f7fe fca8 	bl	80036e8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004d98:	480c      	ldr	r0, [pc, #48]	@ (8004dcc <prvInitialiseTaskLists+0x6c>)
 8004d9a:	f7fe fca5 	bl	80036e8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004d9e:	480c      	ldr	r0, [pc, #48]	@ (8004dd0 <prvInitialiseTaskLists+0x70>)
 8004da0:	f7fe fca2 	bl	80036e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004da4:	480b      	ldr	r0, [pc, #44]	@ (8004dd4 <prvInitialiseTaskLists+0x74>)
 8004da6:	f7fe fc9f 	bl	80036e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004daa:	4b0b      	ldr	r3, [pc, #44]	@ (8004dd8 <prvInitialiseTaskLists+0x78>)
 8004dac:	4a05      	ldr	r2, [pc, #20]	@ (8004dc4 <prvInitialiseTaskLists+0x64>)
 8004dae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004db0:	4b0a      	ldr	r3, [pc, #40]	@ (8004ddc <prvInitialiseTaskLists+0x7c>)
 8004db2:	4a05      	ldr	r2, [pc, #20]	@ (8004dc8 <prvInitialiseTaskLists+0x68>)
 8004db4:	601a      	str	r2, [r3, #0]
}
 8004db6:	bf00      	nop
 8004db8:	3708      	adds	r7, #8
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	200008f0 	.word	0x200008f0
 8004dc4:	20000d50 	.word	0x20000d50
 8004dc8:	20000d64 	.word	0x20000d64
 8004dcc:	20000d80 	.word	0x20000d80
 8004dd0:	20000d94 	.word	0x20000d94
 8004dd4:	20000dac 	.word	0x20000dac
 8004dd8:	20000d78 	.word	0x20000d78
 8004ddc:	20000d7c 	.word	0x20000d7c

08004de0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b082      	sub	sp, #8
 8004de4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004de6:	e019      	b.n	8004e1c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004de8:	f000 fdb6 	bl	8005958 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004dec:	4b10      	ldr	r3, [pc, #64]	@ (8004e30 <prvCheckTasksWaitingTermination+0x50>)
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	3304      	adds	r3, #4
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f7fe fcff 	bl	80037fc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004dfe:	4b0d      	ldr	r3, [pc, #52]	@ (8004e34 <prvCheckTasksWaitingTermination+0x54>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	3b01      	subs	r3, #1
 8004e04:	4a0b      	ldr	r2, [pc, #44]	@ (8004e34 <prvCheckTasksWaitingTermination+0x54>)
 8004e06:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004e08:	4b0b      	ldr	r3, [pc, #44]	@ (8004e38 <prvCheckTasksWaitingTermination+0x58>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	3b01      	subs	r3, #1
 8004e0e:	4a0a      	ldr	r2, [pc, #40]	@ (8004e38 <prvCheckTasksWaitingTermination+0x58>)
 8004e10:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004e12:	f000 fdd3 	bl	80059bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f000 f810 	bl	8004e3c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e1c:	4b06      	ldr	r3, [pc, #24]	@ (8004e38 <prvCheckTasksWaitingTermination+0x58>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d1e1      	bne.n	8004de8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004e24:	bf00      	nop
 8004e26:	bf00      	nop
 8004e28:	3708      	adds	r7, #8
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	20000d94 	.word	0x20000d94
 8004e34:	20000dc0 	.word	0x20000dc0
 8004e38:	20000da8 	.word	0x20000da8

08004e3c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b084      	sub	sp, #16
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	3354      	adds	r3, #84	@ 0x54
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f001 f88f 	bl	8005f6c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d108      	bne.n	8004e6a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f000 ff65 	bl	8005d2c <vPortFree>
				vPortFree( pxTCB );
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f000 ff62 	bl	8005d2c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004e68:	e019      	b.n	8004e9e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d103      	bne.n	8004e7c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f000 ff59 	bl	8005d2c <vPortFree>
	}
 8004e7a:	e010      	b.n	8004e9e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004e82:	2b02      	cmp	r3, #2
 8004e84:	d00b      	beq.n	8004e9e <prvDeleteTCB+0x62>
	__asm volatile
 8004e86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e8a:	f383 8811 	msr	BASEPRI, r3
 8004e8e:	f3bf 8f6f 	isb	sy
 8004e92:	f3bf 8f4f 	dsb	sy
 8004e96:	60fb      	str	r3, [r7, #12]
}
 8004e98:	bf00      	nop
 8004e9a:	bf00      	nop
 8004e9c:	e7fd      	b.n	8004e9a <prvDeleteTCB+0x5e>
	}
 8004e9e:	bf00      	nop
 8004ea0:	3710      	adds	r7, #16
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
	...

08004ea8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004eae:	4b0f      	ldr	r3, [pc, #60]	@ (8004eec <prvResetNextTaskUnblockTime+0x44>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d101      	bne.n	8004ebc <prvResetNextTaskUnblockTime+0x14>
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e000      	b.n	8004ebe <prvResetNextTaskUnblockTime+0x16>
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d004      	beq.n	8004ecc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004ec2:	4b0b      	ldr	r3, [pc, #44]	@ (8004ef0 <prvResetNextTaskUnblockTime+0x48>)
 8004ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8004ec8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004eca:	e008      	b.n	8004ede <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004ecc:	4b07      	ldr	r3, [pc, #28]	@ (8004eec <prvResetNextTaskUnblockTime+0x44>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	4a05      	ldr	r2, [pc, #20]	@ (8004ef0 <prvResetNextTaskUnblockTime+0x48>)
 8004edc:	6013      	str	r3, [r2, #0]
}
 8004ede:	bf00      	nop
 8004ee0:	370c      	adds	r7, #12
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop
 8004eec:	20000d78 	.word	0x20000d78
 8004ef0:	20000de0 	.word	0x20000de0

08004ef4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b083      	sub	sp, #12
 8004ef8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004efa:	4b0b      	ldr	r3, [pc, #44]	@ (8004f28 <xTaskGetSchedulerState+0x34>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d102      	bne.n	8004f08 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004f02:	2301      	movs	r3, #1
 8004f04:	607b      	str	r3, [r7, #4]
 8004f06:	e008      	b.n	8004f1a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f08:	4b08      	ldr	r3, [pc, #32]	@ (8004f2c <xTaskGetSchedulerState+0x38>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d102      	bne.n	8004f16 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004f10:	2302      	movs	r3, #2
 8004f12:	607b      	str	r3, [r7, #4]
 8004f14:	e001      	b.n	8004f1a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004f16:	2300      	movs	r3, #0
 8004f18:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004f1a:	687b      	ldr	r3, [r7, #4]
	}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	370c      	adds	r7, #12
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr
 8004f28:	20000dcc 	.word	0x20000dcc
 8004f2c:	20000de8 	.word	0x20000de8

08004f30 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b086      	sub	sp, #24
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d058      	beq.n	8004ff8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004f46:	4b2f      	ldr	r3, [pc, #188]	@ (8005004 <xTaskPriorityDisinherit+0xd4>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	693a      	ldr	r2, [r7, #16]
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d00b      	beq.n	8004f68 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004f50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f54:	f383 8811 	msr	BASEPRI, r3
 8004f58:	f3bf 8f6f 	isb	sy
 8004f5c:	f3bf 8f4f 	dsb	sy
 8004f60:	60fb      	str	r3, [r7, #12]
}
 8004f62:	bf00      	nop
 8004f64:	bf00      	nop
 8004f66:	e7fd      	b.n	8004f64 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d10b      	bne.n	8004f88 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004f70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f74:	f383 8811 	msr	BASEPRI, r3
 8004f78:	f3bf 8f6f 	isb	sy
 8004f7c:	f3bf 8f4f 	dsb	sy
 8004f80:	60bb      	str	r3, [r7, #8]
}
 8004f82:	bf00      	nop
 8004f84:	bf00      	nop
 8004f86:	e7fd      	b.n	8004f84 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f8c:	1e5a      	subs	r2, r3, #1
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d02c      	beq.n	8004ff8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d128      	bne.n	8004ff8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	3304      	adds	r3, #4
 8004faa:	4618      	mov	r0, r3
 8004fac:	f7fe fc26 	bl	80037fc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fbc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fc8:	4b0f      	ldr	r3, [pc, #60]	@ (8005008 <xTaskPriorityDisinherit+0xd8>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d903      	bls.n	8004fd8 <xTaskPriorityDisinherit+0xa8>
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fd4:	4a0c      	ldr	r2, [pc, #48]	@ (8005008 <xTaskPriorityDisinherit+0xd8>)
 8004fd6:	6013      	str	r3, [r2, #0]
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fdc:	4613      	mov	r3, r2
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	4413      	add	r3, r2
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	4a09      	ldr	r2, [pc, #36]	@ (800500c <xTaskPriorityDisinherit+0xdc>)
 8004fe6:	441a      	add	r2, r3
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	3304      	adds	r3, #4
 8004fec:	4619      	mov	r1, r3
 8004fee:	4610      	mov	r0, r2
 8004ff0:	f7fe fba7 	bl	8003742 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004ff8:	697b      	ldr	r3, [r7, #20]
	}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3718      	adds	r7, #24
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	200008ec 	.word	0x200008ec
 8005008:	20000dc8 	.word	0x20000dc8
 800500c:	200008f0 	.word	0x200008f0

08005010 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b084      	sub	sp, #16
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800501a:	4b21      	ldr	r3, [pc, #132]	@ (80050a0 <prvAddCurrentTaskToDelayedList+0x90>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005020:	4b20      	ldr	r3, [pc, #128]	@ (80050a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	3304      	adds	r3, #4
 8005026:	4618      	mov	r0, r3
 8005028:	f7fe fbe8 	bl	80037fc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005032:	d10a      	bne.n	800504a <prvAddCurrentTaskToDelayedList+0x3a>
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d007      	beq.n	800504a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800503a:	4b1a      	ldr	r3, [pc, #104]	@ (80050a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	3304      	adds	r3, #4
 8005040:	4619      	mov	r1, r3
 8005042:	4819      	ldr	r0, [pc, #100]	@ (80050a8 <prvAddCurrentTaskToDelayedList+0x98>)
 8005044:	f7fe fb7d 	bl	8003742 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005048:	e026      	b.n	8005098 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800504a:	68fa      	ldr	r2, [r7, #12]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	4413      	add	r3, r2
 8005050:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005052:	4b14      	ldr	r3, [pc, #80]	@ (80050a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	68ba      	ldr	r2, [r7, #8]
 8005058:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800505a:	68ba      	ldr	r2, [r7, #8]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	429a      	cmp	r2, r3
 8005060:	d209      	bcs.n	8005076 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005062:	4b12      	ldr	r3, [pc, #72]	@ (80050ac <prvAddCurrentTaskToDelayedList+0x9c>)
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	4b0f      	ldr	r3, [pc, #60]	@ (80050a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	3304      	adds	r3, #4
 800506c:	4619      	mov	r1, r3
 800506e:	4610      	mov	r0, r2
 8005070:	f7fe fb8b 	bl	800378a <vListInsert>
}
 8005074:	e010      	b.n	8005098 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005076:	4b0e      	ldr	r3, [pc, #56]	@ (80050b0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	4b0a      	ldr	r3, [pc, #40]	@ (80050a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	3304      	adds	r3, #4
 8005080:	4619      	mov	r1, r3
 8005082:	4610      	mov	r0, r2
 8005084:	f7fe fb81 	bl	800378a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005088:	4b0a      	ldr	r3, [pc, #40]	@ (80050b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	68ba      	ldr	r2, [r7, #8]
 800508e:	429a      	cmp	r2, r3
 8005090:	d202      	bcs.n	8005098 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005092:	4a08      	ldr	r2, [pc, #32]	@ (80050b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	6013      	str	r3, [r2, #0]
}
 8005098:	bf00      	nop
 800509a:	3710      	adds	r7, #16
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}
 80050a0:	20000dc4 	.word	0x20000dc4
 80050a4:	200008ec 	.word	0x200008ec
 80050a8:	20000dac 	.word	0x20000dac
 80050ac:	20000d7c 	.word	0x20000d7c
 80050b0:	20000d78 	.word	0x20000d78
 80050b4:	20000de0 	.word	0x20000de0

080050b8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b08a      	sub	sp, #40	@ 0x28
 80050bc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80050be:	2300      	movs	r3, #0
 80050c0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80050c2:	f000 fad9 	bl	8005678 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80050c6:	4b1d      	ldr	r3, [pc, #116]	@ (800513c <xTimerCreateTimerTask+0x84>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d021      	beq.n	8005112 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80050ce:	2300      	movs	r3, #0
 80050d0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80050d2:	2300      	movs	r3, #0
 80050d4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80050d6:	1d3a      	adds	r2, r7, #4
 80050d8:	f107 0108 	add.w	r1, r7, #8
 80050dc:	f107 030c 	add.w	r3, r7, #12
 80050e0:	4618      	mov	r0, r3
 80050e2:	f7fe fae7 	bl	80036b4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80050e6:	6879      	ldr	r1, [r7, #4]
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	68fa      	ldr	r2, [r7, #12]
 80050ec:	9202      	str	r2, [sp, #8]
 80050ee:	9301      	str	r3, [sp, #4]
 80050f0:	2302      	movs	r3, #2
 80050f2:	9300      	str	r3, [sp, #0]
 80050f4:	2300      	movs	r3, #0
 80050f6:	460a      	mov	r2, r1
 80050f8:	4911      	ldr	r1, [pc, #68]	@ (8005140 <xTimerCreateTimerTask+0x88>)
 80050fa:	4812      	ldr	r0, [pc, #72]	@ (8005144 <xTimerCreateTimerTask+0x8c>)
 80050fc:	f7ff f8a0 	bl	8004240 <xTaskCreateStatic>
 8005100:	4603      	mov	r3, r0
 8005102:	4a11      	ldr	r2, [pc, #68]	@ (8005148 <xTimerCreateTimerTask+0x90>)
 8005104:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005106:	4b10      	ldr	r3, [pc, #64]	@ (8005148 <xTimerCreateTimerTask+0x90>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d001      	beq.n	8005112 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800510e:	2301      	movs	r3, #1
 8005110:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d10b      	bne.n	8005130 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005118:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800511c:	f383 8811 	msr	BASEPRI, r3
 8005120:	f3bf 8f6f 	isb	sy
 8005124:	f3bf 8f4f 	dsb	sy
 8005128:	613b      	str	r3, [r7, #16]
}
 800512a:	bf00      	nop
 800512c:	bf00      	nop
 800512e:	e7fd      	b.n	800512c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005130:	697b      	ldr	r3, [r7, #20]
}
 8005132:	4618      	mov	r0, r3
 8005134:	3718      	adds	r7, #24
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
 800513a:	bf00      	nop
 800513c:	20000e1c 	.word	0x20000e1c
 8005140:	08006160 	.word	0x08006160
 8005144:	0800526d 	.word	0x0800526d
 8005148:	20000e20 	.word	0x20000e20

0800514c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b08a      	sub	sp, #40	@ 0x28
 8005150:	af00      	add	r7, sp, #0
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	607a      	str	r2, [r7, #4]
 8005158:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800515a:	2300      	movs	r3, #0
 800515c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d10b      	bne.n	800517c <xTimerGenericCommand+0x30>
	__asm volatile
 8005164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005168:	f383 8811 	msr	BASEPRI, r3
 800516c:	f3bf 8f6f 	isb	sy
 8005170:	f3bf 8f4f 	dsb	sy
 8005174:	623b      	str	r3, [r7, #32]
}
 8005176:	bf00      	nop
 8005178:	bf00      	nop
 800517a:	e7fd      	b.n	8005178 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800517c:	4b19      	ldr	r3, [pc, #100]	@ (80051e4 <xTimerGenericCommand+0x98>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d02a      	beq.n	80051da <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	2b05      	cmp	r3, #5
 8005194:	dc18      	bgt.n	80051c8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005196:	f7ff fead 	bl	8004ef4 <xTaskGetSchedulerState>
 800519a:	4603      	mov	r3, r0
 800519c:	2b02      	cmp	r3, #2
 800519e:	d109      	bne.n	80051b4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80051a0:	4b10      	ldr	r3, [pc, #64]	@ (80051e4 <xTimerGenericCommand+0x98>)
 80051a2:	6818      	ldr	r0, [r3, #0]
 80051a4:	f107 0110 	add.w	r1, r7, #16
 80051a8:	2300      	movs	r3, #0
 80051aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051ac:	f7fe fc5a 	bl	8003a64 <xQueueGenericSend>
 80051b0:	6278      	str	r0, [r7, #36]	@ 0x24
 80051b2:	e012      	b.n	80051da <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80051b4:	4b0b      	ldr	r3, [pc, #44]	@ (80051e4 <xTimerGenericCommand+0x98>)
 80051b6:	6818      	ldr	r0, [r3, #0]
 80051b8:	f107 0110 	add.w	r1, r7, #16
 80051bc:	2300      	movs	r3, #0
 80051be:	2200      	movs	r2, #0
 80051c0:	f7fe fc50 	bl	8003a64 <xQueueGenericSend>
 80051c4:	6278      	str	r0, [r7, #36]	@ 0x24
 80051c6:	e008      	b.n	80051da <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80051c8:	4b06      	ldr	r3, [pc, #24]	@ (80051e4 <xTimerGenericCommand+0x98>)
 80051ca:	6818      	ldr	r0, [r3, #0]
 80051cc:	f107 0110 	add.w	r1, r7, #16
 80051d0:	2300      	movs	r3, #0
 80051d2:	683a      	ldr	r2, [r7, #0]
 80051d4:	f7fe fd48 	bl	8003c68 <xQueueGenericSendFromISR>
 80051d8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80051da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3728      	adds	r7, #40	@ 0x28
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}
 80051e4:	20000e1c 	.word	0x20000e1c

080051e8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b088      	sub	sp, #32
 80051ec:	af02      	add	r7, sp, #8
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80051f2:	4b1d      	ldr	r3, [pc, #116]	@ (8005268 <prvProcessExpiredTimer+0x80>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	68db      	ldr	r3, [r3, #12]
 80051fa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	3304      	adds	r3, #4
 8005200:	4618      	mov	r0, r3
 8005202:	f7fe fafb 	bl	80037fc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	69db      	ldr	r3, [r3, #28]
 800520a:	2b01      	cmp	r3, #1
 800520c:	d123      	bne.n	8005256 <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	699a      	ldr	r2, [r3, #24]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	18d1      	adds	r1, r2, r3
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	683a      	ldr	r2, [r7, #0]
 800521a:	6978      	ldr	r0, [r7, #20]
 800521c:	f000 f8cc 	bl	80053b8 <prvInsertTimerInActiveList>
 8005220:	4603      	mov	r3, r0
 8005222:	2b00      	cmp	r3, #0
 8005224:	d017      	beq.n	8005256 <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005226:	2300      	movs	r3, #0
 8005228:	9300      	str	r3, [sp, #0]
 800522a:	2300      	movs	r3, #0
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	2100      	movs	r1, #0
 8005230:	6978      	ldr	r0, [r7, #20]
 8005232:	f7ff ff8b 	bl	800514c <xTimerGenericCommand>
 8005236:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d10b      	bne.n	8005256 <prvProcessExpiredTimer+0x6e>
	__asm volatile
 800523e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005242:	f383 8811 	msr	BASEPRI, r3
 8005246:	f3bf 8f6f 	isb	sy
 800524a:	f3bf 8f4f 	dsb	sy
 800524e:	60fb      	str	r3, [r7, #12]
}
 8005250:	bf00      	nop
 8005252:	bf00      	nop
 8005254:	e7fd      	b.n	8005252 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800525a:	6978      	ldr	r0, [r7, #20]
 800525c:	4798      	blx	r3
}
 800525e:	bf00      	nop
 8005260:	3718      	adds	r7, #24
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
 8005266:	bf00      	nop
 8005268:	20000e14 	.word	0x20000e14

0800526c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b084      	sub	sp, #16
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005274:	f107 0308 	add.w	r3, r7, #8
 8005278:	4618      	mov	r0, r3
 800527a:	f000 f859 	bl	8005330 <prvGetNextExpireTime>
 800527e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	4619      	mov	r1, r3
 8005284:	68f8      	ldr	r0, [r7, #12]
 8005286:	f000 f805 	bl	8005294 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800528a:	f000 f8d7 	bl	800543c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800528e:	bf00      	nop
 8005290:	e7f0      	b.n	8005274 <prvTimerTask+0x8>
	...

08005294 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b084      	sub	sp, #16
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800529e:	f7ff fa29 	bl	80046f4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80052a2:	f107 0308 	add.w	r3, r7, #8
 80052a6:	4618      	mov	r0, r3
 80052a8:	f000 f866 	bl	8005378 <prvSampleTimeNow>
 80052ac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d130      	bne.n	8005316 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d10a      	bne.n	80052d0 <prvProcessTimerOrBlockTask+0x3c>
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	429a      	cmp	r2, r3
 80052c0:	d806      	bhi.n	80052d0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80052c2:	f7ff fa25 	bl	8004710 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80052c6:	68f9      	ldr	r1, [r7, #12]
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f7ff ff8d 	bl	80051e8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80052ce:	e024      	b.n	800531a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d008      	beq.n	80052e8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80052d6:	4b13      	ldr	r3, [pc, #76]	@ (8005324 <prvProcessTimerOrBlockTask+0x90>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	bf0c      	ite	eq
 80052e0:	2301      	moveq	r3, #1
 80052e2:	2300      	movne	r3, #0
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80052e8:	4b0f      	ldr	r3, [pc, #60]	@ (8005328 <prvProcessTimerOrBlockTask+0x94>)
 80052ea:	6818      	ldr	r0, [r3, #0]
 80052ec:	687a      	ldr	r2, [r7, #4]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	683a      	ldr	r2, [r7, #0]
 80052f4:	4619      	mov	r1, r3
 80052f6:	f7fe ff6f 	bl	80041d8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80052fa:	f7ff fa09 	bl	8004710 <xTaskResumeAll>
 80052fe:	4603      	mov	r3, r0
 8005300:	2b00      	cmp	r3, #0
 8005302:	d10a      	bne.n	800531a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005304:	4b09      	ldr	r3, [pc, #36]	@ (800532c <prvProcessTimerOrBlockTask+0x98>)
 8005306:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800530a:	601a      	str	r2, [r3, #0]
 800530c:	f3bf 8f4f 	dsb	sy
 8005310:	f3bf 8f6f 	isb	sy
}
 8005314:	e001      	b.n	800531a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005316:	f7ff f9fb 	bl	8004710 <xTaskResumeAll>
}
 800531a:	bf00      	nop
 800531c:	3710      	adds	r7, #16
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
 8005322:	bf00      	nop
 8005324:	20000e18 	.word	0x20000e18
 8005328:	20000e1c 	.word	0x20000e1c
 800532c:	e000ed04 	.word	0xe000ed04

08005330 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005330:	b480      	push	{r7}
 8005332:	b085      	sub	sp, #20
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005338:	4b0e      	ldr	r3, [pc, #56]	@ (8005374 <prvGetNextExpireTime+0x44>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	2b00      	cmp	r3, #0
 8005340:	bf0c      	ite	eq
 8005342:	2301      	moveq	r3, #1
 8005344:	2300      	movne	r3, #0
 8005346:	b2db      	uxtb	r3, r3
 8005348:	461a      	mov	r2, r3
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d105      	bne.n	8005362 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005356:	4b07      	ldr	r3, [pc, #28]	@ (8005374 <prvGetNextExpireTime+0x44>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	60fb      	str	r3, [r7, #12]
 8005360:	e001      	b.n	8005366 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005362:	2300      	movs	r3, #0
 8005364:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005366:	68fb      	ldr	r3, [r7, #12]
}
 8005368:	4618      	mov	r0, r3
 800536a:	3714      	adds	r7, #20
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr
 8005374:	20000e14 	.word	0x20000e14

08005378 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b084      	sub	sp, #16
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005380:	f7ff fa64 	bl	800484c <xTaskGetTickCount>
 8005384:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005386:	4b0b      	ldr	r3, [pc, #44]	@ (80053b4 <prvSampleTimeNow+0x3c>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	68fa      	ldr	r2, [r7, #12]
 800538c:	429a      	cmp	r2, r3
 800538e:	d205      	bcs.n	800539c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005390:	f000 f910 	bl	80055b4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	601a      	str	r2, [r3, #0]
 800539a:	e002      	b.n	80053a2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80053a2:	4a04      	ldr	r2, [pc, #16]	@ (80053b4 <prvSampleTimeNow+0x3c>)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80053a8:	68fb      	ldr	r3, [r7, #12]
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3710      	adds	r7, #16
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop
 80053b4:	20000e24 	.word	0x20000e24

080053b8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b086      	sub	sp, #24
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	607a      	str	r2, [r7, #4]
 80053c4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80053c6:	2300      	movs	r3, #0
 80053c8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	68ba      	ldr	r2, [r7, #8]
 80053ce:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	68fa      	ldr	r2, [r7, #12]
 80053d4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80053d6:	68ba      	ldr	r2, [r7, #8]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	429a      	cmp	r2, r3
 80053dc:	d812      	bhi.n	8005404 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	1ad2      	subs	r2, r2, r3
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	699b      	ldr	r3, [r3, #24]
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d302      	bcc.n	80053f2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80053ec:	2301      	movs	r3, #1
 80053ee:	617b      	str	r3, [r7, #20]
 80053f0:	e01b      	b.n	800542a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80053f2:	4b10      	ldr	r3, [pc, #64]	@ (8005434 <prvInsertTimerInActiveList+0x7c>)
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	3304      	adds	r3, #4
 80053fa:	4619      	mov	r1, r3
 80053fc:	4610      	mov	r0, r2
 80053fe:	f7fe f9c4 	bl	800378a <vListInsert>
 8005402:	e012      	b.n	800542a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	429a      	cmp	r2, r3
 800540a:	d206      	bcs.n	800541a <prvInsertTimerInActiveList+0x62>
 800540c:	68ba      	ldr	r2, [r7, #8]
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	429a      	cmp	r2, r3
 8005412:	d302      	bcc.n	800541a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005414:	2301      	movs	r3, #1
 8005416:	617b      	str	r3, [r7, #20]
 8005418:	e007      	b.n	800542a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800541a:	4b07      	ldr	r3, [pc, #28]	@ (8005438 <prvInsertTimerInActiveList+0x80>)
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	3304      	adds	r3, #4
 8005422:	4619      	mov	r1, r3
 8005424:	4610      	mov	r0, r2
 8005426:	f7fe f9b0 	bl	800378a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800542a:	697b      	ldr	r3, [r7, #20]
}
 800542c:	4618      	mov	r0, r3
 800542e:	3718      	adds	r7, #24
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}
 8005434:	20000e18 	.word	0x20000e18
 8005438:	20000e14 	.word	0x20000e14

0800543c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b08e      	sub	sp, #56	@ 0x38
 8005440:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005442:	e0a5      	b.n	8005590 <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2b00      	cmp	r3, #0
 8005448:	da19      	bge.n	800547e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800544a:	1d3b      	adds	r3, r7, #4
 800544c:	3304      	adds	r3, #4
 800544e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005452:	2b00      	cmp	r3, #0
 8005454:	d10b      	bne.n	800546e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800545a:	f383 8811 	msr	BASEPRI, r3
 800545e:	f3bf 8f6f 	isb	sy
 8005462:	f3bf 8f4f 	dsb	sy
 8005466:	61fb      	str	r3, [r7, #28]
}
 8005468:	bf00      	nop
 800546a:	bf00      	nop
 800546c:	e7fd      	b.n	800546a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800546e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005474:	6850      	ldr	r0, [r2, #4]
 8005476:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005478:	6892      	ldr	r2, [r2, #8]
 800547a:	4611      	mov	r1, r2
 800547c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2b00      	cmp	r3, #0
 8005482:	f2c0 8085 	blt.w	8005590 <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800548a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800548c:	695b      	ldr	r3, [r3, #20]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d004      	beq.n	800549c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005494:	3304      	adds	r3, #4
 8005496:	4618      	mov	r0, r3
 8005498:	f7fe f9b0 	bl	80037fc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800549c:	463b      	mov	r3, r7
 800549e:	4618      	mov	r0, r3
 80054a0:	f7ff ff6a 	bl	8005378 <prvSampleTimeNow>
 80054a4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2b09      	cmp	r3, #9
 80054aa:	d86c      	bhi.n	8005586 <prvProcessReceivedCommands+0x14a>
 80054ac:	a201      	add	r2, pc, #4	@ (adr r2, 80054b4 <prvProcessReceivedCommands+0x78>)
 80054ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b2:	bf00      	nop
 80054b4:	080054dd 	.word	0x080054dd
 80054b8:	080054dd 	.word	0x080054dd
 80054bc:	080054dd 	.word	0x080054dd
 80054c0:	08005587 	.word	0x08005587
 80054c4:	0800553b 	.word	0x0800553b
 80054c8:	08005575 	.word	0x08005575
 80054cc:	080054dd 	.word	0x080054dd
 80054d0:	080054dd 	.word	0x080054dd
 80054d4:	08005587 	.word	0x08005587
 80054d8:	0800553b 	.word	0x0800553b
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80054dc:	68ba      	ldr	r2, [r7, #8]
 80054de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054e0:	699b      	ldr	r3, [r3, #24]
 80054e2:	18d1      	adds	r1, r2, r3
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80054ea:	f7ff ff65 	bl	80053b8 <prvInsertTimerInActiveList>
 80054ee:	4603      	mov	r3, r0
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d04a      	beq.n	800558a <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80054f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80054fa:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80054fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054fe:	69db      	ldr	r3, [r3, #28]
 8005500:	2b01      	cmp	r3, #1
 8005502:	d142      	bne.n	800558a <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005504:	68ba      	ldr	r2, [r7, #8]
 8005506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005508:	699b      	ldr	r3, [r3, #24]
 800550a:	441a      	add	r2, r3
 800550c:	2300      	movs	r3, #0
 800550e:	9300      	str	r3, [sp, #0]
 8005510:	2300      	movs	r3, #0
 8005512:	2100      	movs	r1, #0
 8005514:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005516:	f7ff fe19 	bl	800514c <xTimerGenericCommand>
 800551a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800551c:	6a3b      	ldr	r3, [r7, #32]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d133      	bne.n	800558a <prvProcessReceivedCommands+0x14e>
	__asm volatile
 8005522:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005526:	f383 8811 	msr	BASEPRI, r3
 800552a:	f3bf 8f6f 	isb	sy
 800552e:	f3bf 8f4f 	dsb	sy
 8005532:	61bb      	str	r3, [r7, #24]
}
 8005534:	bf00      	nop
 8005536:	bf00      	nop
 8005538:	e7fd      	b.n	8005536 <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800553a:	68ba      	ldr	r2, [r7, #8]
 800553c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800553e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005542:	699b      	ldr	r3, [r3, #24]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d10b      	bne.n	8005560 <prvProcessReceivedCommands+0x124>
	__asm volatile
 8005548:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800554c:	f383 8811 	msr	BASEPRI, r3
 8005550:	f3bf 8f6f 	isb	sy
 8005554:	f3bf 8f4f 	dsb	sy
 8005558:	617b      	str	r3, [r7, #20]
}
 800555a:	bf00      	nop
 800555c:	bf00      	nop
 800555e:	e7fd      	b.n	800555c <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005562:	699a      	ldr	r2, [r3, #24]
 8005564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005566:	18d1      	adds	r1, r2, r3
 8005568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800556a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800556c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800556e:	f7ff ff23 	bl	80053b8 <prvInsertTimerInActiveList>
					break;
 8005572:	e00d      	b.n	8005590 <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005576:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800557a:	2b00      	cmp	r3, #0
 800557c:	d107      	bne.n	800558e <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 800557e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005580:	f000 fbd4 	bl	8005d2c <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005584:	e003      	b.n	800558e <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 8005586:	bf00      	nop
 8005588:	e002      	b.n	8005590 <prvProcessReceivedCommands+0x154>
					break;
 800558a:	bf00      	nop
 800558c:	e000      	b.n	8005590 <prvProcessReceivedCommands+0x154>
					break;
 800558e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005590:	4b07      	ldr	r3, [pc, #28]	@ (80055b0 <prvProcessReceivedCommands+0x174>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	1d39      	adds	r1, r7, #4
 8005596:	2200      	movs	r2, #0
 8005598:	4618      	mov	r0, r3
 800559a:	f7fe fc01 	bl	8003da0 <xQueueReceive>
 800559e:	4603      	mov	r3, r0
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	f47f af4f 	bne.w	8005444 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80055a6:	bf00      	nop
 80055a8:	bf00      	nop
 80055aa:	3730      	adds	r7, #48	@ 0x30
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}
 80055b0:	20000e1c 	.word	0x20000e1c

080055b4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b088      	sub	sp, #32
 80055b8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80055ba:	e046      	b.n	800564a <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80055bc:	4b2c      	ldr	r3, [pc, #176]	@ (8005670 <prvSwitchTimerLists+0xbc>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80055c6:	4b2a      	ldr	r3, [pc, #168]	@ (8005670 <prvSwitchTimerLists+0xbc>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	3304      	adds	r3, #4
 80055d4:	4618      	mov	r0, r3
 80055d6:	f7fe f911 	bl	80037fc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055de:	68f8      	ldr	r0, [r7, #12]
 80055e0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	69db      	ldr	r3, [r3, #28]
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d12f      	bne.n	800564a <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	699b      	ldr	r3, [r3, #24]
 80055ee:	693a      	ldr	r2, [r7, #16]
 80055f0:	4413      	add	r3, r2
 80055f2:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80055f4:	68ba      	ldr	r2, [r7, #8]
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d90e      	bls.n	800561a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	68ba      	ldr	r2, [r7, #8]
 8005600:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	68fa      	ldr	r2, [r7, #12]
 8005606:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005608:	4b19      	ldr	r3, [pc, #100]	@ (8005670 <prvSwitchTimerLists+0xbc>)
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	3304      	adds	r3, #4
 8005610:	4619      	mov	r1, r3
 8005612:	4610      	mov	r0, r2
 8005614:	f7fe f8b9 	bl	800378a <vListInsert>
 8005618:	e017      	b.n	800564a <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800561a:	2300      	movs	r3, #0
 800561c:	9300      	str	r3, [sp, #0]
 800561e:	2300      	movs	r3, #0
 8005620:	693a      	ldr	r2, [r7, #16]
 8005622:	2100      	movs	r1, #0
 8005624:	68f8      	ldr	r0, [r7, #12]
 8005626:	f7ff fd91 	bl	800514c <xTimerGenericCommand>
 800562a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d10b      	bne.n	800564a <prvSwitchTimerLists+0x96>
	__asm volatile
 8005632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005636:	f383 8811 	msr	BASEPRI, r3
 800563a:	f3bf 8f6f 	isb	sy
 800563e:	f3bf 8f4f 	dsb	sy
 8005642:	603b      	str	r3, [r7, #0]
}
 8005644:	bf00      	nop
 8005646:	bf00      	nop
 8005648:	e7fd      	b.n	8005646 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800564a:	4b09      	ldr	r3, [pc, #36]	@ (8005670 <prvSwitchTimerLists+0xbc>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d1b3      	bne.n	80055bc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005654:	4b06      	ldr	r3, [pc, #24]	@ (8005670 <prvSwitchTimerLists+0xbc>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800565a:	4b06      	ldr	r3, [pc, #24]	@ (8005674 <prvSwitchTimerLists+0xc0>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a04      	ldr	r2, [pc, #16]	@ (8005670 <prvSwitchTimerLists+0xbc>)
 8005660:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005662:	4a04      	ldr	r2, [pc, #16]	@ (8005674 <prvSwitchTimerLists+0xc0>)
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	6013      	str	r3, [r2, #0]
}
 8005668:	bf00      	nop
 800566a:	3718      	adds	r7, #24
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}
 8005670:	20000e14 	.word	0x20000e14
 8005674:	20000e18 	.word	0x20000e18

08005678 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b082      	sub	sp, #8
 800567c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800567e:	f000 f96b 	bl	8005958 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005682:	4b15      	ldr	r3, [pc, #84]	@ (80056d8 <prvCheckForValidListAndQueue+0x60>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d120      	bne.n	80056cc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800568a:	4814      	ldr	r0, [pc, #80]	@ (80056dc <prvCheckForValidListAndQueue+0x64>)
 800568c:	f7fe f82c 	bl	80036e8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005690:	4813      	ldr	r0, [pc, #76]	@ (80056e0 <prvCheckForValidListAndQueue+0x68>)
 8005692:	f7fe f829 	bl	80036e8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005696:	4b13      	ldr	r3, [pc, #76]	@ (80056e4 <prvCheckForValidListAndQueue+0x6c>)
 8005698:	4a10      	ldr	r2, [pc, #64]	@ (80056dc <prvCheckForValidListAndQueue+0x64>)
 800569a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800569c:	4b12      	ldr	r3, [pc, #72]	@ (80056e8 <prvCheckForValidListAndQueue+0x70>)
 800569e:	4a10      	ldr	r2, [pc, #64]	@ (80056e0 <prvCheckForValidListAndQueue+0x68>)
 80056a0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80056a2:	2300      	movs	r3, #0
 80056a4:	9300      	str	r3, [sp, #0]
 80056a6:	4b11      	ldr	r3, [pc, #68]	@ (80056ec <prvCheckForValidListAndQueue+0x74>)
 80056a8:	4a11      	ldr	r2, [pc, #68]	@ (80056f0 <prvCheckForValidListAndQueue+0x78>)
 80056aa:	2110      	movs	r1, #16
 80056ac:	200a      	movs	r0, #10
 80056ae:	f7fe f939 	bl	8003924 <xQueueGenericCreateStatic>
 80056b2:	4603      	mov	r3, r0
 80056b4:	4a08      	ldr	r2, [pc, #32]	@ (80056d8 <prvCheckForValidListAndQueue+0x60>)
 80056b6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80056b8:	4b07      	ldr	r3, [pc, #28]	@ (80056d8 <prvCheckForValidListAndQueue+0x60>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d005      	beq.n	80056cc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80056c0:	4b05      	ldr	r3, [pc, #20]	@ (80056d8 <prvCheckForValidListAndQueue+0x60>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	490b      	ldr	r1, [pc, #44]	@ (80056f4 <prvCheckForValidListAndQueue+0x7c>)
 80056c6:	4618      	mov	r0, r3
 80056c8:	f7fe fd5c 	bl	8004184 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80056cc:	f000 f976 	bl	80059bc <vPortExitCritical>
}
 80056d0:	bf00      	nop
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	bf00      	nop
 80056d8:	20000e1c 	.word	0x20000e1c
 80056dc:	20000dec 	.word	0x20000dec
 80056e0:	20000e00 	.word	0x20000e00
 80056e4:	20000e14 	.word	0x20000e14
 80056e8:	20000e18 	.word	0x20000e18
 80056ec:	20000ec8 	.word	0x20000ec8
 80056f0:	20000e28 	.word	0x20000e28
 80056f4:	08006168 	.word	0x08006168

080056f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80056f8:	b480      	push	{r7}
 80056fa:	b085      	sub	sp, #20
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	3b04      	subs	r3, #4
 8005708:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005710:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	3b04      	subs	r3, #4
 8005716:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	f023 0201 	bic.w	r2, r3, #1
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	3b04      	subs	r3, #4
 8005726:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005728:	4a0c      	ldr	r2, [pc, #48]	@ (800575c <pxPortInitialiseStack+0x64>)
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	3b14      	subs	r3, #20
 8005732:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005734:	687a      	ldr	r2, [r7, #4]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	3b04      	subs	r3, #4
 800573e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f06f 0202 	mvn.w	r2, #2
 8005746:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	3b20      	subs	r3, #32
 800574c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800574e:	68fb      	ldr	r3, [r7, #12]
}
 8005750:	4618      	mov	r0, r3
 8005752:	3714      	adds	r7, #20
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr
 800575c:	08005761 	.word	0x08005761

08005760 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005760:	b480      	push	{r7}
 8005762:	b085      	sub	sp, #20
 8005764:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005766:	2300      	movs	r3, #0
 8005768:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800576a:	4b13      	ldr	r3, [pc, #76]	@ (80057b8 <prvTaskExitError+0x58>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005772:	d00b      	beq.n	800578c <prvTaskExitError+0x2c>
	__asm volatile
 8005774:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005778:	f383 8811 	msr	BASEPRI, r3
 800577c:	f3bf 8f6f 	isb	sy
 8005780:	f3bf 8f4f 	dsb	sy
 8005784:	60fb      	str	r3, [r7, #12]
}
 8005786:	bf00      	nop
 8005788:	bf00      	nop
 800578a:	e7fd      	b.n	8005788 <prvTaskExitError+0x28>
	__asm volatile
 800578c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005790:	f383 8811 	msr	BASEPRI, r3
 8005794:	f3bf 8f6f 	isb	sy
 8005798:	f3bf 8f4f 	dsb	sy
 800579c:	60bb      	str	r3, [r7, #8]
}
 800579e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80057a0:	bf00      	nop
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d0fc      	beq.n	80057a2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80057a8:	bf00      	nop
 80057aa:	bf00      	nop
 80057ac:	3714      	adds	r7, #20
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr
 80057b6:	bf00      	nop
 80057b8:	2000000c 	.word	0x2000000c
 80057bc:	00000000 	.word	0x00000000

080057c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80057c0:	4b07      	ldr	r3, [pc, #28]	@ (80057e0 <pxCurrentTCBConst2>)
 80057c2:	6819      	ldr	r1, [r3, #0]
 80057c4:	6808      	ldr	r0, [r1, #0]
 80057c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057ca:	f380 8809 	msr	PSP, r0
 80057ce:	f3bf 8f6f 	isb	sy
 80057d2:	f04f 0000 	mov.w	r0, #0
 80057d6:	f380 8811 	msr	BASEPRI, r0
 80057da:	4770      	bx	lr
 80057dc:	f3af 8000 	nop.w

080057e0 <pxCurrentTCBConst2>:
 80057e0:	200008ec 	.word	0x200008ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80057e4:	bf00      	nop
 80057e6:	bf00      	nop

080057e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80057e8:	4808      	ldr	r0, [pc, #32]	@ (800580c <prvPortStartFirstTask+0x24>)
 80057ea:	6800      	ldr	r0, [r0, #0]
 80057ec:	6800      	ldr	r0, [r0, #0]
 80057ee:	f380 8808 	msr	MSP, r0
 80057f2:	f04f 0000 	mov.w	r0, #0
 80057f6:	f380 8814 	msr	CONTROL, r0
 80057fa:	b662      	cpsie	i
 80057fc:	b661      	cpsie	f
 80057fe:	f3bf 8f4f 	dsb	sy
 8005802:	f3bf 8f6f 	isb	sy
 8005806:	df00      	svc	0
 8005808:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800580a:	bf00      	nop
 800580c:	e000ed08 	.word	0xe000ed08

08005810 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b086      	sub	sp, #24
 8005814:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005816:	4b47      	ldr	r3, [pc, #284]	@ (8005934 <xPortStartScheduler+0x124>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a47      	ldr	r2, [pc, #284]	@ (8005938 <xPortStartScheduler+0x128>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d10b      	bne.n	8005838 <xPortStartScheduler+0x28>
	__asm volatile
 8005820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005824:	f383 8811 	msr	BASEPRI, r3
 8005828:	f3bf 8f6f 	isb	sy
 800582c:	f3bf 8f4f 	dsb	sy
 8005830:	613b      	str	r3, [r7, #16]
}
 8005832:	bf00      	nop
 8005834:	bf00      	nop
 8005836:	e7fd      	b.n	8005834 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005838:	4b3e      	ldr	r3, [pc, #248]	@ (8005934 <xPortStartScheduler+0x124>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a3f      	ldr	r2, [pc, #252]	@ (800593c <xPortStartScheduler+0x12c>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d10b      	bne.n	800585a <xPortStartScheduler+0x4a>
	__asm volatile
 8005842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005846:	f383 8811 	msr	BASEPRI, r3
 800584a:	f3bf 8f6f 	isb	sy
 800584e:	f3bf 8f4f 	dsb	sy
 8005852:	60fb      	str	r3, [r7, #12]
}
 8005854:	bf00      	nop
 8005856:	bf00      	nop
 8005858:	e7fd      	b.n	8005856 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800585a:	4b39      	ldr	r3, [pc, #228]	@ (8005940 <xPortStartScheduler+0x130>)
 800585c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	b2db      	uxtb	r3, r3
 8005864:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	22ff      	movs	r2, #255	@ 0xff
 800586a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	b2db      	uxtb	r3, r3
 8005872:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005874:	78fb      	ldrb	r3, [r7, #3]
 8005876:	b2db      	uxtb	r3, r3
 8005878:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800587c:	b2da      	uxtb	r2, r3
 800587e:	4b31      	ldr	r3, [pc, #196]	@ (8005944 <xPortStartScheduler+0x134>)
 8005880:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005882:	4b31      	ldr	r3, [pc, #196]	@ (8005948 <xPortStartScheduler+0x138>)
 8005884:	2207      	movs	r2, #7
 8005886:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005888:	e009      	b.n	800589e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800588a:	4b2f      	ldr	r3, [pc, #188]	@ (8005948 <xPortStartScheduler+0x138>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	3b01      	subs	r3, #1
 8005890:	4a2d      	ldr	r2, [pc, #180]	@ (8005948 <xPortStartScheduler+0x138>)
 8005892:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005894:	78fb      	ldrb	r3, [r7, #3]
 8005896:	b2db      	uxtb	r3, r3
 8005898:	005b      	lsls	r3, r3, #1
 800589a:	b2db      	uxtb	r3, r3
 800589c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800589e:	78fb      	ldrb	r3, [r7, #3]
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058a6:	2b80      	cmp	r3, #128	@ 0x80
 80058a8:	d0ef      	beq.n	800588a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80058aa:	4b27      	ldr	r3, [pc, #156]	@ (8005948 <xPortStartScheduler+0x138>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f1c3 0307 	rsb	r3, r3, #7
 80058b2:	2b04      	cmp	r3, #4
 80058b4:	d00b      	beq.n	80058ce <xPortStartScheduler+0xbe>
	__asm volatile
 80058b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058ba:	f383 8811 	msr	BASEPRI, r3
 80058be:	f3bf 8f6f 	isb	sy
 80058c2:	f3bf 8f4f 	dsb	sy
 80058c6:	60bb      	str	r3, [r7, #8]
}
 80058c8:	bf00      	nop
 80058ca:	bf00      	nop
 80058cc:	e7fd      	b.n	80058ca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80058ce:	4b1e      	ldr	r3, [pc, #120]	@ (8005948 <xPortStartScheduler+0x138>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	021b      	lsls	r3, r3, #8
 80058d4:	4a1c      	ldr	r2, [pc, #112]	@ (8005948 <xPortStartScheduler+0x138>)
 80058d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80058d8:	4b1b      	ldr	r3, [pc, #108]	@ (8005948 <xPortStartScheduler+0x138>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80058e0:	4a19      	ldr	r2, [pc, #100]	@ (8005948 <xPortStartScheduler+0x138>)
 80058e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	b2da      	uxtb	r2, r3
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80058ec:	4b17      	ldr	r3, [pc, #92]	@ (800594c <xPortStartScheduler+0x13c>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a16      	ldr	r2, [pc, #88]	@ (800594c <xPortStartScheduler+0x13c>)
 80058f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80058f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80058f8:	4b14      	ldr	r3, [pc, #80]	@ (800594c <xPortStartScheduler+0x13c>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a13      	ldr	r2, [pc, #76]	@ (800594c <xPortStartScheduler+0x13c>)
 80058fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005902:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005904:	f000 f8da 	bl	8005abc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005908:	4b11      	ldr	r3, [pc, #68]	@ (8005950 <xPortStartScheduler+0x140>)
 800590a:	2200      	movs	r2, #0
 800590c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800590e:	f000 f8f9 	bl	8005b04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005912:	4b10      	ldr	r3, [pc, #64]	@ (8005954 <xPortStartScheduler+0x144>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a0f      	ldr	r2, [pc, #60]	@ (8005954 <xPortStartScheduler+0x144>)
 8005918:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800591c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800591e:	f7ff ff63 	bl	80057e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005922:	f7ff f863 	bl	80049ec <vTaskSwitchContext>
	prvTaskExitError();
 8005926:	f7ff ff1b 	bl	8005760 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800592a:	2300      	movs	r3, #0
}
 800592c:	4618      	mov	r0, r3
 800592e:	3718      	adds	r7, #24
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}
 8005934:	e000ed00 	.word	0xe000ed00
 8005938:	410fc271 	.word	0x410fc271
 800593c:	410fc270 	.word	0x410fc270
 8005940:	e000e400 	.word	0xe000e400
 8005944:	20000f18 	.word	0x20000f18
 8005948:	20000f1c 	.word	0x20000f1c
 800594c:	e000ed20 	.word	0xe000ed20
 8005950:	2000000c 	.word	0x2000000c
 8005954:	e000ef34 	.word	0xe000ef34

08005958 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
	__asm volatile
 800595e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005962:	f383 8811 	msr	BASEPRI, r3
 8005966:	f3bf 8f6f 	isb	sy
 800596a:	f3bf 8f4f 	dsb	sy
 800596e:	607b      	str	r3, [r7, #4]
}
 8005970:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005972:	4b10      	ldr	r3, [pc, #64]	@ (80059b4 <vPortEnterCritical+0x5c>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	3301      	adds	r3, #1
 8005978:	4a0e      	ldr	r2, [pc, #56]	@ (80059b4 <vPortEnterCritical+0x5c>)
 800597a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800597c:	4b0d      	ldr	r3, [pc, #52]	@ (80059b4 <vPortEnterCritical+0x5c>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	2b01      	cmp	r3, #1
 8005982:	d110      	bne.n	80059a6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005984:	4b0c      	ldr	r3, [pc, #48]	@ (80059b8 <vPortEnterCritical+0x60>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	b2db      	uxtb	r3, r3
 800598a:	2b00      	cmp	r3, #0
 800598c:	d00b      	beq.n	80059a6 <vPortEnterCritical+0x4e>
	__asm volatile
 800598e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005992:	f383 8811 	msr	BASEPRI, r3
 8005996:	f3bf 8f6f 	isb	sy
 800599a:	f3bf 8f4f 	dsb	sy
 800599e:	603b      	str	r3, [r7, #0]
}
 80059a0:	bf00      	nop
 80059a2:	bf00      	nop
 80059a4:	e7fd      	b.n	80059a2 <vPortEnterCritical+0x4a>
	}
}
 80059a6:	bf00      	nop
 80059a8:	370c      	adds	r7, #12
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr
 80059b2:	bf00      	nop
 80059b4:	2000000c 	.word	0x2000000c
 80059b8:	e000ed04 	.word	0xe000ed04

080059bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80059bc:	b480      	push	{r7}
 80059be:	b083      	sub	sp, #12
 80059c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80059c2:	4b12      	ldr	r3, [pc, #72]	@ (8005a0c <vPortExitCritical+0x50>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d10b      	bne.n	80059e2 <vPortExitCritical+0x26>
	__asm volatile
 80059ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059ce:	f383 8811 	msr	BASEPRI, r3
 80059d2:	f3bf 8f6f 	isb	sy
 80059d6:	f3bf 8f4f 	dsb	sy
 80059da:	607b      	str	r3, [r7, #4]
}
 80059dc:	bf00      	nop
 80059de:	bf00      	nop
 80059e0:	e7fd      	b.n	80059de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80059e2:	4b0a      	ldr	r3, [pc, #40]	@ (8005a0c <vPortExitCritical+0x50>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	3b01      	subs	r3, #1
 80059e8:	4a08      	ldr	r2, [pc, #32]	@ (8005a0c <vPortExitCritical+0x50>)
 80059ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80059ec:	4b07      	ldr	r3, [pc, #28]	@ (8005a0c <vPortExitCritical+0x50>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d105      	bne.n	8005a00 <vPortExitCritical+0x44>
 80059f4:	2300      	movs	r3, #0
 80059f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	f383 8811 	msr	BASEPRI, r3
}
 80059fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005a00:	bf00      	nop
 8005a02:	370c      	adds	r7, #12
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr
 8005a0c:	2000000c 	.word	0x2000000c

08005a10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005a10:	f3ef 8009 	mrs	r0, PSP
 8005a14:	f3bf 8f6f 	isb	sy
 8005a18:	4b15      	ldr	r3, [pc, #84]	@ (8005a70 <pxCurrentTCBConst>)
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	f01e 0f10 	tst.w	lr, #16
 8005a20:	bf08      	it	eq
 8005a22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005a26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a2a:	6010      	str	r0, [r2, #0]
 8005a2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005a30:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005a34:	f380 8811 	msr	BASEPRI, r0
 8005a38:	f3bf 8f4f 	dsb	sy
 8005a3c:	f3bf 8f6f 	isb	sy
 8005a40:	f7fe ffd4 	bl	80049ec <vTaskSwitchContext>
 8005a44:	f04f 0000 	mov.w	r0, #0
 8005a48:	f380 8811 	msr	BASEPRI, r0
 8005a4c:	bc09      	pop	{r0, r3}
 8005a4e:	6819      	ldr	r1, [r3, #0]
 8005a50:	6808      	ldr	r0, [r1, #0]
 8005a52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a56:	f01e 0f10 	tst.w	lr, #16
 8005a5a:	bf08      	it	eq
 8005a5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005a60:	f380 8809 	msr	PSP, r0
 8005a64:	f3bf 8f6f 	isb	sy
 8005a68:	4770      	bx	lr
 8005a6a:	bf00      	nop
 8005a6c:	f3af 8000 	nop.w

08005a70 <pxCurrentTCBConst>:
 8005a70:	200008ec 	.word	0x200008ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005a74:	bf00      	nop
 8005a76:	bf00      	nop

08005a78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b082      	sub	sp, #8
 8005a7c:	af00      	add	r7, sp, #0
	__asm volatile
 8005a7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a82:	f383 8811 	msr	BASEPRI, r3
 8005a86:	f3bf 8f6f 	isb	sy
 8005a8a:	f3bf 8f4f 	dsb	sy
 8005a8e:	607b      	str	r3, [r7, #4]
}
 8005a90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005a92:	f7fe feeb 	bl	800486c <xTaskIncrementTick>
 8005a96:	4603      	mov	r3, r0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d003      	beq.n	8005aa4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005a9c:	4b06      	ldr	r3, [pc, #24]	@ (8005ab8 <SysTick_Handler+0x40>)
 8005a9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005aa2:	601a      	str	r2, [r3, #0]
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	f383 8811 	msr	BASEPRI, r3
}
 8005aae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005ab0:	bf00      	nop
 8005ab2:	3708      	adds	r7, #8
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}
 8005ab8:	e000ed04 	.word	0xe000ed04

08005abc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005abc:	b480      	push	{r7}
 8005abe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005ac0:	4b0b      	ldr	r3, [pc, #44]	@ (8005af0 <vPortSetupTimerInterrupt+0x34>)
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005ac6:	4b0b      	ldr	r3, [pc, #44]	@ (8005af4 <vPortSetupTimerInterrupt+0x38>)
 8005ac8:	2200      	movs	r2, #0
 8005aca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005acc:	4b0a      	ldr	r3, [pc, #40]	@ (8005af8 <vPortSetupTimerInterrupt+0x3c>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a0a      	ldr	r2, [pc, #40]	@ (8005afc <vPortSetupTimerInterrupt+0x40>)
 8005ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ad6:	099b      	lsrs	r3, r3, #6
 8005ad8:	4a09      	ldr	r2, [pc, #36]	@ (8005b00 <vPortSetupTimerInterrupt+0x44>)
 8005ada:	3b01      	subs	r3, #1
 8005adc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005ade:	4b04      	ldr	r3, [pc, #16]	@ (8005af0 <vPortSetupTimerInterrupt+0x34>)
 8005ae0:	2207      	movs	r2, #7
 8005ae2:	601a      	str	r2, [r3, #0]
}
 8005ae4:	bf00      	nop
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr
 8005aee:	bf00      	nop
 8005af0:	e000e010 	.word	0xe000e010
 8005af4:	e000e018 	.word	0xe000e018
 8005af8:	20000000 	.word	0x20000000
 8005afc:	10624dd3 	.word	0x10624dd3
 8005b00:	e000e014 	.word	0xe000e014

08005b04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005b04:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005b14 <vPortEnableVFP+0x10>
 8005b08:	6801      	ldr	r1, [r0, #0]
 8005b0a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005b0e:	6001      	str	r1, [r0, #0]
 8005b10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005b12:	bf00      	nop
 8005b14:	e000ed88 	.word	0xe000ed88

08005b18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005b18:	b480      	push	{r7}
 8005b1a:	b085      	sub	sp, #20
 8005b1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005b1e:	f3ef 8305 	mrs	r3, IPSR
 8005b22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2b0f      	cmp	r3, #15
 8005b28:	d915      	bls.n	8005b56 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005b2a:	4a18      	ldr	r2, [pc, #96]	@ (8005b8c <vPortValidateInterruptPriority+0x74>)
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	4413      	add	r3, r2
 8005b30:	781b      	ldrb	r3, [r3, #0]
 8005b32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005b34:	4b16      	ldr	r3, [pc, #88]	@ (8005b90 <vPortValidateInterruptPriority+0x78>)
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	7afa      	ldrb	r2, [r7, #11]
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d20b      	bcs.n	8005b56 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005b3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b42:	f383 8811 	msr	BASEPRI, r3
 8005b46:	f3bf 8f6f 	isb	sy
 8005b4a:	f3bf 8f4f 	dsb	sy
 8005b4e:	607b      	str	r3, [r7, #4]
}
 8005b50:	bf00      	nop
 8005b52:	bf00      	nop
 8005b54:	e7fd      	b.n	8005b52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005b56:	4b0f      	ldr	r3, [pc, #60]	@ (8005b94 <vPortValidateInterruptPriority+0x7c>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005b5e:	4b0e      	ldr	r3, [pc, #56]	@ (8005b98 <vPortValidateInterruptPriority+0x80>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d90b      	bls.n	8005b7e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005b66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b6a:	f383 8811 	msr	BASEPRI, r3
 8005b6e:	f3bf 8f6f 	isb	sy
 8005b72:	f3bf 8f4f 	dsb	sy
 8005b76:	603b      	str	r3, [r7, #0]
}
 8005b78:	bf00      	nop
 8005b7a:	bf00      	nop
 8005b7c:	e7fd      	b.n	8005b7a <vPortValidateInterruptPriority+0x62>
	}
 8005b7e:	bf00      	nop
 8005b80:	3714      	adds	r7, #20
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr
 8005b8a:	bf00      	nop
 8005b8c:	e000e3f0 	.word	0xe000e3f0
 8005b90:	20000f18 	.word	0x20000f18
 8005b94:	e000ed0c 	.word	0xe000ed0c
 8005b98:	20000f1c 	.word	0x20000f1c

08005b9c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b08a      	sub	sp, #40	@ 0x28
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005ba8:	f7fe fda4 	bl	80046f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005bac:	4b5a      	ldr	r3, [pc, #360]	@ (8005d18 <pvPortMalloc+0x17c>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d101      	bne.n	8005bb8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005bb4:	f000 f916 	bl	8005de4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005bb8:	4b58      	ldr	r3, [pc, #352]	@ (8005d1c <pvPortMalloc+0x180>)
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	4013      	ands	r3, r2
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	f040 8090 	bne.w	8005ce6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d01e      	beq.n	8005c0a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005bcc:	2208      	movs	r2, #8
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4413      	add	r3, r2
 8005bd2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f003 0307 	and.w	r3, r3, #7
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d015      	beq.n	8005c0a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f023 0307 	bic.w	r3, r3, #7
 8005be4:	3308      	adds	r3, #8
 8005be6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f003 0307 	and.w	r3, r3, #7
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d00b      	beq.n	8005c0a <pvPortMalloc+0x6e>
	__asm volatile
 8005bf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bf6:	f383 8811 	msr	BASEPRI, r3
 8005bfa:	f3bf 8f6f 	isb	sy
 8005bfe:	f3bf 8f4f 	dsb	sy
 8005c02:	617b      	str	r3, [r7, #20]
}
 8005c04:	bf00      	nop
 8005c06:	bf00      	nop
 8005c08:	e7fd      	b.n	8005c06 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d06a      	beq.n	8005ce6 <pvPortMalloc+0x14a>
 8005c10:	4b43      	ldr	r3, [pc, #268]	@ (8005d20 <pvPortMalloc+0x184>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d865      	bhi.n	8005ce6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005c1a:	4b42      	ldr	r3, [pc, #264]	@ (8005d24 <pvPortMalloc+0x188>)
 8005c1c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005c1e:	4b41      	ldr	r3, [pc, #260]	@ (8005d24 <pvPortMalloc+0x188>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c24:	e004      	b.n	8005c30 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c28:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	687a      	ldr	r2, [r7, #4]
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d903      	bls.n	8005c42 <pvPortMalloc+0xa6>
 8005c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d1f1      	bne.n	8005c26 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005c42:	4b35      	ldr	r3, [pc, #212]	@ (8005d18 <pvPortMalloc+0x17c>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d04c      	beq.n	8005ce6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005c4c:	6a3b      	ldr	r3, [r7, #32]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	2208      	movs	r2, #8
 8005c52:	4413      	add	r3, r2
 8005c54:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	6a3b      	ldr	r3, [r7, #32]
 8005c5c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c60:	685a      	ldr	r2, [r3, #4]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	1ad2      	subs	r2, r2, r3
 8005c66:	2308      	movs	r3, #8
 8005c68:	005b      	lsls	r3, r3, #1
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d920      	bls.n	8005cb0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005c6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	4413      	add	r3, r2
 8005c74:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c76:	69bb      	ldr	r3, [r7, #24]
 8005c78:	f003 0307 	and.w	r3, r3, #7
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d00b      	beq.n	8005c98 <pvPortMalloc+0xfc>
	__asm volatile
 8005c80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c84:	f383 8811 	msr	BASEPRI, r3
 8005c88:	f3bf 8f6f 	isb	sy
 8005c8c:	f3bf 8f4f 	dsb	sy
 8005c90:	613b      	str	r3, [r7, #16]
}
 8005c92:	bf00      	nop
 8005c94:	bf00      	nop
 8005c96:	e7fd      	b.n	8005c94 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c9a:	685a      	ldr	r2, [r3, #4]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	1ad2      	subs	r2, r2, r3
 8005ca0:	69bb      	ldr	r3, [r7, #24]
 8005ca2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ca6:	687a      	ldr	r2, [r7, #4]
 8005ca8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005caa:	69b8      	ldr	r0, [r7, #24]
 8005cac:	f000 f8fc 	bl	8005ea8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005cb0:	4b1b      	ldr	r3, [pc, #108]	@ (8005d20 <pvPortMalloc+0x184>)
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	1ad3      	subs	r3, r2, r3
 8005cba:	4a19      	ldr	r2, [pc, #100]	@ (8005d20 <pvPortMalloc+0x184>)
 8005cbc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005cbe:	4b18      	ldr	r3, [pc, #96]	@ (8005d20 <pvPortMalloc+0x184>)
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	4b19      	ldr	r3, [pc, #100]	@ (8005d28 <pvPortMalloc+0x18c>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d203      	bcs.n	8005cd2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005cca:	4b15      	ldr	r3, [pc, #84]	@ (8005d20 <pvPortMalloc+0x184>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a16      	ldr	r2, [pc, #88]	@ (8005d28 <pvPortMalloc+0x18c>)
 8005cd0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cd4:	685a      	ldr	r2, [r3, #4]
 8005cd6:	4b11      	ldr	r3, [pc, #68]	@ (8005d1c <pvPortMalloc+0x180>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	431a      	orrs	r2, r3
 8005cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cde:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005ce6:	f7fe fd13 	bl	8004710 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005cea:	69fb      	ldr	r3, [r7, #28]
 8005cec:	f003 0307 	and.w	r3, r3, #7
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d00b      	beq.n	8005d0c <pvPortMalloc+0x170>
	__asm volatile
 8005cf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cf8:	f383 8811 	msr	BASEPRI, r3
 8005cfc:	f3bf 8f6f 	isb	sy
 8005d00:	f3bf 8f4f 	dsb	sy
 8005d04:	60fb      	str	r3, [r7, #12]
}
 8005d06:	bf00      	nop
 8005d08:	bf00      	nop
 8005d0a:	e7fd      	b.n	8005d08 <pvPortMalloc+0x16c>
	return pvReturn;
 8005d0c:	69fb      	ldr	r3, [r7, #28]
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3728      	adds	r7, #40	@ 0x28
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}
 8005d16:	bf00      	nop
 8005d18:	20001b28 	.word	0x20001b28
 8005d1c:	20001b34 	.word	0x20001b34
 8005d20:	20001b2c 	.word	0x20001b2c
 8005d24:	20001b20 	.word	0x20001b20
 8005d28:	20001b30 	.word	0x20001b30

08005d2c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b086      	sub	sp, #24
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d04a      	beq.n	8005dd4 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005d3e:	2308      	movs	r3, #8
 8005d40:	425b      	negs	r3, r3
 8005d42:	697a      	ldr	r2, [r7, #20]
 8005d44:	4413      	add	r3, r2
 8005d46:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	685a      	ldr	r2, [r3, #4]
 8005d50:	4b22      	ldr	r3, [pc, #136]	@ (8005ddc <vPortFree+0xb0>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4013      	ands	r3, r2
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d10b      	bne.n	8005d72 <vPortFree+0x46>
	__asm volatile
 8005d5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d5e:	f383 8811 	msr	BASEPRI, r3
 8005d62:	f3bf 8f6f 	isb	sy
 8005d66:	f3bf 8f4f 	dsb	sy
 8005d6a:	60fb      	str	r3, [r7, #12]
}
 8005d6c:	bf00      	nop
 8005d6e:	bf00      	nop
 8005d70:	e7fd      	b.n	8005d6e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d00b      	beq.n	8005d92 <vPortFree+0x66>
	__asm volatile
 8005d7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d7e:	f383 8811 	msr	BASEPRI, r3
 8005d82:	f3bf 8f6f 	isb	sy
 8005d86:	f3bf 8f4f 	dsb	sy
 8005d8a:	60bb      	str	r3, [r7, #8]
}
 8005d8c:	bf00      	nop
 8005d8e:	bf00      	nop
 8005d90:	e7fd      	b.n	8005d8e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	685a      	ldr	r2, [r3, #4]
 8005d96:	4b11      	ldr	r3, [pc, #68]	@ (8005ddc <vPortFree+0xb0>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4013      	ands	r3, r2
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d019      	beq.n	8005dd4 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d115      	bne.n	8005dd4 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	685a      	ldr	r2, [r3, #4]
 8005dac:	4b0b      	ldr	r3, [pc, #44]	@ (8005ddc <vPortFree+0xb0>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	43db      	mvns	r3, r3
 8005db2:	401a      	ands	r2, r3
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005db8:	f7fe fc9c 	bl	80046f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	685a      	ldr	r2, [r3, #4]
 8005dc0:	4b07      	ldr	r3, [pc, #28]	@ (8005de0 <vPortFree+0xb4>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4413      	add	r3, r2
 8005dc6:	4a06      	ldr	r2, [pc, #24]	@ (8005de0 <vPortFree+0xb4>)
 8005dc8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005dca:	6938      	ldr	r0, [r7, #16]
 8005dcc:	f000 f86c 	bl	8005ea8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005dd0:	f7fe fc9e 	bl	8004710 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005dd4:	bf00      	nop
 8005dd6:	3718      	adds	r7, #24
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}
 8005ddc:	20001b34 	.word	0x20001b34
 8005de0:	20001b2c 	.word	0x20001b2c

08005de4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005de4:	b480      	push	{r7}
 8005de6:	b085      	sub	sp, #20
 8005de8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005dea:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8005dee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005df0:	4b27      	ldr	r3, [pc, #156]	@ (8005e90 <prvHeapInit+0xac>)
 8005df2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f003 0307 	and.w	r3, r3, #7
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d00c      	beq.n	8005e18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	3307      	adds	r3, #7
 8005e02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f023 0307 	bic.w	r3, r3, #7
 8005e0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005e0c:	68ba      	ldr	r2, [r7, #8]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	1ad3      	subs	r3, r2, r3
 8005e12:	4a1f      	ldr	r2, [pc, #124]	@ (8005e90 <prvHeapInit+0xac>)
 8005e14:	4413      	add	r3, r2
 8005e16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005e1c:	4a1d      	ldr	r2, [pc, #116]	@ (8005e94 <prvHeapInit+0xb0>)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005e22:	4b1c      	ldr	r3, [pc, #112]	@ (8005e94 <prvHeapInit+0xb0>)
 8005e24:	2200      	movs	r2, #0
 8005e26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	68ba      	ldr	r2, [r7, #8]
 8005e2c:	4413      	add	r3, r2
 8005e2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005e30:	2208      	movs	r2, #8
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	1a9b      	subs	r3, r3, r2
 8005e36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f023 0307 	bic.w	r3, r3, #7
 8005e3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	4a15      	ldr	r2, [pc, #84]	@ (8005e98 <prvHeapInit+0xb4>)
 8005e44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005e46:	4b14      	ldr	r3, [pc, #80]	@ (8005e98 <prvHeapInit+0xb4>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005e4e:	4b12      	ldr	r3, [pc, #72]	@ (8005e98 <prvHeapInit+0xb4>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	2200      	movs	r2, #0
 8005e54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	68fa      	ldr	r2, [r7, #12]
 8005e5e:	1ad2      	subs	r2, r2, r3
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005e64:	4b0c      	ldr	r3, [pc, #48]	@ (8005e98 <prvHeapInit+0xb4>)
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	4a0a      	ldr	r2, [pc, #40]	@ (8005e9c <prvHeapInit+0xb8>)
 8005e72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	4a09      	ldr	r2, [pc, #36]	@ (8005ea0 <prvHeapInit+0xbc>)
 8005e7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005e7c:	4b09      	ldr	r3, [pc, #36]	@ (8005ea4 <prvHeapInit+0xc0>)
 8005e7e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005e82:	601a      	str	r2, [r3, #0]
}
 8005e84:	bf00      	nop
 8005e86:	3714      	adds	r7, #20
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr
 8005e90:	20000f20 	.word	0x20000f20
 8005e94:	20001b20 	.word	0x20001b20
 8005e98:	20001b28 	.word	0x20001b28
 8005e9c:	20001b30 	.word	0x20001b30
 8005ea0:	20001b2c 	.word	0x20001b2c
 8005ea4:	20001b34 	.word	0x20001b34

08005ea8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b085      	sub	sp, #20
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005eb0:	4b28      	ldr	r3, [pc, #160]	@ (8005f54 <prvInsertBlockIntoFreeList+0xac>)
 8005eb2:	60fb      	str	r3, [r7, #12]
 8005eb4:	e002      	b.n	8005ebc <prvInsertBlockIntoFreeList+0x14>
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	60fb      	str	r3, [r7, #12]
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	687a      	ldr	r2, [r7, #4]
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d8f7      	bhi.n	8005eb6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	68ba      	ldr	r2, [r7, #8]
 8005ed0:	4413      	add	r3, r2
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d108      	bne.n	8005eea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	685a      	ldr	r2, [r3, #4]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	441a      	add	r2, r3
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	68ba      	ldr	r2, [r7, #8]
 8005ef4:	441a      	add	r2, r3
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d118      	bne.n	8005f30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	4b15      	ldr	r3, [pc, #84]	@ (8005f58 <prvInsertBlockIntoFreeList+0xb0>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	429a      	cmp	r2, r3
 8005f08:	d00d      	beq.n	8005f26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	685a      	ldr	r2, [r3, #4]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	441a      	add	r2, r3
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	601a      	str	r2, [r3, #0]
 8005f24:	e008      	b.n	8005f38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005f26:	4b0c      	ldr	r3, [pc, #48]	@ (8005f58 <prvInsertBlockIntoFreeList+0xb0>)
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	601a      	str	r2, [r3, #0]
 8005f2e:	e003      	b.n	8005f38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005f38:	68fa      	ldr	r2, [r7, #12]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d002      	beq.n	8005f46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	687a      	ldr	r2, [r7, #4]
 8005f44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f46:	bf00      	nop
 8005f48:	3714      	adds	r7, #20
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr
 8005f52:	bf00      	nop
 8005f54:	20001b20 	.word	0x20001b20
 8005f58:	20001b28 	.word	0x20001b28

08005f5c <memset>:
 8005f5c:	4402      	add	r2, r0
 8005f5e:	4603      	mov	r3, r0
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d100      	bne.n	8005f66 <memset+0xa>
 8005f64:	4770      	bx	lr
 8005f66:	f803 1b01 	strb.w	r1, [r3], #1
 8005f6a:	e7f9      	b.n	8005f60 <memset+0x4>

08005f6c <_reclaim_reent>:
 8005f6c:	4b29      	ldr	r3, [pc, #164]	@ (8006014 <_reclaim_reent+0xa8>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4283      	cmp	r3, r0
 8005f72:	b570      	push	{r4, r5, r6, lr}
 8005f74:	4604      	mov	r4, r0
 8005f76:	d04b      	beq.n	8006010 <_reclaim_reent+0xa4>
 8005f78:	69c3      	ldr	r3, [r0, #28]
 8005f7a:	b1ab      	cbz	r3, 8005fa8 <_reclaim_reent+0x3c>
 8005f7c:	68db      	ldr	r3, [r3, #12]
 8005f7e:	b16b      	cbz	r3, 8005f9c <_reclaim_reent+0x30>
 8005f80:	2500      	movs	r5, #0
 8005f82:	69e3      	ldr	r3, [r4, #28]
 8005f84:	68db      	ldr	r3, [r3, #12]
 8005f86:	5959      	ldr	r1, [r3, r5]
 8005f88:	2900      	cmp	r1, #0
 8005f8a:	d13b      	bne.n	8006004 <_reclaim_reent+0x98>
 8005f8c:	3504      	adds	r5, #4
 8005f8e:	2d80      	cmp	r5, #128	@ 0x80
 8005f90:	d1f7      	bne.n	8005f82 <_reclaim_reent+0x16>
 8005f92:	69e3      	ldr	r3, [r4, #28]
 8005f94:	4620      	mov	r0, r4
 8005f96:	68d9      	ldr	r1, [r3, #12]
 8005f98:	f000 f872 	bl	8006080 <_free_r>
 8005f9c:	69e3      	ldr	r3, [r4, #28]
 8005f9e:	6819      	ldr	r1, [r3, #0]
 8005fa0:	b111      	cbz	r1, 8005fa8 <_reclaim_reent+0x3c>
 8005fa2:	4620      	mov	r0, r4
 8005fa4:	f000 f86c 	bl	8006080 <_free_r>
 8005fa8:	6961      	ldr	r1, [r4, #20]
 8005faa:	b111      	cbz	r1, 8005fb2 <_reclaim_reent+0x46>
 8005fac:	4620      	mov	r0, r4
 8005fae:	f000 f867 	bl	8006080 <_free_r>
 8005fb2:	69e1      	ldr	r1, [r4, #28]
 8005fb4:	b111      	cbz	r1, 8005fbc <_reclaim_reent+0x50>
 8005fb6:	4620      	mov	r0, r4
 8005fb8:	f000 f862 	bl	8006080 <_free_r>
 8005fbc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005fbe:	b111      	cbz	r1, 8005fc6 <_reclaim_reent+0x5a>
 8005fc0:	4620      	mov	r0, r4
 8005fc2:	f000 f85d 	bl	8006080 <_free_r>
 8005fc6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005fc8:	b111      	cbz	r1, 8005fd0 <_reclaim_reent+0x64>
 8005fca:	4620      	mov	r0, r4
 8005fcc:	f000 f858 	bl	8006080 <_free_r>
 8005fd0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8005fd2:	b111      	cbz	r1, 8005fda <_reclaim_reent+0x6e>
 8005fd4:	4620      	mov	r0, r4
 8005fd6:	f000 f853 	bl	8006080 <_free_r>
 8005fda:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005fdc:	b111      	cbz	r1, 8005fe4 <_reclaim_reent+0x78>
 8005fde:	4620      	mov	r0, r4
 8005fe0:	f000 f84e 	bl	8006080 <_free_r>
 8005fe4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005fe6:	b111      	cbz	r1, 8005fee <_reclaim_reent+0x82>
 8005fe8:	4620      	mov	r0, r4
 8005fea:	f000 f849 	bl	8006080 <_free_r>
 8005fee:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005ff0:	b111      	cbz	r1, 8005ff8 <_reclaim_reent+0x8c>
 8005ff2:	4620      	mov	r0, r4
 8005ff4:	f000 f844 	bl	8006080 <_free_r>
 8005ff8:	6a23      	ldr	r3, [r4, #32]
 8005ffa:	b14b      	cbz	r3, 8006010 <_reclaim_reent+0xa4>
 8005ffc:	4620      	mov	r0, r4
 8005ffe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006002:	4718      	bx	r3
 8006004:	680e      	ldr	r6, [r1, #0]
 8006006:	4620      	mov	r0, r4
 8006008:	f000 f83a 	bl	8006080 <_free_r>
 800600c:	4631      	mov	r1, r6
 800600e:	e7bb      	b.n	8005f88 <_reclaim_reent+0x1c>
 8006010:	bd70      	pop	{r4, r5, r6, pc}
 8006012:	bf00      	nop
 8006014:	20000010 	.word	0x20000010

08006018 <__libc_init_array>:
 8006018:	b570      	push	{r4, r5, r6, lr}
 800601a:	4d0d      	ldr	r5, [pc, #52]	@ (8006050 <__libc_init_array+0x38>)
 800601c:	4c0d      	ldr	r4, [pc, #52]	@ (8006054 <__libc_init_array+0x3c>)
 800601e:	1b64      	subs	r4, r4, r5
 8006020:	10a4      	asrs	r4, r4, #2
 8006022:	2600      	movs	r6, #0
 8006024:	42a6      	cmp	r6, r4
 8006026:	d109      	bne.n	800603c <__libc_init_array+0x24>
 8006028:	4d0b      	ldr	r5, [pc, #44]	@ (8006058 <__libc_init_array+0x40>)
 800602a:	4c0c      	ldr	r4, [pc, #48]	@ (800605c <__libc_init_array+0x44>)
 800602c:	f000 f87e 	bl	800612c <_init>
 8006030:	1b64      	subs	r4, r4, r5
 8006032:	10a4      	asrs	r4, r4, #2
 8006034:	2600      	movs	r6, #0
 8006036:	42a6      	cmp	r6, r4
 8006038:	d105      	bne.n	8006046 <__libc_init_array+0x2e>
 800603a:	bd70      	pop	{r4, r5, r6, pc}
 800603c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006040:	4798      	blx	r3
 8006042:	3601      	adds	r6, #1
 8006044:	e7ee      	b.n	8006024 <__libc_init_array+0xc>
 8006046:	f855 3b04 	ldr.w	r3, [r5], #4
 800604a:	4798      	blx	r3
 800604c:	3601      	adds	r6, #1
 800604e:	e7f2      	b.n	8006036 <__libc_init_array+0x1e>
 8006050:	080061cc 	.word	0x080061cc
 8006054:	080061cc 	.word	0x080061cc
 8006058:	080061cc 	.word	0x080061cc
 800605c:	080061d0 	.word	0x080061d0

08006060 <__retarget_lock_acquire_recursive>:
 8006060:	4770      	bx	lr

08006062 <__retarget_lock_release_recursive>:
 8006062:	4770      	bx	lr

08006064 <memcpy>:
 8006064:	440a      	add	r2, r1
 8006066:	4291      	cmp	r1, r2
 8006068:	f100 33ff 	add.w	r3, r0, #4294967295
 800606c:	d100      	bne.n	8006070 <memcpy+0xc>
 800606e:	4770      	bx	lr
 8006070:	b510      	push	{r4, lr}
 8006072:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006076:	f803 4f01 	strb.w	r4, [r3, #1]!
 800607a:	4291      	cmp	r1, r2
 800607c:	d1f9      	bne.n	8006072 <memcpy+0xe>
 800607e:	bd10      	pop	{r4, pc}

08006080 <_free_r>:
 8006080:	b538      	push	{r3, r4, r5, lr}
 8006082:	4605      	mov	r5, r0
 8006084:	2900      	cmp	r1, #0
 8006086:	d041      	beq.n	800610c <_free_r+0x8c>
 8006088:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800608c:	1f0c      	subs	r4, r1, #4
 800608e:	2b00      	cmp	r3, #0
 8006090:	bfb8      	it	lt
 8006092:	18e4      	addlt	r4, r4, r3
 8006094:	f000 f83e 	bl	8006114 <__malloc_lock>
 8006098:	4a1d      	ldr	r2, [pc, #116]	@ (8006110 <_free_r+0x90>)
 800609a:	6813      	ldr	r3, [r2, #0]
 800609c:	b933      	cbnz	r3, 80060ac <_free_r+0x2c>
 800609e:	6063      	str	r3, [r4, #4]
 80060a0:	6014      	str	r4, [r2, #0]
 80060a2:	4628      	mov	r0, r5
 80060a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80060a8:	f000 b83a 	b.w	8006120 <__malloc_unlock>
 80060ac:	42a3      	cmp	r3, r4
 80060ae:	d908      	bls.n	80060c2 <_free_r+0x42>
 80060b0:	6820      	ldr	r0, [r4, #0]
 80060b2:	1821      	adds	r1, r4, r0
 80060b4:	428b      	cmp	r3, r1
 80060b6:	bf01      	itttt	eq
 80060b8:	6819      	ldreq	r1, [r3, #0]
 80060ba:	685b      	ldreq	r3, [r3, #4]
 80060bc:	1809      	addeq	r1, r1, r0
 80060be:	6021      	streq	r1, [r4, #0]
 80060c0:	e7ed      	b.n	800609e <_free_r+0x1e>
 80060c2:	461a      	mov	r2, r3
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	b10b      	cbz	r3, 80060cc <_free_r+0x4c>
 80060c8:	42a3      	cmp	r3, r4
 80060ca:	d9fa      	bls.n	80060c2 <_free_r+0x42>
 80060cc:	6811      	ldr	r1, [r2, #0]
 80060ce:	1850      	adds	r0, r2, r1
 80060d0:	42a0      	cmp	r0, r4
 80060d2:	d10b      	bne.n	80060ec <_free_r+0x6c>
 80060d4:	6820      	ldr	r0, [r4, #0]
 80060d6:	4401      	add	r1, r0
 80060d8:	1850      	adds	r0, r2, r1
 80060da:	4283      	cmp	r3, r0
 80060dc:	6011      	str	r1, [r2, #0]
 80060de:	d1e0      	bne.n	80060a2 <_free_r+0x22>
 80060e0:	6818      	ldr	r0, [r3, #0]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	6053      	str	r3, [r2, #4]
 80060e6:	4408      	add	r0, r1
 80060e8:	6010      	str	r0, [r2, #0]
 80060ea:	e7da      	b.n	80060a2 <_free_r+0x22>
 80060ec:	d902      	bls.n	80060f4 <_free_r+0x74>
 80060ee:	230c      	movs	r3, #12
 80060f0:	602b      	str	r3, [r5, #0]
 80060f2:	e7d6      	b.n	80060a2 <_free_r+0x22>
 80060f4:	6820      	ldr	r0, [r4, #0]
 80060f6:	1821      	adds	r1, r4, r0
 80060f8:	428b      	cmp	r3, r1
 80060fa:	bf04      	itt	eq
 80060fc:	6819      	ldreq	r1, [r3, #0]
 80060fe:	685b      	ldreq	r3, [r3, #4]
 8006100:	6063      	str	r3, [r4, #4]
 8006102:	bf04      	itt	eq
 8006104:	1809      	addeq	r1, r1, r0
 8006106:	6021      	streq	r1, [r4, #0]
 8006108:	6054      	str	r4, [r2, #4]
 800610a:	e7ca      	b.n	80060a2 <_free_r+0x22>
 800610c:	bd38      	pop	{r3, r4, r5, pc}
 800610e:	bf00      	nop
 8006110:	20001c74 	.word	0x20001c74

08006114 <__malloc_lock>:
 8006114:	4801      	ldr	r0, [pc, #4]	@ (800611c <__malloc_lock+0x8>)
 8006116:	f7ff bfa3 	b.w	8006060 <__retarget_lock_acquire_recursive>
 800611a:	bf00      	nop
 800611c:	20001c70 	.word	0x20001c70

08006120 <__malloc_unlock>:
 8006120:	4801      	ldr	r0, [pc, #4]	@ (8006128 <__malloc_unlock+0x8>)
 8006122:	f7ff bf9e 	b.w	8006062 <__retarget_lock_release_recursive>
 8006126:	bf00      	nop
 8006128:	20001c70 	.word	0x20001c70

0800612c <_init>:
 800612c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800612e:	bf00      	nop
 8006130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006132:	bc08      	pop	{r3}
 8006134:	469e      	mov	lr, r3
 8006136:	4770      	bx	lr

08006138 <_fini>:
 8006138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800613a:	bf00      	nop
 800613c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800613e:	bc08      	pop	{r3}
 8006140:	469e      	mov	lr, r3
 8006142:	4770      	bx	lr
